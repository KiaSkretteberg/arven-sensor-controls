
ArvenSensorControls.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001e3a  00001ece  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800122  00800122  00001ef0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013bc  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b37  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1e  00000000  00000000  00003fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  00004cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099d  00000000  00000000  00005138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000879  00000000  00000000  00005ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000634e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__ctors_end>
       4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__vector_5>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__vector_11>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	1c 01       	movw	r2, r24
      6a:	26 01       	movw	r4, r12
      6c:	30 01       	movw	r6, r0
      6e:	3a 01       	movw	r6, r20
      70:	44 01       	movw	r8, r8
      72:	4e 01       	movw	r8, r28
      74:	58 01       	movw	r10, r16
      76:	62 01       	movw	r12, r4

00000078 <__trampolines_end>:
      78:	6e 61       	ori	r22, 0x1E	; 30
      7a:	6e 00       	.word	0x006e	; ????

0000007c <__c.2332>:
      7c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      8c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      9c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      ac:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      bc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      cc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      dc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      ec:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      fc:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     10c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     11c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     12c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     13c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     14c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     15c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     16c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000017a <__ctors_end>:
     17a:	11 24       	eor	r1, r1
     17c:	1f be       	out	0x3f, r1	; 63
     17e:	cf ef       	ldi	r28, 0xFF	; 255
     180:	d8 e0       	ldi	r29, 0x08	; 8
     182:	de bf       	out	0x3e, r29	; 62
     184:	cd bf       	out	0x3d, r28	; 61

00000186 <__do_copy_data>:
     186:	11 e0       	ldi	r17, 0x01	; 1
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	ea e3       	ldi	r30, 0x3A	; 58
     18e:	fe e1       	ldi	r31, 0x1E	; 30
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x10>
     192:	05 90       	lpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	a2 32       	cpi	r26, 0x22	; 34
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0xc>

0000019c <__do_clear_bss>:
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	a2 e2       	ldi	r26, 0x22	; 34
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	a2 33       	cpi	r26, 0x32	; 50
     1a8:	b2 07       	cpc	r27, r18
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
     1ac:	0e 94 0c 07 	call	0xe18	; 0xe18 <main>
     1b0:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <AtoD_Init>:
#include <avr/io.h>
#include <stdio.h>
#include "atd.h"

void AtoD_Init (AtoD_Channel chan)
{
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	1f 92       	push	r1
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
     1c2:	89 83       	std	Y+1, r24	; 0x01
  PRR &= ~(1 << PRADC); // turn on A/D module in power reduction register
     1c4:	84 e6       	ldi	r24, 0x64	; 100
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	24 e6       	ldi	r18, 0x64	; 100
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	f9 01       	movw	r30, r18
     1ce:	20 81       	ld	r18, Z
     1d0:	2e 7f       	andi	r18, 0xFE	; 254
     1d2:	fc 01       	movw	r30, r24
     1d4:	20 83       	st	Z, r18
  
  ADMUX = 0b00000000;   // Internal Vref off, right-aligned, ADC0 (28.9.1)  
     1d6:	8c e7       	ldi	r24, 0x7C	; 124
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	fc 01       	movw	r30, r24
     1dc:	10 82       	st	Z, r1
  ADCSRB = 0b00000000;  // default, no comparator, free running mode    
     1de:	8b e7       	ldi	r24, 0x7B	; 123
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	fc 01       	movw	r30, r24
     1e4:	10 82       	st	Z, r1
  
  // use support function to set channel
  AtoD_SetChannel(chan);
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	0e 94 00 01 	call	0x200	; 0x200 <AtoD_SetChannel>
  
  ADCSRA = 0b11100111;  // turn on AD, prescale 128, ADATE needs to be on? (28.9.2)
     1ec:	8a e7       	ldi	r24, 0x7A	; 122
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	27 ee       	ldi	r18, 0xE7	; 231
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
}
     1f6:	00 00       	nop
     1f8:	0f 90       	pop	r0
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <AtoD_SetChannel>:

void AtoD_SetChannel (AtoD_Channel chan)
{
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	1f 92       	push	r1
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	89 83       	std	Y+1, r24	; 0x01
  switch (chan) 
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	88 2f       	mov	r24, r24
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	09 2e       	mov	r0, r25
     214:	00 0c       	add	r0, r0
     216:	aa 0b       	sbc	r26, r26
     218:	bb 0b       	sbc	r27, r27
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	27 e0       	ldi	r18, 0x07	; 7
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	84 1b       	sub	r24, r20
     224:	95 0b       	sbc	r25, r21
     226:	28 17       	cp	r18, r24
     228:	39 07       	cpc	r19, r25
     22a:	08 f4       	brcc	.+2      	; 0x22e <AtoD_SetChannel+0x2e>
     22c:	55 c0       	rjmp	.+170    	; 0x2d8 <AtoD_SetChannel+0xd8>
     22e:	8c 5c       	subi	r24, 0xCC	; 204
     230:	9f 4f       	sbci	r25, 0xFF	; 255
     232:	fc 01       	movw	r30, r24
     234:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__tablejump2__>
  {
    case AtoD_Channel_0:
      DIDR0 |= 0b00000001;  // kill digital input for channel 0
     238:	8e e7       	ldi	r24, 0x7E	; 126
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	2e e7       	ldi	r18, 0x7E	; 126
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	f9 01       	movw	r30, r18
     242:	20 81       	ld	r18, Z
     244:	21 60       	ori	r18, 0x01	; 1
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
      break;
     24a:	4a c0       	rjmp	.+148    	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_1:
      DIDR0 |= 0b00000010;  // kill digital input for channel 0
     24c:	8e e7       	ldi	r24, 0x7E	; 126
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	2e e7       	ldi	r18, 0x7E	; 126
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	20 81       	ld	r18, Z
     258:	22 60       	ori	r18, 0x02	; 2
     25a:	fc 01       	movw	r30, r24
     25c:	20 83       	st	Z, r18
      break;
     25e:	40 c0       	rjmp	.+128    	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_2:
      DIDR0 |= 0b00000100;  // kill digital input for channel 0
     260:	8e e7       	ldi	r24, 0x7E	; 126
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	2e e7       	ldi	r18, 0x7E	; 126
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	f9 01       	movw	r30, r18
     26a:	20 81       	ld	r18, Z
     26c:	24 60       	ori	r18, 0x04	; 4
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
      break;
     272:	36 c0       	rjmp	.+108    	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_3:
      DIDR0 |= 0b00001000;  // kill digital input for channel 0
     274:	8e e7       	ldi	r24, 0x7E	; 126
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	2e e7       	ldi	r18, 0x7E	; 126
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	f9 01       	movw	r30, r18
     27e:	20 81       	ld	r18, Z
     280:	28 60       	ori	r18, 0x08	; 8
     282:	fc 01       	movw	r30, r24
     284:	20 83       	st	Z, r18
      break;
     286:	2c c0       	rjmp	.+88     	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_4:
      DIDR0 |= 0b00010000;  // kill digital input for channel 0
     288:	8e e7       	ldi	r24, 0x7E	; 126
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	2e e7       	ldi	r18, 0x7E	; 126
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	f9 01       	movw	r30, r18
     292:	20 81       	ld	r18, Z
     294:	20 61       	ori	r18, 0x10	; 16
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
      break;
     29a:	22 c0       	rjmp	.+68     	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_5:
      DIDR0 |= 0b00100000;  // kill digital input for channel 0
     29c:	8e e7       	ldi	r24, 0x7E	; 126
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	2e e7       	ldi	r18, 0x7E	; 126
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	f9 01       	movw	r30, r18
     2a6:	20 81       	ld	r18, Z
     2a8:	20 62       	ori	r18, 0x20	; 32
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
      break;
     2ae:	18 c0       	rjmp	.+48     	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_6:
      DIDR0 |= 0b01000000;  // kill digital input for channel 0
     2b0:	8e e7       	ldi	r24, 0x7E	; 126
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	2e e7       	ldi	r18, 0x7E	; 126
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	f9 01       	movw	r30, r18
     2ba:	20 81       	ld	r18, Z
     2bc:	20 64       	ori	r18, 0x40	; 64
     2be:	fc 01       	movw	r30, r24
     2c0:	20 83       	st	Z, r18
      break;
     2c2:	0e c0       	rjmp	.+28     	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_7:
      DIDR0 |= 0b10000000;  // kill digital input for channel 0
     2c4:	8e e7       	ldi	r24, 0x7E	; 126
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	2e e7       	ldi	r18, 0x7E	; 126
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	f9 01       	movw	r30, r18
     2ce:	20 81       	ld	r18, Z
     2d0:	20 68       	ori	r18, 0x80	; 128
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 83       	st	Z, r18
      break;
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <AtoD_SetChannel+0xe0>
    default:               // other cases don't require digital inputs 
      DIDR0 = 0b00000000;  // all A/D channels as digital inputs
     2d8:	8e e7       	ldi	r24, 0x7E	; 126
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	fc 01       	movw	r30, r24
     2de:	10 82       	st	Z, r1
  }      
  
  // channel selection
  ADMUX &= 0b11110000;  // clear channel selection
     2e0:	8c e7       	ldi	r24, 0x7C	; 124
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	2c e7       	ldi	r18, 0x7C	; 124
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	f9 01       	movw	r30, r18
     2ea:	20 81       	ld	r18, Z
     2ec:	20 7f       	andi	r18, 0xF0	; 240
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 83       	st	Z, r18
  ADMUX |= chan;        // set back channel selection bits
     2f2:	8c e7       	ldi	r24, 0x7C	; 124
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	2c e7       	ldi	r18, 0x7C	; 124
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	f9 01       	movw	r30, r18
     2fc:	30 81       	ld	r19, Z
     2fe:	29 81       	ldd	r18, Y+1	; 0x01
     300:	23 2b       	or	r18, r19
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18
     306:	00 00       	nop
     308:	0f 90       	pop	r0
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <SCI0_Init>:
  (void)sprintf(buff, "0x%4.4X", uiVal);
  SCI0_TxString (buff);

  if (tl)
    SCI0_TxString ("\r\n");
}
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	2c 97       	sbiw	r28, 0x0c	; 12
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
     328:	6b 83       	std	Y+3, r22	; 0x03
     32a:	7c 83       	std	Y+4, r23	; 0x04
     32c:	8d 83       	std	Y+5, r24	; 0x05
     32e:	9e 83       	std	Y+6, r25	; 0x06
     330:	2f 83       	std	Y+7, r18	; 0x07
     332:	38 87       	std	Y+8, r19	; 0x08
     334:	49 87       	std	Y+9, r20	; 0x09
     336:	5a 87       	std	Y+10, r21	; 0x0a
     338:	1c 87       	std	Y+12, r17	; 0x0c
     33a:	0b 87       	std	Y+11, r16	; 0x0b
     33c:	8b 81       	ldd	r24, Y+3	; 0x03
     33e:	9c 81       	ldd	r25, Y+4	; 0x04
     340:	ad 81       	ldd	r26, Y+5	; 0x05
     342:	be 81       	ldd	r27, Y+6	; 0x06
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	aa 1f       	adc	r26, r26
     34a:	bb 1f       	adc	r27, r27
     34c:	9c 01       	movw	r18, r24
     34e:	ad 01       	movw	r20, r26
     350:	22 0f       	add	r18, r18
     352:	33 1f       	adc	r19, r19
     354:	44 1f       	adc	r20, r20
     356:	55 1f       	adc	r21, r21
     358:	22 0f       	add	r18, r18
     35a:	33 1f       	adc	r19, r19
     35c:	44 1f       	adc	r20, r20
     35e:	55 1f       	adc	r21, r21
     360:	82 0f       	add	r24, r18
     362:	93 1f       	adc	r25, r19
     364:	a4 1f       	adc	r26, r20
     366:	b5 1f       	adc	r27, r21
     368:	68 94       	set
     36a:	13 f8       	bld	r1, 3
     36c:	b6 95       	lsr	r27
     36e:	a7 95       	ror	r26
     370:	97 95       	ror	r25
     372:	87 95       	ror	r24
     374:	16 94       	lsr	r1
     376:	d1 f7       	brne	.-12     	; 0x36c <SCI0_Init+0x5c>
     378:	2f 81       	ldd	r18, Y+7	; 0x07
     37a:	38 85       	ldd	r19, Y+8	; 0x08
     37c:	49 85       	ldd	r20, Y+9	; 0x09
     37e:	5a 85       	ldd	r21, Y+10	; 0x0a
     380:	bc 01       	movw	r22, r24
     382:	cd 01       	movw	r24, r26
     384:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__udivmodsi4>
     388:	da 01       	movw	r26, r20
     38a:	c9 01       	movw	r24, r18
     38c:	05 96       	adiw	r24, 0x05	; 5
     38e:	a1 1d       	adc	r26, r1
     390:	b1 1d       	adc	r27, r1
     392:	2a e0       	ldi	r18, 0x0A	; 10
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	bc 01       	movw	r22, r24
     39c:	cd 01       	movw	r24, r26
     39e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__udivmodsi4>
     3a2:	da 01       	movw	r26, r20
     3a4:	c9 01       	movw	r24, r18
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	9a 83       	std	Y+2, r25	; 0x02
     3aa:	89 83       	std	Y+1, r24	; 0x01
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	9a 81       	ldd	r25, Y+2	; 0x02
     3b0:	81 15       	cp	r24, r1
     3b2:	90 41       	sbci	r25, 0x10	; 16
     3b4:	18 f0       	brcs	.+6      	; 0x3bc <SCI0_Init+0xac>
     3b6:	8f ef       	ldi	r24, 0xFF	; 255
     3b8:	9f ef       	ldi	r25, 0xFF	; 255
     3ba:	2f c0       	rjmp	.+94     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     3bc:	84 e6       	ldi	r24, 0x64	; 100
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	24 e6       	ldi	r18, 0x64	; 100
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	f9 01       	movw	r30, r18
     3c6:	20 81       	ld	r18, Z
     3c8:	2d 7f       	andi	r18, 0xFD	; 253
     3ca:	fc 01       	movw	r30, r24
     3cc:	20 83       	st	Z, r18
     3ce:	85 ec       	ldi	r24, 0xC5	; 197
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	29 81       	ldd	r18, Y+1	; 0x01
     3d4:	3a 81       	ldd	r19, Y+2	; 0x02
     3d6:	23 2f       	mov	r18, r19
     3d8:	33 27       	eor	r19, r19
     3da:	fc 01       	movw	r30, r24
     3dc:	20 83       	st	Z, r18
     3de:	84 ec       	ldi	r24, 0xC4	; 196
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	29 81       	ldd	r18, Y+1	; 0x01
     3e4:	fc 01       	movw	r30, r24
     3e6:	20 83       	st	Z, r18
     3e8:	81 ec       	ldi	r24, 0xC1	; 193
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	28 e1       	ldi	r18, 0x18	; 24
     3ee:	fc 01       	movw	r30, r24
     3f0:	20 83       	st	Z, r18
     3f2:	82 ec       	ldi	r24, 0xC2	; 194
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	26 e0       	ldi	r18, 0x06	; 6
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 83       	st	Z, r18
     3fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     3fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     400:	89 2b       	or	r24, r25
     402:	49 f0       	breq	.+18     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     404:	81 ec       	ldi	r24, 0xC1	; 193
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	21 ec       	ldi	r18, 0xC1	; 193
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	f9 01       	movw	r30, r18
     40e:	20 81       	ld	r18, Z
     410:	20 68       	ori	r18, 0x80	; 128
     412:	fc 01       	movw	r30, r24
     414:	20 83       	st	Z, r18
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	2c 96       	adiw	r28, 0x0c	; 12
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	08 95       	ret

00000430 <SCI0_BSend>:
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	1f 92       	push	r1
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	89 83       	std	Y+1, r24	; 0x01
     43c:	00 00       	nop
     43e:	80 ec       	ldi	r24, 0xC0	; 192
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	fc 01       	movw	r30, r24
     444:	80 81       	ld	r24, Z
     446:	88 2f       	mov	r24, r24
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	80 72       	andi	r24, 0x20	; 32
     44c:	99 27       	eor	r25, r25
     44e:	89 2b       	or	r24, r25
     450:	b1 f3       	breq	.-20     	; 0x43e <SCI0_BSend+0xe>
     452:	80 ec       	ldi	r24, 0xC0	; 192
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	fc 01       	movw	r30, r24
     458:	80 81       	ld	r24, Z
     45a:	88 2f       	mov	r24, r24
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	80 74       	andi	r24, 0x40	; 64
     460:	99 27       	eor	r25, r25
     462:	89 2b       	or	r24, r25
     464:	29 f0       	breq	.+10     	; 0x470 <SCI0_BSend+0x40>
     466:	80 ec       	ldi	r24, 0xC0	; 192
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	20 e4       	ldi	r18, 0x40	; 64
     46c:	fc 01       	movw	r30, r24
     46e:	20 83       	st	Z, r18
     470:	86 ec       	ldi	r24, 0xC6	; 198
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	29 81       	ldd	r18, Y+1	; 0x01
     476:	fc 01       	movw	r30, r24
     478:	20 83       	st	Z, r18
     47a:	00 00       	nop
     47c:	0f 90       	pop	r0
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <SCI0_TxString>:

void SCI0_TxString (char * buff)
{
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	00 d0       	rcall	.+0      	; 0x48a <SCI0_TxString+0x6>
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	9a 83       	std	Y+2, r25	; 0x02
     490:	89 83       	std	Y+1, r24	; 0x01
  while (*buff)
     492:	0b c0       	rjmp	.+22     	; 0x4aa <SCI0_TxString+0x26>
  {
    SCI0_BSend(*buff);
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	fc 01       	movw	r30, r24
     49a:	80 81       	ld	r24, Z
     49c:	0e 94 18 02 	call	0x430	; 0x430 <SCI0_BSend>
    ++buff;
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	9a 81       	ldd	r25, Y+2	; 0x02
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	9a 83       	std	Y+2, r25	; 0x02
     4a8:	89 83       	std	Y+1, r24	; 0x01
    SCI0_TxString ("\r\n");
}

void SCI0_TxString (char * buff)
{
  while (*buff)
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	fc 01       	movw	r30, r24
     4b0:	80 81       	ld	r24, Z
     4b2:	88 23       	and	r24, r24
     4b4:	79 f7       	brne	.-34     	; 0x494 <SCI0_TxString+0x10>
  {
    SCI0_BSend(*buff);
    ++buff;
  }
}
     4b6:	00 00       	nop
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <Timer_Init>:

#include <avr/io.h>
#include "timer.h"

void Timer_Init (Timer_Prescale pre, unsigned int uiInitialOffset)
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <Timer_Init+0x6>
     4c8:	1f 92       	push	r1
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	89 83       	std	Y+1, r24	; 0x01
     4d0:	7b 83       	std	Y+3, r23	; 0x03
     4d2:	6a 83       	std	Y+2, r22	; 0x02
	// start code will power off all modules...
	// ensure power is on : Timer 1
	// PRR on 328P, PRR0 on 328PB
	PRR &= ~(1 << PRTIM1);
     4d4:	84 e6       	ldi	r24, 0x64	; 100
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	24 e6       	ldi	r18, 0x64	; 100
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	f9 01       	movw	r30, r18
     4de:	20 81       	ld	r18, Z
     4e0:	27 7f       	andi	r18, 0xF7	; 247
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18

	// set prescale to requested rate
	TCCR1B = 0;		// noise canceler disabled, waveform generator normal
     4e6:	81 e8       	ldi	r24, 0x81	; 129
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	fc 01       	movw	r30, r24
     4ec:	10 82       	st	Z, r1
	TCCR1B |= pre;	// put back requested prescale bits
     4ee:	81 e8       	ldi	r24, 0x81	; 129
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	21 e8       	ldi	r18, 0x81	; 129
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	f9 01       	movw	r30, r18
     4f8:	30 81       	ld	r19, Z
     4fa:	29 81       	ldd	r18, Y+1	; 0x01
     4fc:	23 2b       	or	r18, r19
     4fe:	fc 01       	movw	r30, r24
     500:	20 83       	st	Z, r18
	
	// setup initial event for output compare 1 A
	OCR1A = TCNT1 + uiInitialOffset;
     502:	88 e8       	ldi	r24, 0x88	; 136
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	24 e8       	ldi	r18, 0x84	; 132
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	f9 01       	movw	r30, r18
     50c:	40 81       	ld	r20, Z
     50e:	51 81       	ldd	r21, Z+1	; 0x01
     510:	2a 81       	ldd	r18, Y+2	; 0x02
     512:	3b 81       	ldd	r19, Y+3	; 0x03
     514:	24 0f       	add	r18, r20
     516:	35 1f       	adc	r19, r21
     518:	fc 01       	movw	r30, r24
     51a:	31 83       	std	Z+1, r19	; 0x01
     51c:	20 83       	st	Z, r18

	// setup interrupt for output compare
	// timer/counter 1, output compare A match interrupt enable
	TIMSK1 = 0b00000010;
     51e:	8f e6       	ldi	r24, 0x6F	; 111
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	22 e0       	ldi	r18, 0x02	; 2
     524:	fc 01       	movw	r30, r24
     526:	20 83       	st	Z, r18
}
     528:	00 00       	nop
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <GD03_Init>:
/************************************************************************/
/* Header Implementation                                                */
/************************************************************************/

void GD03_Init(void)
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
	AtoD_Init(AtoD_Channel_0); // pin 23
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <AtoD_Init>
}
     544:	00 00       	nop
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

0000054c <HCSR04_InitDevice>:
	 HCSR04_InitDevice(HCSR04_C);
	 HCSR04_InitDevice(HCSR04_R);
 }

 void HCSR04_InitDevice(HCSR04_Device device)
 {
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	1f 92       	push	r1
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
     556:	89 83       	std	Y+1, r24	; 0x01
	 switch(device)
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	88 2f       	mov	r24, r24
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	91 05       	cpc	r25, r1
     562:	61 f1       	breq	.+88     	; 0x5bc <HCSR04_InitDevice+0x70>
     564:	82 30       	cpi	r24, 0x02	; 2
     566:	91 05       	cpc	r25, r1
     568:	09 f4       	brne	.+2      	; 0x56c <HCSR04_InitDevice+0x20>
     56a:	4d c0       	rjmp	.+154    	; 0x606 <HCSR04_InitDevice+0xba>
     56c:	89 2b       	or	r24, r25
     56e:	09 f0       	breq	.+2      	; 0x572 <HCSR04_InitDevice+0x26>
			
			PCMSK0 |= HCSR04_R_Echo; // turn on PCINT2 pin mask (enable interrupts) (12.2.8)
			PCICR |= 0b00000001; // turn on interrupts for group 0 (12.2.4)
			break; 
		default:
			break;
     570:	6f c0       	rjmp	.+222    	; 0x650 <HCSR04_InitDevice+0x104>
 void HCSR04_InitDevice(HCSR04_Device device)
 {
	 switch(device)
	 {
		case HCSR04_L:
			DDRD |= HCSR04_L_Trig; //output
     572:	8a e2       	ldi	r24, 0x2A	; 42
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	2a e2       	ldi	r18, 0x2A	; 42
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	20 81       	ld	r18, Z
     57e:	20 62       	ori	r18, 0x20	; 32
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
			DDRD &= ~HCSR04_L_Echo; //input
     584:	8a e2       	ldi	r24, 0x2A	; 42
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	2a e2       	ldi	r18, 0x2A	; 42
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	2f 7b       	andi	r18, 0xBF	; 191
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
			
			PCMSK2 |= HCSR04_L_Echo; // turn on PCINT22 pin mask (enable interrupts) (12.2.6)
     596:	8d e6       	ldi	r24, 0x6D	; 109
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	2d e6       	ldi	r18, 0x6D	; 109
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	20 64       	ori	r18, 0x40	; 64
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 83       	st	Z, r18
			PCICR |= 0b00000100; // turn on interrupts for group 2 (12.2.4)
     5a8:	88 e6       	ldi	r24, 0x68	; 104
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	28 e6       	ldi	r18, 0x68	; 104
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	20 81       	ld	r18, Z
     5b4:	24 60       	ori	r18, 0x04	; 4
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18
			break;
     5ba:	4a c0       	rjmp	.+148    	; 0x650 <HCSR04_InitDevice+0x104>
		case HCSR04_C:
			DDRD |= HCSR04_C_Trig; //output
     5bc:	8a e2       	ldi	r24, 0x2A	; 42
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	2a e2       	ldi	r18, 0x2A	; 42
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	f9 01       	movw	r30, r18
     5c6:	20 81       	ld	r18, Z
     5c8:	20 68       	ori	r18, 0x80	; 128
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
			DDRB &= ~HCSR04_C_Echo; //input
     5ce:	84 e2       	ldi	r24, 0x24	; 36
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	24 e2       	ldi	r18, 0x24	; 36
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	f9 01       	movw	r30, r18
     5d8:	20 81       	ld	r18, Z
     5da:	2e 7f       	andi	r18, 0xFE	; 254
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
			
			PCMSK0 |= HCSR04_C_Echo; // turn on PCINT0 pin mask (enable interrupts) (12.2.8)
     5e0:	8b e6       	ldi	r24, 0x6B	; 107
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	2b e6       	ldi	r18, 0x6B	; 107
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	f9 01       	movw	r30, r18
     5ea:	20 81       	ld	r18, Z
     5ec:	21 60       	ori	r18, 0x01	; 1
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
			PCICR |= 0b00000001; // turn on interrupts for group 0 (12.2.4)
     5f2:	88 e6       	ldi	r24, 0x68	; 104
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	28 e6       	ldi	r18, 0x68	; 104
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	f9 01       	movw	r30, r18
     5fc:	20 81       	ld	r18, Z
     5fe:	21 60       	ori	r18, 0x01	; 1
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
			break;
     604:	25 c0       	rjmp	.+74     	; 0x650 <HCSR04_InitDevice+0x104>
		case HCSR04_R:
			DDRB |= HCSR04_R_Trig; //output
     606:	84 e2       	ldi	r24, 0x24	; 36
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	24 e2       	ldi	r18, 0x24	; 36
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	f9 01       	movw	r30, r18
     610:	20 81       	ld	r18, Z
     612:	22 60       	ori	r18, 0x02	; 2
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
			DDRB &= ~HCSR04_R_Echo; //input
     618:	84 e2       	ldi	r24, 0x24	; 36
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	24 e2       	ldi	r18, 0x24	; 36
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	f9 01       	movw	r30, r18
     622:	20 81       	ld	r18, Z
     624:	2b 7f       	andi	r18, 0xFB	; 251
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
			
			PCMSK0 |= HCSR04_R_Echo; // turn on PCINT2 pin mask (enable interrupts) (12.2.8)
     62a:	8b e6       	ldi	r24, 0x6B	; 107
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	2b e6       	ldi	r18, 0x6B	; 107
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	f9 01       	movw	r30, r18
     634:	20 81       	ld	r18, Z
     636:	24 60       	ori	r18, 0x04	; 4
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
			PCICR |= 0b00000001; // turn on interrupts for group 0 (12.2.4)
     63c:	88 e6       	ldi	r24, 0x68	; 104
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	28 e6       	ldi	r18, 0x68	; 104
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	f9 01       	movw	r30, r18
     646:	20 81       	ld	r18, Z
     648:	21 60       	ori	r18, 0x01	; 1
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18
			break; 
     64e:	00 00       	nop
			DDRD &= ~(0b01000000) //6 is input
			DDRB |= 0b0000010; // 1 is output
			DDRB &= ~(0b01000101) //0 and 2 are input
			break;*/
	 }
 }
     650:	00 00       	nop
     652:	0f 90       	pop	r0
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <HCSR04_CheckForObstacle>:
 
int HCSR04_CheckForObstacle(HCSR04_Device device, float distance)
{
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	29 97       	sbiw	r28, 0x09	; 9
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	8d 83       	std	Y+5, r24	; 0x05
     670:	4e 83       	std	Y+6, r20	; 0x06
     672:	5f 83       	std	Y+7, r21	; 0x07
     674:	68 87       	std	Y+8, r22	; 0x08
     676:	79 87       	std	Y+9, r23	; 0x09
	float dDistance = HCSR04_GetEchoDistance(device);
     678:	8d 81       	ldd	r24, Y+5	; 0x05
     67a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <HCSR04_GetEchoDistance>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	89 83       	std	Y+1, r24	; 0x01
     684:	9a 83       	std	Y+2, r25	; 0x02
     686:	ab 83       	std	Y+3, r26	; 0x03
     688:	bc 83       	std	Y+4, r27	; 0x04
	 
	return dDistance >= 0 && dDistance < distance ? 1 : 0;
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	a9 01       	movw	r20, r18
     690:	69 81       	ldd	r22, Y+1	; 0x01
     692:	7a 81       	ldd	r23, Y+2	; 0x02
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	0e 94 3c 09 	call	0x1278	; 0x1278 <__gesf2>
     69c:	88 23       	and	r24, r24
     69e:	7c f0       	brlt	.+30     	; 0x6be <HCSR04_CheckForObstacle+0x64>
     6a0:	2e 81       	ldd	r18, Y+6	; 0x06
     6a2:	3f 81       	ldd	r19, Y+7	; 0x07
     6a4:	48 85       	ldd	r20, Y+8	; 0x08
     6a6:	59 85       	ldd	r21, Y+9	; 0x09
     6a8:	69 81       	ldd	r22, Y+1	; 0x01
     6aa:	7a 81       	ldd	r23, Y+2	; 0x02
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	9c 81       	ldd	r25, Y+4	; 0x04
     6b0:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__cmpsf2>
     6b4:	88 23       	and	r24, r24
     6b6:	1c f4       	brge	.+6      	; 0x6be <HCSR04_CheckForObstacle+0x64>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <HCSR04_CheckForObstacle+0x68>
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
}
     6c2:	29 96       	adiw	r28, 0x09	; 9
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <HCSR04_GetEchoDistance>:


 float HCSR04_GetEchoDistance(HCSR04_Device device)
 {
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	29 97       	sbiw	r28, 0x09	; 9
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	89 87       	std	Y+9, r24	; 0x09
	 long duration = 0;
     6ea:	1d 82       	std	Y+5, r1	; 0x05
     6ec:	1e 82       	std	Y+6, r1	; 0x06
     6ee:	1f 82       	std	Y+7, r1	; 0x07
     6f0:	18 86       	std	Y+8, r1	; 0x08
	 float distance = -1;
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	a0 e8       	ldi	r26, 0x80	; 128
     6f8:	bf eb       	ldi	r27, 0xBF	; 191
     6fa:	89 83       	std	Y+1, r24	; 0x01
     6fc:	9a 83       	std	Y+2, r25	; 0x02
     6fe:	ab 83       	std	Y+3, r26	; 0x03
     700:	bc 83       	std	Y+4, r27	; 0x04
	 
	 echoTimeStart = 0;
     702:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
     706:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__data_end+0x1>
     70a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end+0x2>
     70e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__data_end+0x3>
	 echoTimeEnd = 0;
     712:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <echoTimeEnd>
     716:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <echoTimeEnd+0x1>
     71a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <echoTimeEnd+0x2>
     71e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <echoTimeEnd+0x3>
	 if(trigger(device))
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	0e 94 2a 04 	call	0x854	; 0x854 <trigger>
     728:	89 2b       	or	r24, r25
     72a:	e9 f0       	breq	.+58     	; 0x766 <HCSR04_GetEchoDistance+0x92>
	 {
		 duration = waitForEcho(device);
     72c:	89 85       	ldd	r24, Y+9	; 0x09
     72e:	0e 94 8b 06 	call	0xd16	; 0xd16 <waitForEcho>
     732:	dc 01       	movw	r26, r24
     734:	cb 01       	movw	r24, r22
     736:	8d 83       	std	Y+5, r24	; 0x05
     738:	9e 83       	std	Y+6, r25	; 0x06
     73a:	af 83       	std	Y+7, r26	; 0x07
     73c:	b8 87       	std	Y+8, r27	; 0x08
		 if(duration >= 0) distance = calculateDistance(duration);
     73e:	8d 81       	ldd	r24, Y+5	; 0x05
     740:	9e 81       	ldd	r25, Y+6	; 0x06
     742:	af 81       	ldd	r26, Y+7	; 0x07
     744:	b8 85       	ldd	r27, Y+8	; 0x08
     746:	bb 23       	and	r27, r27
     748:	74 f0       	brlt	.+28     	; 0x766 <HCSR04_GetEchoDistance+0x92>
     74a:	8d 81       	ldd	r24, Y+5	; 0x05
     74c:	9e 81       	ldd	r25, Y+6	; 0x06
     74e:	af 81       	ldd	r26, Y+7	; 0x07
     750:	b8 85       	ldd	r27, Y+8	; 0x08
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	0e 94 cf 06 	call	0xd9e	; 0xd9e <calculateDistance>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	89 83       	std	Y+1, r24	; 0x01
     760:	9a 83       	std	Y+2, r25	; 0x02
     762:	ab 83       	std	Y+3, r26	; 0x03
     764:	bc 83       	std	Y+4, r27	; 0x04
	 }
	 return distance;
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	9a 81       	ldd	r25, Y+2	; 0x02
     76a:	ab 81       	ldd	r26, Y+3	; 0x03
     76c:	bc 81       	ldd	r27, Y+4	; 0x04
 }
     76e:	bc 01       	movw	r22, r24
     770:	cd 01       	movw	r24, r26
     772:	29 96       	adiw	r28, 0x09	; 9
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <HCSR04_ISR>:

 void HCSR04_ISR()
 {
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	00 d0       	rcall	.+0      	; 0x78a <HCSR04_ISR+0x6>
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
	 // Only perform the check if there's an active device
	 if(activeDevice != HCSR04_None)
     78e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     792:	8a 30       	cpi	r24, 0x0A	; 10
     794:	09 f4       	brne	.+2      	; 0x798 <HCSR04_ISR+0x14>
     796:	58 c0       	rjmp	.+176    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
	 {
		 int condition = 0;
     798:	1a 82       	std	Y+2, r1	; 0x02
     79a:	19 82       	std	Y+1, r1	; 0x01
		 // determine the high condition for the active device
		 switch(activeDevice)
     79c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	91 05       	cpc	r25, r1
     7a8:	89 f0       	breq	.+34     	; 0x7cc <HCSR04_ISR+0x48>
     7aa:	82 30       	cpi	r24, 0x02	; 2
     7ac:	91 05       	cpc	r25, r1
     7ae:	c9 f0       	breq	.+50     	; 0x7e2 <HCSR04_ISR+0x5e>
     7b0:	89 2b       	or	r24, r25
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <HCSR04_ISR+0x32>
				break;
			 case HCSR04_R:
				condition = PINB & HCSR04_R_Echo;
				break;
			default:
				break;
     7b4:	21 c0       	rjmp	.+66     	; 0x7f8 <HCSR04_ISR+0x74>
		 int condition = 0;
		 // determine the high condition for the active device
		 switch(activeDevice)
		 {
			 case HCSR04_L:
				condition = PIND & HCSR04_L_Echo;
     7b6:	89 e2       	ldi	r24, 0x29	; 41
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	fc 01       	movw	r30, r24
     7bc:	80 81       	ld	r24, Z
     7be:	88 2f       	mov	r24, r24
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	80 74       	andi	r24, 0x40	; 64
     7c4:	99 27       	eor	r25, r25
     7c6:	9a 83       	std	Y+2, r25	; 0x02
     7c8:	89 83       	std	Y+1, r24	; 0x01
				break;
     7ca:	16 c0       	rjmp	.+44     	; 0x7f8 <HCSR04_ISR+0x74>
			 case HCSR04_C:
				condition = PINB & HCSR04_C_Echo;
     7cc:	83 e2       	ldi	r24, 0x23	; 35
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	fc 01       	movw	r30, r24
     7d2:	80 81       	ld	r24, Z
     7d4:	88 2f       	mov	r24, r24
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	81 70       	andi	r24, 0x01	; 1
     7da:	99 27       	eor	r25, r25
     7dc:	9a 83       	std	Y+2, r25	; 0x02
     7de:	89 83       	std	Y+1, r24	; 0x01
				break;
     7e0:	0b c0       	rjmp	.+22     	; 0x7f8 <HCSR04_ISR+0x74>
			 case HCSR04_R:
				condition = PINB & HCSR04_R_Echo;
     7e2:	83 e2       	ldi	r24, 0x23	; 35
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	fc 01       	movw	r30, r24
     7e8:	80 81       	ld	r24, Z
     7ea:	88 2f       	mov	r24, r24
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	84 70       	andi	r24, 0x04	; 4
     7f0:	99 27       	eor	r25, r25
     7f2:	9a 83       	std	Y+2, r25	; 0x02
     7f4:	89 83       	std	Y+1, r24	; 0x01
				break;
     7f6:	00 00       	nop
			default:
				break;
		 }
		 
		 // When the echo starts, track current TCNT value
		 if(condition)
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	89 2b       	or	r24, r25
     7fe:	89 f0       	breq	.+34     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
		 {
			 echoTimeStart = TCNT1;
     800:	84 e8       	ldi	r24, 0x84	; 132
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	fc 01       	movw	r30, r24
     806:	80 81       	ld	r24, Z
     808:	91 81       	ldd	r25, Z+1	; 0x01
     80a:	cc 01       	movw	r24, r24
     80c:	a0 e0       	ldi	r26, 0x00	; 0
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
     814:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
     818:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <__data_end+0x2>
     81c:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <__data_end+0x3>
		 {
			 echoTimeEnd = TCNT1;
			 activeDevice = HCSR04_None;
		 }
	 }
 }
     820:	13 c0       	rjmp	.+38     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
			 echoTimeStart = TCNT1;
		 }
		 // When echo ends, track the new TCNT value and indicate no device is active
		 else
		 {
			 echoTimeEnd = TCNT1;
     822:	84 e8       	ldi	r24, 0x84	; 132
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	fc 01       	movw	r30, r24
     828:	80 81       	ld	r24, Z
     82a:	91 81       	ldd	r25, Z+1	; 0x01
     82c:	cc 01       	movw	r24, r24
     82e:	a0 e0       	ldi	r26, 0x00	; 0
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <echoTimeEnd>
     836:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <echoTimeEnd+0x1>
     83a:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <echoTimeEnd+0x2>
     83e:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <echoTimeEnd+0x3>
			 activeDevice = HCSR04_None;
     842:	8a e0       	ldi	r24, 0x0A	; 10
     844:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		 }
	 }
 }
     848:	00 00       	nop
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <trigger>:
/************************************************************************/
/* Local  Implementation                                                */
/************************************************************************/

int trigger(HCSR04_Device device)
{
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	c3 54       	subi	r28, 0x43	; 67
     85e:	d1 09       	sbc	r29, r1
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	9e 01       	movw	r18, r28
     86c:	2d 5b       	subi	r18, 0xBD	; 189
     86e:	3f 4f       	sbci	r19, 0xFF	; 255
     870:	f9 01       	movw	r30, r18
     872:	80 83       	st	Z, r24
	// ensure there is no active device
	if(activeDevice == HCSR04_None)
     874:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     878:	8a 30       	cpi	r24, 0x0A	; 10
     87a:	09 f0       	breq	.+2      	; 0x87e <trigger+0x2a>
     87c:	40 c2       	rjmp	.+1152   	; 0xcfe <__stack+0x3ff>
	{
		int pin;
		
		// set the device to be active
		activeDevice = device;
     87e:	ce 01       	movw	r24, r28
     880:	8d 5b       	subi	r24, 0xBD	; 189
     882:	9f 4f       	sbci	r25, 0xFF	; 255
     884:	fc 01       	movw	r30, r24
     886:	80 81       	ld	r24, Z
     888:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		// Determine which pin needs to be toggled based on the device
		switch(activeDevice)
     88c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	91 05       	cpc	r25, r1
     898:	59 f0       	breq	.+22     	; 0x8b0 <trigger+0x5c>
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	91 05       	cpc	r25, r1
     89e:	69 f0       	breq	.+26     	; 0x8ba <trigger+0x66>
     8a0:	89 2b       	or	r24, r25
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <trigger+0x52>
				break;
			case HCSR04_R:
				pin = HCSR04_R_Trig;
				break;
			default:
				break;
     8a4:	0f c0       	rjmp	.+30     	; 0x8c4 <trigger+0x70>
		
		// Determine which pin needs to be toggled based on the device
		switch(activeDevice)
		{
			case HCSR04_L:
				pin = HCSR04_L_Trig;
     8a6:	80 e2       	ldi	r24, 0x20	; 32
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	9a 83       	std	Y+2, r25	; 0x02
     8ac:	89 83       	std	Y+1, r24	; 0x01
				break;
     8ae:	0a c0       	rjmp	.+20     	; 0x8c4 <trigger+0x70>
			case HCSR04_C:
				pin = HCSR04_C_Trig;
     8b0:	80 e8       	ldi	r24, 0x80	; 128
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	9a 83       	std	Y+2, r25	; 0x02
     8b6:	89 83       	std	Y+1, r24	; 0x01
				break;
     8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <trigger+0x70>
			case HCSR04_R:
				pin = HCSR04_R_Trig;
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	9a 83       	std	Y+2, r25	; 0x02
     8c0:	89 83       	std	Y+1, r24	; 0x01
				break;
     8c2:	00 00       	nop
			default:
				break;
		}
	
		// set pin low for 2 us to ensure we're starting with a fresh pulse
		PORTD &= ~pin;
     8c4:	8b e2       	ldi	r24, 0x2B	; 43
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	2b e2       	ldi	r18, 0x2B	; 43
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	f9 01       	movw	r30, r18
     8ce:	20 81       	ld	r18, Z
     8d0:	32 2f       	mov	r19, r18
     8d2:	29 81       	ldd	r18, Y+1	; 0x01
     8d4:	20 95       	com	r18
     8d6:	23 23       	and	r18, r19
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e4       	ldi	r27, 0x40	; 64
     8e4:	8b 83       	std	Y+3, r24	; 0x03
     8e6:	9c 83       	std	Y+4, r25	; 0x04
     8e8:	ad 83       	std	Y+5, r26	; 0x05
     8ea:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     8ec:	2b ea       	ldi	r18, 0xAB	; 171
     8ee:	3a ea       	ldi	r19, 0xAA	; 170
     8f0:	4a ea       	ldi	r20, 0xAA	; 170
     8f2:	50 e4       	ldi	r21, 0x40	; 64
     8f4:	6b 81       	ldd	r22, Y+3	; 0x03
     8f6:	7c 81       	ldd	r23, Y+4	; 0x04
     8f8:	8d 81       	ldd	r24, Y+5	; 0x05
     8fa:	9e 81       	ldd	r25, Y+6	; 0x06
     8fc:	0e 94 41 09 	call	0x1282	; 0x1282 <__mulsf3>
     900:	dc 01       	movw	r26, r24
     902:	cb 01       	movw	r24, r22
     904:	8f a3       	std	Y+39, r24	; 0x27
     906:	98 a7       	std	Y+40, r25	; 0x28
     908:	a9 a7       	std	Y+41, r26	; 0x29
     90a:	ba a7       	std	Y+42, r27	; 0x2a
	__tmp2 = ((F_CPU) / 4e6) * __us;
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e8       	ldi	r20, 0x80	; 128
     912:	50 e4       	ldi	r21, 0x40	; 64
     914:	6b 81       	ldd	r22, Y+3	; 0x03
     916:	7c 81       	ldd	r23, Y+4	; 0x04
     918:	8d 81       	ldd	r24, Y+5	; 0x05
     91a:	9e 81       	ldd	r25, Y+6	; 0x06
     91c:	0e 94 41 09 	call	0x1282	; 0x1282 <__mulsf3>
     920:	dc 01       	movw	r26, r24
     922:	cb 01       	movw	r24, r22
     924:	8b a7       	std	Y+43, r24	; 0x2b
     926:	9c a7       	std	Y+44, r25	; 0x2c
     928:	ad a7       	std	Y+45, r26	; 0x2d
     92a:	be a7       	std	Y+46, r27	; 0x2e
	if (__tmp < 1.0)
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e8       	ldi	r20, 0x80	; 128
     932:	5f e3       	ldi	r21, 0x3F	; 63
     934:	6f a1       	ldd	r22, Y+39	; 0x27
     936:	78 a5       	ldd	r23, Y+40	; 0x28
     938:	89 a5       	ldd	r24, Y+41	; 0x29
     93a:	9a a5       	ldd	r25, Y+42	; 0x2a
     93c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__cmpsf2>
     940:	88 23       	and	r24, r24
     942:	1c f4       	brge	.+6      	; 0x94a <__stack+0x4b>
		__ticks = 1;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	8f a7       	std	Y+47, r24	; 0x2f
     948:	be c0       	rjmp	.+380    	; 0xac6 <__stack+0x1c7>
	else if (__tmp2 > 65535)
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	3f ef       	ldi	r19, 0xFF	; 255
     94e:	4f e7       	ldi	r20, 0x7F	; 127
     950:	57 e4       	ldi	r21, 0x47	; 71
     952:	6b a5       	ldd	r22, Y+43	; 0x2b
     954:	7c a5       	ldd	r23, Y+44	; 0x2c
     956:	8d a5       	ldd	r24, Y+45	; 0x2d
     958:	9e a5       	ldd	r25, Y+46	; 0x2e
     95a:	0e 94 3c 09 	call	0x1278	; 0x1278 <__gesf2>
     95e:	18 16       	cp	r1, r24
     960:	0c f0       	brlt	.+2      	; 0x964 <__stack+0x65>
     962:	7b c0       	rjmp	.+246    	; 0xa5a <__stack+0x15b>
	{
		_delay_ms(__us / 1000.0);
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	4a e7       	ldi	r20, 0x7A	; 122
     96a:	54 e4       	ldi	r21, 0x44	; 68
     96c:	6b 81       	ldd	r22, Y+3	; 0x03
     96e:	7c 81       	ldd	r23, Y+4	; 0x04
     970:	8d 81       	ldd	r24, Y+5	; 0x05
     972:	9e 81       	ldd	r25, Y+6	; 0x06
     974:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__divsf3>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	88 ab       	std	Y+48, r24	; 0x30
     97e:	99 ab       	std	Y+49, r25	; 0x31
     980:	aa ab       	std	Y+50, r26	; 0x32
     982:	bb ab       	std	Y+51, r27	; 0x33

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	4a e7       	ldi	r20, 0x7A	; 122
     98a:	55 e4       	ldi	r21, 0x45	; 69
     98c:	68 a9       	ldd	r22, Y+48	; 0x30
     98e:	79 a9       	ldd	r23, Y+49	; 0x31
     990:	8a a9       	ldd	r24, Y+50	; 0x32
     992:	9b a9       	ldd	r25, Y+51	; 0x33
     994:	0e 94 41 09 	call	0x1282	; 0x1282 <__mulsf3>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	8c ab       	std	Y+52, r24	; 0x34
     99e:	9d ab       	std	Y+53, r25	; 0x35
     9a0:	ae ab       	std	Y+54, r26	; 0x36
     9a2:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e8       	ldi	r20, 0x80	; 128
     9aa:	5f e3       	ldi	r21, 0x3F	; 63
     9ac:	6c a9       	ldd	r22, Y+52	; 0x34
     9ae:	7d a9       	ldd	r23, Y+53	; 0x35
     9b0:	8e a9       	ldd	r24, Y+54	; 0x36
     9b2:	9f a9       	ldd	r25, Y+55	; 0x37
     9b4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__cmpsf2>
     9b8:	88 23       	and	r24, r24
     9ba:	2c f4       	brge	.+10     	; 0x9c6 <__stack+0xc7>
		__ticks = 1;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	99 af       	std	Y+57, r25	; 0x39
     9c2:	88 af       	std	Y+56, r24	; 0x38
     9c4:	3f c0       	rjmp	.+126    	; 0xa44 <__stack+0x145>
	else if (__tmp > 65535)
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	3f ef       	ldi	r19, 0xFF	; 255
     9ca:	4f e7       	ldi	r20, 0x7F	; 127
     9cc:	57 e4       	ldi	r21, 0x47	; 71
     9ce:	6c a9       	ldd	r22, Y+52	; 0x34
     9d0:	7d a9       	ldd	r23, Y+53	; 0x35
     9d2:	8e a9       	ldd	r24, Y+54	; 0x36
     9d4:	9f a9       	ldd	r25, Y+55	; 0x37
     9d6:	0e 94 3c 09 	call	0x1278	; 0x1278 <__gesf2>
     9da:	18 16       	cp	r1, r24
     9dc:	4c f5       	brge	.+82     	; 0xa30 <__stack+0x131>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e2       	ldi	r20, 0x20	; 32
     9e4:	51 e4       	ldi	r21, 0x41	; 65
     9e6:	68 a9       	ldd	r22, Y+48	; 0x30
     9e8:	79 a9       	ldd	r23, Y+49	; 0x31
     9ea:	8a a9       	ldd	r24, Y+50	; 0x32
     9ec:	9b a9       	ldd	r25, Y+51	; 0x33
     9ee:	0e 94 41 09 	call	0x1282	; 0x1282 <__mulsf3>
     9f2:	dc 01       	movw	r26, r24
     9f4:	cb 01       	movw	r24, r22
     9f6:	bc 01       	movw	r22, r24
     9f8:	cd 01       	movw	r24, r26
     9fa:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fixunssfsi>
     9fe:	dc 01       	movw	r26, r24
     a00:	cb 01       	movw	r24, r22
     a02:	99 af       	std	Y+57, r25	; 0x39
     a04:	88 af       	std	Y+56, r24	; 0x38
     a06:	0f c0       	rjmp	.+30     	; 0xa26 <__stack+0x127>
     a08:	80 e9       	ldi	r24, 0x90	; 144
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	9b af       	std	Y+59, r25	; 0x3b
     a0e:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a10:	8a ad       	ldd	r24, Y+58	; 0x3a
     a12:	9b ad       	ldd	r25, Y+59	; 0x3b
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <__stack+0x115>
     a18:	9b af       	std	Y+59, r25	; 0x3b
     a1a:	8a af       	std	Y+58, r24	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a1c:	88 ad       	ldd	r24, Y+56	; 0x38
     a1e:	99 ad       	ldd	r25, Y+57	; 0x39
     a20:	01 97       	sbiw	r24, 0x01	; 1
     a22:	99 af       	std	Y+57, r25	; 0x39
     a24:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a26:	88 ad       	ldd	r24, Y+56	; 0x38
     a28:	99 ad       	ldd	r25, Y+57	; 0x39
     a2a:	89 2b       	or	r24, r25
     a2c:	69 f7       	brne	.-38     	; 0xa08 <__stack+0x109>
     a2e:	4b c0       	rjmp	.+150    	; 0xac6 <__stack+0x1c7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a30:	6c a9       	ldd	r22, Y+52	; 0x34
     a32:	7d a9       	ldd	r23, Y+53	; 0x35
     a34:	8e a9       	ldd	r24, Y+54	; 0x36
     a36:	9f a9       	ldd	r25, Y+55	; 0x37
     a38:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fixunssfsi>
     a3c:	dc 01       	movw	r26, r24
     a3e:	cb 01       	movw	r24, r22
     a40:	99 af       	std	Y+57, r25	; 0x39
     a42:	88 af       	std	Y+56, r24	; 0x38
     a44:	88 ad       	ldd	r24, Y+56	; 0x38
     a46:	99 ad       	ldd	r25, Y+57	; 0x39
     a48:	9d af       	std	Y+61, r25	; 0x3d
     a4a:	8c af       	std	Y+60, r24	; 0x3c
     a4c:	8c ad       	ldd	r24, Y+60	; 0x3c
     a4e:	9d ad       	ldd	r25, Y+61	; 0x3d
     a50:	01 97       	sbiw	r24, 0x01	; 1
     a52:	f1 f7       	brne	.-4      	; 0xa50 <__stack+0x151>
     a54:	9d af       	std	Y+61, r25	; 0x3d
     a56:	8c af       	std	Y+60, r24	; 0x3c
     a58:	36 c0       	rjmp	.+108    	; 0xac6 <__stack+0x1c7>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	4f e7       	ldi	r20, 0x7F	; 127
     a60:	53 e4       	ldi	r21, 0x43	; 67
     a62:	6f a1       	ldd	r22, Y+39	; 0x27
     a64:	78 a5       	ldd	r23, Y+40	; 0x28
     a66:	89 a5       	ldd	r24, Y+41	; 0x29
     a68:	9a a5       	ldd	r25, Y+42	; 0x2a
     a6a:	0e 94 3c 09 	call	0x1278	; 0x1278 <__gesf2>
     a6e:	18 16       	cp	r1, r24
     a70:	0c f5       	brge	.+66     	; 0xab4 <__stack+0x1b5>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     a72:	6b a5       	ldd	r22, Y+43	; 0x2b
     a74:	7c a5       	ldd	r23, Y+44	; 0x2c
     a76:	8d a5       	ldd	r24, Y+45	; 0x2d
     a78:	9e a5       	ldd	r25, Y+46	; 0x2e
     a7a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fixunssfsi>
     a7e:	dc 01       	movw	r26, r24
     a80:	cb 01       	movw	r24, r22
     a82:	9f af       	std	Y+63, r25	; 0x3f
     a84:	8e af       	std	Y+62, r24	; 0x3e
     a86:	ce 01       	movw	r24, r28
     a88:	80 5c       	subi	r24, 0xC0	; 192
     a8a:	9f 4f       	sbci	r25, 0xFF	; 255
     a8c:	2e ad       	ldd	r18, Y+62	; 0x3e
     a8e:	3f ad       	ldd	r19, Y+63	; 0x3f
     a90:	fc 01       	movw	r30, r24
     a92:	31 83       	std	Z+1, r19	; 0x01
     a94:	20 83       	st	Z, r18
     a96:	ce 01       	movw	r24, r28
     a98:	80 5c       	subi	r24, 0xC0	; 192
     a9a:	9f 4f       	sbci	r25, 0xFF	; 255
     a9c:	fc 01       	movw	r30, r24
     a9e:	80 81       	ld	r24, Z
     aa0:	91 81       	ldd	r25, Z+1	; 0x01
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	f1 f7       	brne	.-4      	; 0xaa2 <__stack+0x1a3>
     aa6:	9e 01       	movw	r18, r28
     aa8:	20 5c       	subi	r18, 0xC0	; 192
     aaa:	3f 4f       	sbci	r19, 0xFF	; 255
     aac:	f9 01       	movw	r30, r18
     aae:	91 83       	std	Z+1, r25	; 0x01
     ab0:	80 83       	st	Z, r24
     ab2:	1c c0       	rjmp	.+56     	; 0xaec <__stack+0x1ed>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ab4:	6f a1       	ldd	r22, Y+39	; 0x27
     ab6:	78 a5       	ldd	r23, Y+40	; 0x28
     ab8:	89 a5       	ldd	r24, Y+41	; 0x29
     aba:	9a a5       	ldd	r25, Y+42	; 0x2a
     abc:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fixunssfsi>
     ac0:	dc 01       	movw	r26, r24
     ac2:	cb 01       	movw	r24, r22
     ac4:	8f a7       	std	Y+47, r24	; 0x2f
     ac6:	ce 01       	movw	r24, r28
     ac8:	8e 5b       	subi	r24, 0xBE	; 190
     aca:	9f 4f       	sbci	r25, 0xFF	; 255
     acc:	2f a5       	ldd	r18, Y+47	; 0x2f
     ace:	fc 01       	movw	r30, r24
     ad0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ad2:	ce 01       	movw	r24, r28
     ad4:	8e 5b       	subi	r24, 0xBE	; 190
     ad6:	9f 4f       	sbci	r25, 0xFF	; 255
     ad8:	fc 01       	movw	r30, r24
     ada:	80 81       	ld	r24, Z
     adc:	28 2f       	mov	r18, r24
     ade:	2a 95       	dec	r18
     ae0:	f1 f7       	brne	.-4      	; 0xade <__stack+0x1df>
     ae2:	ce 01       	movw	r24, r28
     ae4:	8e 5b       	subi	r24, 0xBE	; 190
     ae6:	9f 4f       	sbci	r25, 0xFF	; 255
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
		_delay_us(2);
		
		// set the pin high for a minimum of 10us to ensure the 8 pulses are sent, according to the datasheet (see header file)
		PORTD |= pin;
     aec:	8b e2       	ldi	r24, 0x2B	; 43
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	2b e2       	ldi	r18, 0x2B	; 43
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	f9 01       	movw	r30, r18
     af6:	20 81       	ld	r18, Z
     af8:	32 2f       	mov	r19, r18
     afa:	29 81       	ldd	r18, Y+1	; 0x01
     afc:	23 2b       	or	r18, r19
     afe:	fc 01       	movw	r30, r24
     b00:	20 83       	st	Z, r18
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	a0 e2       	ldi	r26, 0x20	; 32
     b08:	b1 e4       	ldi	r27, 0x41	; 65
     b0a:	8f 83       	std	Y+7, r24	; 0x07
     b0c:	98 87       	std	Y+8, r25	; 0x08
     b0e:	a9 87       	std	Y+9, r26	; 0x09
     b10:	ba 87       	std	Y+10, r27	; 0x0a
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     b12:	2b ea       	ldi	r18, 0xAB	; 171
     b14:	3a ea       	ldi	r19, 0xAA	; 170
     b16:	4a ea       	ldi	r20, 0xAA	; 170
     b18:	50 e4       	ldi	r21, 0x40	; 64
     b1a:	6f 81       	ldd	r22, Y+7	; 0x07
     b1c:	78 85       	ldd	r23, Y+8	; 0x08
     b1e:	89 85       	ldd	r24, Y+9	; 0x09
     b20:	9a 85       	ldd	r25, Y+10	; 0x0a
     b22:	0e 94 41 09 	call	0x1282	; 0x1282 <__mulsf3>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	8b 87       	std	Y+11, r24	; 0x0b
     b2c:	9c 87       	std	Y+12, r25	; 0x0c
     b2e:	ad 87       	std	Y+13, r26	; 0x0d
     b30:	be 87       	std	Y+14, r27	; 0x0e
	__tmp2 = ((F_CPU) / 4e6) * __us;
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e8       	ldi	r20, 0x80	; 128
     b38:	50 e4       	ldi	r21, 0x40	; 64
     b3a:	6f 81       	ldd	r22, Y+7	; 0x07
     b3c:	78 85       	ldd	r23, Y+8	; 0x08
     b3e:	89 85       	ldd	r24, Y+9	; 0x09
     b40:	9a 85       	ldd	r25, Y+10	; 0x0a
     b42:	0e 94 41 09 	call	0x1282	; 0x1282 <__mulsf3>
     b46:	dc 01       	movw	r26, r24
     b48:	cb 01       	movw	r24, r22
     b4a:	8f 87       	std	Y+15, r24	; 0x0f
     b4c:	98 8b       	std	Y+16, r25	; 0x10
     b4e:	a9 8b       	std	Y+17, r26	; 0x11
     b50:	ba 8b       	std	Y+18, r27	; 0x12
	if (__tmp < 1.0)
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 e8       	ldi	r20, 0x80	; 128
     b58:	5f e3       	ldi	r21, 0x3F	; 63
     b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b60:	9e 85       	ldd	r25, Y+14	; 0x0e
     b62:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__cmpsf2>
     b66:	88 23       	and	r24, r24
     b68:	1c f4       	brge	.+6      	; 0xb70 <__stack+0x271>
		__ticks = 1;
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	8b 8b       	std	Y+19, r24	; 0x13
     b6e:	b2 c0       	rjmp	.+356    	; 0xcd4 <__stack+0x3d5>
	else if (__tmp2 > 65535)
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	3f ef       	ldi	r19, 0xFF	; 255
     b74:	4f e7       	ldi	r20, 0x7F	; 127
     b76:	57 e4       	ldi	r21, 0x47	; 71
     b78:	6f 85       	ldd	r22, Y+15	; 0x0f
     b7a:	78 89       	ldd	r23, Y+16	; 0x10
     b7c:	89 89       	ldd	r24, Y+17	; 0x11
     b7e:	9a 89       	ldd	r25, Y+18	; 0x12
     b80:	0e 94 3c 09 	call	0x1278	; 0x1278 <__gesf2>
     b84:	18 16       	cp	r1, r24
     b86:	0c f0       	brlt	.+2      	; 0xb8a <__stack+0x28b>
     b88:	7b c0       	rjmp	.+246    	; 0xc80 <__stack+0x381>
	{
		_delay_ms(__us / 1000.0);
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a e7       	ldi	r20, 0x7A	; 122
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	6f 81       	ldd	r22, Y+7	; 0x07
     b94:	78 85       	ldd	r23, Y+8	; 0x08
     b96:	89 85       	ldd	r24, Y+9	; 0x09
     b98:	9a 85       	ldd	r25, Y+10	; 0x0a
     b9a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__divsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	8c 8b       	std	Y+20, r24	; 0x14
     ba4:	9d 8b       	std	Y+21, r25	; 0x15
     ba6:	ae 8b       	std	Y+22, r26	; 0x16
     ba8:	bf 8b       	std	Y+23, r27	; 0x17

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	4a e7       	ldi	r20, 0x7A	; 122
     bb0:	55 e4       	ldi	r21, 0x45	; 69
     bb2:	6c 89       	ldd	r22, Y+20	; 0x14
     bb4:	7d 89       	ldd	r23, Y+21	; 0x15
     bb6:	8e 89       	ldd	r24, Y+22	; 0x16
     bb8:	9f 89       	ldd	r25, Y+23	; 0x17
     bba:	0e 94 41 09 	call	0x1282	; 0x1282 <__mulsf3>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	88 8f       	std	Y+24, r24	; 0x18
     bc4:	99 8f       	std	Y+25, r25	; 0x19
     bc6:	aa 8f       	std	Y+26, r26	; 0x1a
     bc8:	bb 8f       	std	Y+27, r27	; 0x1b
	if (__tmp < 1.0)
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e8       	ldi	r20, 0x80	; 128
     bd0:	5f e3       	ldi	r21, 0x3F	; 63
     bd2:	68 8d       	ldd	r22, Y+24	; 0x18
     bd4:	79 8d       	ldd	r23, Y+25	; 0x19
     bd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bda:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__cmpsf2>
     bde:	88 23       	and	r24, r24
     be0:	2c f4       	brge	.+10     	; 0xbec <__stack+0x2ed>
		__ticks = 1;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	9d 8f       	std	Y+29, r25	; 0x1d
     be8:	8c 8f       	std	Y+28, r24	; 0x1c
     bea:	3f c0       	rjmp	.+126    	; 0xc6a <__stack+0x36b>
	else if (__tmp > 65535)
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	4f e7       	ldi	r20, 0x7F	; 127
     bf2:	57 e4       	ldi	r21, 0x47	; 71
     bf4:	68 8d       	ldd	r22, Y+24	; 0x18
     bf6:	79 8d       	ldd	r23, Y+25	; 0x19
     bf8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bfa:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bfc:	0e 94 3c 09 	call	0x1278	; 0x1278 <__gesf2>
     c00:	18 16       	cp	r1, r24
     c02:	4c f5       	brge	.+82     	; 0xc56 <__stack+0x357>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e2       	ldi	r20, 0x20	; 32
     c0a:	51 e4       	ldi	r21, 0x41	; 65
     c0c:	6c 89       	ldd	r22, Y+20	; 0x14
     c0e:	7d 89       	ldd	r23, Y+21	; 0x15
     c10:	8e 89       	ldd	r24, Y+22	; 0x16
     c12:	9f 89       	ldd	r25, Y+23	; 0x17
     c14:	0e 94 41 09 	call	0x1282	; 0x1282 <__mulsf3>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	bc 01       	movw	r22, r24
     c1e:	cd 01       	movw	r24, r26
     c20:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fixunssfsi>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	9d 8f       	std	Y+29, r25	; 0x1d
     c2a:	8c 8f       	std	Y+28, r24	; 0x1c
     c2c:	0f c0       	rjmp	.+30     	; 0xc4c <__stack+0x34d>
     c2e:	80 e9       	ldi	r24, 0x90	; 144
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	9f 8f       	std	Y+31, r25	; 0x1f
     c34:	8e 8f       	std	Y+30, r24	; 0x1e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c36:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c38:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <__stack+0x33b>
     c3e:	9f 8f       	std	Y+31, r25	; 0x1f
     c40:	8e 8f       	std	Y+30, r24	; 0x1e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c42:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c44:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	9d 8f       	std	Y+29, r25	; 0x1d
     c4a:	8c 8f       	std	Y+28, r24	; 0x1c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c4e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c50:	89 2b       	or	r24, r25
     c52:	69 f7       	brne	.-38     	; 0xc2e <__stack+0x32f>
     c54:	3f c0       	rjmp	.+126    	; 0xcd4 <__stack+0x3d5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c56:	68 8d       	ldd	r22, Y+24	; 0x18
     c58:	79 8d       	ldd	r23, Y+25	; 0x19
     c5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c5c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c5e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fixunssfsi>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	9d 8f       	std	Y+29, r25	; 0x1d
     c68:	8c 8f       	std	Y+28, r24	; 0x1c
     c6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c6c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c6e:	99 a3       	std	Y+33, r25	; 0x21
     c70:	88 a3       	std	Y+32, r24	; 0x20
     c72:	88 a1       	ldd	r24, Y+32	; 0x20
     c74:	99 a1       	ldd	r25, Y+33	; 0x21
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <__stack+0x377>
     c7a:	99 a3       	std	Y+33, r25	; 0x21
     c7c:	88 a3       	std	Y+32, r24	; 0x20
     c7e:	2a c0       	rjmp	.+84     	; 0xcd4 <__stack+0x3d5>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	4f e7       	ldi	r20, 0x7F	; 127
     c86:	53 e4       	ldi	r21, 0x43	; 67
     c88:	6b 85       	ldd	r22, Y+11	; 0x0b
     c8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c90:	0e 94 3c 09 	call	0x1278	; 0x1278 <__gesf2>
     c94:	18 16       	cp	r1, r24
     c96:	ac f4       	brge	.+42     	; 0xcc2 <__stack+0x3c3>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     c98:	6f 85       	ldd	r22, Y+15	; 0x0f
     c9a:	78 89       	ldd	r23, Y+16	; 0x10
     c9c:	89 89       	ldd	r24, Y+17	; 0x11
     c9e:	9a 89       	ldd	r25, Y+18	; 0x12
     ca0:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fixunssfsi>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	9b a3       	std	Y+35, r25	; 0x23
     caa:	8a a3       	std	Y+34, r24	; 0x22
     cac:	8a a1       	ldd	r24, Y+34	; 0x22
     cae:	9b a1       	ldd	r25, Y+35	; 0x23
     cb0:	9d a3       	std	Y+37, r25	; 0x25
     cb2:	8c a3       	std	Y+36, r24	; 0x24
     cb4:	8c a1       	ldd	r24, Y+36	; 0x24
     cb6:	9d a1       	ldd	r25, Y+37	; 0x25
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <__stack+0x3b9>
     cbc:	9d a3       	std	Y+37, r25	; 0x25
     cbe:	8c a3       	std	Y+36, r24	; 0x24
     cc0:	0f c0       	rjmp	.+30     	; 0xce0 <__stack+0x3e1>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cca:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__fixunssfsi>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	8b 8b       	std	Y+19, r24	; 0x13
     cd4:	8b 89       	ldd	r24, Y+19	; 0x13
     cd6:	8e a3       	std	Y+38, r24	; 0x26
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     cd8:	8e a1       	ldd	r24, Y+38	; 0x26
     cda:	8a 95       	dec	r24
     cdc:	f1 f7       	brne	.-4      	; 0xcda <__stack+0x3db>
     cde:	8e a3       	std	Y+38, r24	; 0x26
		_delay_us(10); 
		PORTD &= ~pin;
     ce0:	8b e2       	ldi	r24, 0x2B	; 43
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	2b e2       	ldi	r18, 0x2B	; 43
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	f9 01       	movw	r30, r18
     cea:	20 81       	ld	r18, Z
     cec:	32 2f       	mov	r19, r18
     cee:	29 81       	ldd	r18, Y+1	; 0x01
     cf0:	20 95       	com	r18
     cf2:	23 23       	and	r18, r19
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
		
		// successful trigger
		return 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <__stack+0x403>
	}
	
	// there was an active device so we couldn't trigger
	return 0;
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
}
     d02:	cd 5b       	subi	r28, 0xBD	; 189
     d04:	df 4f       	sbci	r29, 0xFF	; 255
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <waitForEcho>:

long waitForEcho(HCSR04_Device device)
{
     d16:	ef 92       	push	r14
     d18:	ff 92       	push	r15
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	1f 92       	push	r1
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	89 83       	std	Y+1, r24	; 0x01
	// ensure this is the active device before waiting for echo
	if(activeDevice == device)
     d2a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	98 17       	cp	r25, r24
     d32:	41 f5       	brne	.+80     	; 0xd84 <waitForEcho+0x6e>
	{
		// wait for the device to no longer be active, meaning the echo finished
		while(activeDevice == device);
     d34:	00 00       	nop
     d36:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	98 17       	cp	r25, r24
     d3e:	d9 f3       	breq	.-10     	; 0xd36 <waitForEcho+0x20>
		
		return (echoTimeEnd - echoTimeStart)/2; // actual value is in 0.5us, so need to divide by 2 to get 1us units
     d40:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <echoTimeEnd>
     d44:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <echoTimeEnd+0x1>
     d48:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <echoTimeEnd+0x2>
     d4c:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <echoTimeEnd+0x3>
     d50:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     d54:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
     d58:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <__data_end+0x2>
     d5c:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <__data_end+0x3>
     d60:	79 01       	movw	r14, r18
     d62:	8a 01       	movw	r16, r20
     d64:	e8 1a       	sub	r14, r24
     d66:	f9 0a       	sbc	r15, r25
     d68:	0a 0b       	sbc	r16, r26
     d6a:	1b 0b       	sbc	r17, r27
     d6c:	d8 01       	movw	r26, r16
     d6e:	c7 01       	movw	r24, r14
     d70:	bb 23       	and	r27, r27
     d72:	1c f4       	brge	.+6      	; 0xd7a <waitForEcho+0x64>
     d74:	01 96       	adiw	r24, 0x01	; 1
     d76:	a1 1d       	adc	r26, r1
     d78:	b1 1d       	adc	r27, r1
     d7a:	b5 95       	asr	r27
     d7c:	a7 95       	ror	r26
     d7e:	97 95       	ror	r25
     d80:	87 95       	ror	r24
     d82:	03 c0       	rjmp	.+6      	; 0xd8a <waitForEcho+0x74>
	}
	
	// active device is not this device, return invalid duration
	return -1;
     d84:	8f ef       	ldi	r24, 0xFF	; 255
     d86:	9f ef       	ldi	r25, 0xFF	; 255
     d88:	dc 01       	movw	r26, r24
}
     d8a:	bc 01       	movw	r22, r24
     d8c:	cd 01       	movw	r24, r26
     d8e:	0f 90       	pop	r0
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	08 95       	ret

00000d9e <calculateDistance>:

float calculateDistance(long duration)
{
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	28 97       	sbiw	r28, 0x08	; 8
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	6d 83       	std	Y+5, r22	; 0x05
     db4:	7e 83       	std	Y+6, r23	; 0x06
     db6:	8f 83       	std	Y+7, r24	; 0x07
     db8:	98 87       	std	Y+8, r25	; 0x08
	float speed = 0.0343; // speed of sound in cm/us -- speed pulled from google as 343m/s in dry air at 20C on Feb 24th, 2023
     dba:	88 e2       	ldi	r24, 0x28	; 40
     dbc:	9e e7       	ldi	r25, 0x7E	; 126
     dbe:	ac e0       	ldi	r26, 0x0C	; 12
     dc0:	bd e3       	ldi	r27, 0x3D	; 61
     dc2:	89 83       	std	Y+1, r24	; 0x01
     dc4:	9a 83       	std	Y+2, r25	; 0x02
     dc6:	ab 83       	std	Y+3, r26	; 0x03
     dc8:	bc 83       	std	Y+4, r27	; 0x04
	return (duration * speed) / 2; //calculation retrieved from datasheet (see header file)
     dca:	6d 81       	ldd	r22, Y+5	; 0x05
     dcc:	7e 81       	ldd	r23, Y+6	; 0x06
     dce:	8f 81       	ldd	r24, Y+7	; 0x07
     dd0:	98 85       	ldd	r25, Y+8	; 0x08
     dd2:	0e 94 8c 08 	call	0x1118	; 0x1118 <__floatsisf>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	29 81       	ldd	r18, Y+1	; 0x01
     ddc:	3a 81       	ldd	r19, Y+2	; 0x02
     dde:	4b 81       	ldd	r20, Y+3	; 0x03
     de0:	5c 81       	ldd	r21, Y+4	; 0x04
     de2:	bc 01       	movw	r22, r24
     de4:	cd 01       	movw	r24, r26
     de6:	0e 94 41 09 	call	0x1282	; 0x1282 <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	50 e4       	ldi	r21, 0x40	; 64
     df6:	bc 01       	movw	r22, r24
     df8:	cd 01       	movw	r24, r26
     dfa:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <__divsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
}
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	28 96       	adiw	r28, 0x08	; 8
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <main>:
// constant for timer output compare offset, init and ISR rearm
const unsigned int _Timer_OC_Offset = 1000; // 1 / (16000000 / 8 / 1000) = 0.5ms (prescale 8) -- wanted prescale 16
// global counter for timer ISR, used as reference to coordinate activities
volatile unsigned int _Ticks = 0;
int main(void)
{
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	00 d0       	rcall	.+0      	; 0xe22 <main+0xa>
     e22:	00 d0       	rcall	.+0      	; 0xe24 <main+0xc>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	// variable for managing the A/D update
	const unsigned int cuiAtoDEventCount = 500; // every 1/2 second
     e28:	84 ef       	ldi	r24, 0xF4	; 244
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	9c 83       	std	Y+4, r25	; 0x04
     e2e:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int uiAtoDEventNext = cuiAtoDEventCount;
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
	// one-time initialization section
	// bring up the timer, requires ISR!
	Timer_Init(Timer_Prescale_8, _Timer_OC_Offset); // 1ms intervals
     e38:	88 ee       	ldi	r24, 0xE8	; 232
     e3a:	93 e0       	ldi	r25, 0x03	; 3
     e3c:	bc 01       	movw	r22, r24
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Timer_Init>
	// enable sleep mode, for idle, sort of similar to WAI on 9S12X (13.2)
	sleep_enable();
     e44:	83 e5       	ldi	r24, 0x53	; 83
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	23 e5       	ldi	r18, 0x53	; 83
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	f9 01       	movw	r30, r18
     e4e:	20 81       	ld	r18, Z
     e50:	21 60       	ori	r18, 0x01	; 1
     e52:	fc 01       	movw	r30, r24
     e54:	20 83       	st	Z, r18
	SCI0_Init(F_CPU, 9600, 1); // 16Mhz clock, 9600 baud
     e56:	01 e0       	ldi	r16, 0x01	; 1
     e58:	10 e0       	ldi	r17, 0x00	; 0
     e5a:	20 e8       	ldi	r18, 0x80	; 128
     e5c:	35 e2       	ldi	r19, 0x25	; 37
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	74 e2       	ldi	r23, 0x24	; 36
     e66:	84 ef       	ldi	r24, 0xF4	; 244
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 88 01 	call	0x310	; 0x310 <SCI0_Init>

	// welcome message, so we know it booted OK
	SCI0_TxString("\n328 Up! Characters will echo.\n");
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	0e 94 42 02 	call	0x484	; 0x484 <SCI0_TxString>
	GD03_Init();
     e76:	0e 94 9b 02 	call	0x536	; 0x536 <GD03_Init>
	// requires ISR for PCI2
	HCSR04_InitDevice(HCSR04_L);
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 a6 02 	call	0x54c	; 0x54c <HCSR04_InitDevice>


	// set the global interrupt flag (enable interrupts)
	// this is backwards from the 9S12
	sei();
     e80:	78 94       	sei
	// make portc2 (pin 25) an output (PC2)
	DDRC |= LED;
     e82:	87 e2       	ldi	r24, 0x27	; 39
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	27 e2       	ldi	r18, 0x27	; 39
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	f9 01       	movw	r30, r18
     e8c:	20 81       	ld	r18, Z
     e8e:	24 60       	ori	r18, 0x04	; 4
     e90:	fc 01       	movw	r30, r24
     e92:	20 83       	st	Z, r18


	// main program loop - don't exit
	while(1)
	{
		if(HCSR04_CheckForObstacle(HCSR04_L, 10))
     e94:	40 e0       	ldi	r20, 0x00	; 0
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	60 e2       	ldi	r22, 0x20	; 32
     e9a:	71 e4       	ldi	r23, 0x41	; 65
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0e 94 2d 03 	call	0x65a	; 0x65a <HCSR04_CheckForObstacle>
     ea2:	89 2b       	or	r24, r25
     ea4:	51 f0       	breq	.+20     	; 0xeba <main+0xa2>
		{
			PORTC |= LED; // turn on LED
     ea6:	88 e2       	ldi	r24, 0x28	; 40
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	28 e2       	ldi	r18, 0x28	; 40
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	f9 01       	movw	r30, r18
     eb0:	20 81       	ld	r18, Z
     eb2:	24 60       	ori	r18, 0x04	; 4
     eb4:	fc 01       	movw	r30, r24
     eb6:	20 83       	st	Z, r18
     eb8:	09 c0       	rjmp	.+18     	; 0xecc <main+0xb4>
		}
		else
		{
			PORTC &= ~LED; // turn off LED
     eba:	88 e2       	ldi	r24, 0x28	; 40
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	28 e2       	ldi	r18, 0x28	; 40
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	f9 01       	movw	r30, r18
     ec4:	20 81       	ld	r18, Z
     ec6:	2b 7f       	andi	r18, 0xFB	; 251
     ec8:	fc 01       	movw	r30, r24
     eca:	20 83       	st	Z, r18
		}
		// go idle!
		sleep_cpu();
     ecc:	88 95       	sleep

		//// are we past the scheduled event?
		if (uiAtoDEventNext - _Ticks > cuiAtoDEventCount)
     ece:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_Ticks>
     ed2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <_Ticks+0x1>
     ed6:	29 81       	ldd	r18, Y+1	; 0x01
     ed8:	3a 81       	ldd	r19, Y+2	; 0x02
     eda:	28 1b       	sub	r18, r24
     edc:	39 0b       	sbc	r19, r25
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	82 17       	cp	r24, r18
     ee4:	93 07       	cpc	r25, r19
     ee6:	b0 f6       	brcc	.-84     	; 0xe94 <main+0x7c>
		{
			uiAtoDEventNext += cuiAtoDEventCount; // rearm
     ee8:	29 81       	ldd	r18, Y+1	; 0x01
     eea:	3a 81       	ldd	r19, Y+2	; 0x02
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	82 0f       	add	r24, r18
     ef2:	93 1f       	adc	r25, r19
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				PORTC &= ~LED; // turn off LED
			}*/
		}
	}
     ef8:	cd cf       	rjmp	.-102    	; 0xe94 <main+0x7c>

00000efa <__vector_11>:
}
// output compare A interrupt for timer
ISR(TIMER1_COMPA_vect)
{
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	4f 93       	push	r20
     f0c:	5f 93       	push	r21
     f0e:	8f 93       	push	r24
     f10:	9f 93       	push	r25
     f12:	ef 93       	push	r30
     f14:	ff 93       	push	r31
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
	// rearm the output compare operation
	OCR1A += _Timer_OC_Offset; // 1ms intervals
     f1e:	88 e8       	ldi	r24, 0x88	; 136
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	28 e8       	ldi	r18, 0x88	; 136
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	f9 01       	movw	r30, r18
     f28:	40 81       	ld	r20, Z
     f2a:	51 81       	ldd	r21, Z+1	; 0x01
     f2c:	28 ee       	ldi	r18, 0xE8	; 232
     f2e:	33 e0       	ldi	r19, 0x03	; 3
     f30:	24 0f       	add	r18, r20
     f32:	35 1f       	adc	r19, r21
     f34:	fc 01       	movw	r30, r24
     f36:	31 83       	std	Z+1, r19	; 0x01
     f38:	20 83       	st	Z, r18

	// up the global tick count
	++_Ticks;
     f3a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_Ticks>
     f3e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <_Ticks+0x1>
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <_Ticks+0x1>
     f48:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_Ticks>
}
     f4c:	00 00       	nop
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	ff 91       	pop	r31
     f54:	ef 91       	pop	r30
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	5f 91       	pop	r21
     f5c:	4f 91       	pop	r20
     f5e:	3f 91       	pop	r19
     f60:	2f 91       	pop	r18
     f62:	0f 90       	pop	r0
     f64:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <__vector_5>:

// ISR for PCI2, covering PCINT23 through PCINT16
ISR (PCINT2_vect)
{
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
	HCSR04_ISR();
     f9a:	0e 94 c2 03 	call	0x784	; 0x784 <HCSR04_ISR>
}
     f9e:	00 00       	nop
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	0f 90       	pop	r0
     fbe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti

00000fc8 <__cmpsf2>:
     fc8:	0e 94 c7 08 	call	0x118e	; 0x118e <__fp_cmp>
     fcc:	08 f4       	brcc	.+2      	; 0xfd0 <__cmpsf2+0x8>
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	08 95       	ret

00000fd2 <__divsf3>:
     fd2:	0e 94 fd 07 	call	0xffa	; 0xffa <__divsf3x>
     fd6:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__fp_round>
     fda:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__fp_pscB>
     fde:	58 f0       	brcs	.+22     	; 0xff6 <__divsf3+0x24>
     fe0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__fp_pscA>
     fe4:	40 f0       	brcs	.+16     	; 0xff6 <__divsf3+0x24>
     fe6:	29 f4       	brne	.+10     	; 0xff2 <__divsf3+0x20>
     fe8:	5f 3f       	cpi	r21, 0xFF	; 255
     fea:	29 f0       	breq	.+10     	; 0xff6 <__divsf3+0x24>
     fec:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__fp_inf>
     ff0:	51 11       	cpse	r21, r1
     ff2:	0c 94 36 09 	jmp	0x126c	; 0x126c <__fp_szero>
     ff6:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__fp_nan>

00000ffa <__divsf3x>:
     ffa:	0e 94 13 09 	call	0x1226	; 0x1226 <__fp_split3>
     ffe:	68 f3       	brcs	.-38     	; 0xfda <__divsf3+0x8>

00001000 <__divsf3_pse>:
    1000:	99 23       	and	r25, r25
    1002:	b1 f3       	breq	.-20     	; 0xff0 <__divsf3+0x1e>
    1004:	55 23       	and	r21, r21
    1006:	91 f3       	breq	.-28     	; 0xfec <__divsf3+0x1a>
    1008:	95 1b       	sub	r25, r21
    100a:	55 0b       	sbc	r21, r21
    100c:	bb 27       	eor	r27, r27
    100e:	aa 27       	eor	r26, r26
    1010:	62 17       	cp	r22, r18
    1012:	73 07       	cpc	r23, r19
    1014:	84 07       	cpc	r24, r20
    1016:	38 f0       	brcs	.+14     	; 0x1026 <__divsf3_pse+0x26>
    1018:	9f 5f       	subi	r25, 0xFF	; 255
    101a:	5f 4f       	sbci	r21, 0xFF	; 255
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	44 1f       	adc	r20, r20
    1022:	aa 1f       	adc	r26, r26
    1024:	a9 f3       	breq	.-22     	; 0x1010 <__divsf3_pse+0x10>
    1026:	35 d0       	rcall	.+106    	; 0x1092 <__divsf3_pse+0x92>
    1028:	0e 2e       	mov	r0, r30
    102a:	3a f0       	brmi	.+14     	; 0x103a <__divsf3_pse+0x3a>
    102c:	e0 e8       	ldi	r30, 0x80	; 128
    102e:	32 d0       	rcall	.+100    	; 0x1094 <__divsf3_pse+0x94>
    1030:	91 50       	subi	r25, 0x01	; 1
    1032:	50 40       	sbci	r21, 0x00	; 0
    1034:	e6 95       	lsr	r30
    1036:	00 1c       	adc	r0, r0
    1038:	ca f7       	brpl	.-14     	; 0x102c <__divsf3_pse+0x2c>
    103a:	2b d0       	rcall	.+86     	; 0x1092 <__divsf3_pse+0x92>
    103c:	fe 2f       	mov	r31, r30
    103e:	29 d0       	rcall	.+82     	; 0x1092 <__divsf3_pse+0x92>
    1040:	66 0f       	add	r22, r22
    1042:	77 1f       	adc	r23, r23
    1044:	88 1f       	adc	r24, r24
    1046:	bb 1f       	adc	r27, r27
    1048:	26 17       	cp	r18, r22
    104a:	37 07       	cpc	r19, r23
    104c:	48 07       	cpc	r20, r24
    104e:	ab 07       	cpc	r26, r27
    1050:	b0 e8       	ldi	r27, 0x80	; 128
    1052:	09 f0       	breq	.+2      	; 0x1056 <__divsf3_pse+0x56>
    1054:	bb 0b       	sbc	r27, r27
    1056:	80 2d       	mov	r24, r0
    1058:	bf 01       	movw	r22, r30
    105a:	ff 27       	eor	r31, r31
    105c:	93 58       	subi	r25, 0x83	; 131
    105e:	5f 4f       	sbci	r21, 0xFF	; 255
    1060:	3a f0       	brmi	.+14     	; 0x1070 <__divsf3_pse+0x70>
    1062:	9e 3f       	cpi	r25, 0xFE	; 254
    1064:	51 05       	cpc	r21, r1
    1066:	78 f0       	brcs	.+30     	; 0x1086 <__divsf3_pse+0x86>
    1068:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__fp_inf>
    106c:	0c 94 36 09 	jmp	0x126c	; 0x126c <__fp_szero>
    1070:	5f 3f       	cpi	r21, 0xFF	; 255
    1072:	e4 f3       	brlt	.-8      	; 0x106c <__divsf3_pse+0x6c>
    1074:	98 3e       	cpi	r25, 0xE8	; 232
    1076:	d4 f3       	brlt	.-12     	; 0x106c <__divsf3_pse+0x6c>
    1078:	86 95       	lsr	r24
    107a:	77 95       	ror	r23
    107c:	67 95       	ror	r22
    107e:	b7 95       	ror	r27
    1080:	f7 95       	ror	r31
    1082:	9f 5f       	subi	r25, 0xFF	; 255
    1084:	c9 f7       	brne	.-14     	; 0x1078 <__divsf3_pse+0x78>
    1086:	88 0f       	add	r24, r24
    1088:	91 1d       	adc	r25, r1
    108a:	96 95       	lsr	r25
    108c:	87 95       	ror	r24
    108e:	97 f9       	bld	r25, 7
    1090:	08 95       	ret
    1092:	e1 e0       	ldi	r30, 0x01	; 1
    1094:	66 0f       	add	r22, r22
    1096:	77 1f       	adc	r23, r23
    1098:	88 1f       	adc	r24, r24
    109a:	bb 1f       	adc	r27, r27
    109c:	62 17       	cp	r22, r18
    109e:	73 07       	cpc	r23, r19
    10a0:	84 07       	cpc	r24, r20
    10a2:	ba 07       	cpc	r27, r26
    10a4:	20 f0       	brcs	.+8      	; 0x10ae <__divsf3_pse+0xae>
    10a6:	62 1b       	sub	r22, r18
    10a8:	73 0b       	sbc	r23, r19
    10aa:	84 0b       	sbc	r24, r20
    10ac:	ba 0b       	sbc	r27, r26
    10ae:	ee 1f       	adc	r30, r30
    10b0:	88 f7       	brcc	.-30     	; 0x1094 <__divsf3_pse+0x94>
    10b2:	e0 95       	com	r30
    10b4:	08 95       	ret

000010b6 <__fixunssfsi>:
    10b6:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fp_splitA>
    10ba:	88 f0       	brcs	.+34     	; 0x10de <__fixunssfsi+0x28>
    10bc:	9f 57       	subi	r25, 0x7F	; 127
    10be:	98 f0       	brcs	.+38     	; 0x10e6 <__fixunssfsi+0x30>
    10c0:	b9 2f       	mov	r27, r25
    10c2:	99 27       	eor	r25, r25
    10c4:	b7 51       	subi	r27, 0x17	; 23
    10c6:	b0 f0       	brcs	.+44     	; 0x10f4 <__fixunssfsi+0x3e>
    10c8:	e1 f0       	breq	.+56     	; 0x1102 <__fixunssfsi+0x4c>
    10ca:	66 0f       	add	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	88 1f       	adc	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	1a f0       	brmi	.+6      	; 0x10da <__fixunssfsi+0x24>
    10d4:	ba 95       	dec	r27
    10d6:	c9 f7       	brne	.-14     	; 0x10ca <__fixunssfsi+0x14>
    10d8:	14 c0       	rjmp	.+40     	; 0x1102 <__fixunssfsi+0x4c>
    10da:	b1 30       	cpi	r27, 0x01	; 1
    10dc:	91 f0       	breq	.+36     	; 0x1102 <__fixunssfsi+0x4c>
    10de:	0e 94 35 09 	call	0x126a	; 0x126a <__fp_zero>
    10e2:	b1 e0       	ldi	r27, 0x01	; 1
    10e4:	08 95       	ret
    10e6:	0c 94 35 09 	jmp	0x126a	; 0x126a <__fp_zero>
    10ea:	67 2f       	mov	r22, r23
    10ec:	78 2f       	mov	r23, r24
    10ee:	88 27       	eor	r24, r24
    10f0:	b8 5f       	subi	r27, 0xF8	; 248
    10f2:	39 f0       	breq	.+14     	; 0x1102 <__fixunssfsi+0x4c>
    10f4:	b9 3f       	cpi	r27, 0xF9	; 249
    10f6:	cc f3       	brlt	.-14     	; 0x10ea <__fixunssfsi+0x34>
    10f8:	86 95       	lsr	r24
    10fa:	77 95       	ror	r23
    10fc:	67 95       	ror	r22
    10fe:	b3 95       	inc	r27
    1100:	d9 f7       	brne	.-10     	; 0x10f8 <__fixunssfsi+0x42>
    1102:	3e f4       	brtc	.+14     	; 0x1112 <__fixunssfsi+0x5c>
    1104:	90 95       	com	r25
    1106:	80 95       	com	r24
    1108:	70 95       	com	r23
    110a:	61 95       	neg	r22
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
    110e:	8f 4f       	sbci	r24, 0xFF	; 255
    1110:	9f 4f       	sbci	r25, 0xFF	; 255
    1112:	08 95       	ret

00001114 <__floatunsisf>:
    1114:	e8 94       	clt
    1116:	09 c0       	rjmp	.+18     	; 0x112a <__floatsisf+0x12>

00001118 <__floatsisf>:
    1118:	97 fb       	bst	r25, 7
    111a:	3e f4       	brtc	.+14     	; 0x112a <__floatsisf+0x12>
    111c:	90 95       	com	r25
    111e:	80 95       	com	r24
    1120:	70 95       	com	r23
    1122:	61 95       	neg	r22
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	8f 4f       	sbci	r24, 0xFF	; 255
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	99 23       	and	r25, r25
    112c:	a9 f0       	breq	.+42     	; 0x1158 <__floatsisf+0x40>
    112e:	f9 2f       	mov	r31, r25
    1130:	96 e9       	ldi	r25, 0x96	; 150
    1132:	bb 27       	eor	r27, r27
    1134:	93 95       	inc	r25
    1136:	f6 95       	lsr	r31
    1138:	87 95       	ror	r24
    113a:	77 95       	ror	r23
    113c:	67 95       	ror	r22
    113e:	b7 95       	ror	r27
    1140:	f1 11       	cpse	r31, r1
    1142:	f8 cf       	rjmp	.-16     	; 0x1134 <__floatsisf+0x1c>
    1144:	fa f4       	brpl	.+62     	; 0x1184 <__floatsisf+0x6c>
    1146:	bb 0f       	add	r27, r27
    1148:	11 f4       	brne	.+4      	; 0x114e <__floatsisf+0x36>
    114a:	60 ff       	sbrs	r22, 0
    114c:	1b c0       	rjmp	.+54     	; 0x1184 <__floatsisf+0x6c>
    114e:	6f 5f       	subi	r22, 0xFF	; 255
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	16 c0       	rjmp	.+44     	; 0x1184 <__floatsisf+0x6c>
    1158:	88 23       	and	r24, r24
    115a:	11 f0       	breq	.+4      	; 0x1160 <__floatsisf+0x48>
    115c:	96 e9       	ldi	r25, 0x96	; 150
    115e:	11 c0       	rjmp	.+34     	; 0x1182 <__floatsisf+0x6a>
    1160:	77 23       	and	r23, r23
    1162:	21 f0       	breq	.+8      	; 0x116c <__floatsisf+0x54>
    1164:	9e e8       	ldi	r25, 0x8E	; 142
    1166:	87 2f       	mov	r24, r23
    1168:	76 2f       	mov	r23, r22
    116a:	05 c0       	rjmp	.+10     	; 0x1176 <__floatsisf+0x5e>
    116c:	66 23       	and	r22, r22
    116e:	71 f0       	breq	.+28     	; 0x118c <__floatsisf+0x74>
    1170:	96 e8       	ldi	r25, 0x86	; 134
    1172:	86 2f       	mov	r24, r22
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	2a f0       	brmi	.+10     	; 0x1184 <__floatsisf+0x6c>
    117a:	9a 95       	dec	r25
    117c:	66 0f       	add	r22, r22
    117e:	77 1f       	adc	r23, r23
    1180:	88 1f       	adc	r24, r24
    1182:	da f7       	brpl	.-10     	; 0x117a <__floatsisf+0x62>
    1184:	88 0f       	add	r24, r24
    1186:	96 95       	lsr	r25
    1188:	87 95       	ror	r24
    118a:	97 f9       	bld	r25, 7
    118c:	08 95       	ret

0000118e <__fp_cmp>:
    118e:	99 0f       	add	r25, r25
    1190:	00 08       	sbc	r0, r0
    1192:	55 0f       	add	r21, r21
    1194:	aa 0b       	sbc	r26, r26
    1196:	e0 e8       	ldi	r30, 0x80	; 128
    1198:	fe ef       	ldi	r31, 0xFE	; 254
    119a:	16 16       	cp	r1, r22
    119c:	17 06       	cpc	r1, r23
    119e:	e8 07       	cpc	r30, r24
    11a0:	f9 07       	cpc	r31, r25
    11a2:	c0 f0       	brcs	.+48     	; 0x11d4 <__fp_cmp+0x46>
    11a4:	12 16       	cp	r1, r18
    11a6:	13 06       	cpc	r1, r19
    11a8:	e4 07       	cpc	r30, r20
    11aa:	f5 07       	cpc	r31, r21
    11ac:	98 f0       	brcs	.+38     	; 0x11d4 <__fp_cmp+0x46>
    11ae:	62 1b       	sub	r22, r18
    11b0:	73 0b       	sbc	r23, r19
    11b2:	84 0b       	sbc	r24, r20
    11b4:	95 0b       	sbc	r25, r21
    11b6:	39 f4       	brne	.+14     	; 0x11c6 <__fp_cmp+0x38>
    11b8:	0a 26       	eor	r0, r26
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <__fp_cmp+0x46>
    11bc:	23 2b       	or	r18, r19
    11be:	24 2b       	or	r18, r20
    11c0:	25 2b       	or	r18, r21
    11c2:	21 f4       	brne	.+8      	; 0x11cc <__fp_cmp+0x3e>
    11c4:	08 95       	ret
    11c6:	0a 26       	eor	r0, r26
    11c8:	09 f4       	brne	.+2      	; 0x11cc <__fp_cmp+0x3e>
    11ca:	a1 40       	sbci	r26, 0x01	; 1
    11cc:	a6 95       	lsr	r26
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	81 1d       	adc	r24, r1
    11d2:	81 1d       	adc	r24, r1
    11d4:	08 95       	ret

000011d6 <__fp_inf>:
    11d6:	97 f9       	bld	r25, 7
    11d8:	9f 67       	ori	r25, 0x7F	; 127
    11da:	80 e8       	ldi	r24, 0x80	; 128
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	08 95       	ret

000011e2 <__fp_nan>:
    11e2:	9f ef       	ldi	r25, 0xFF	; 255
    11e4:	80 ec       	ldi	r24, 0xC0	; 192
    11e6:	08 95       	ret

000011e8 <__fp_pscA>:
    11e8:	00 24       	eor	r0, r0
    11ea:	0a 94       	dec	r0
    11ec:	16 16       	cp	r1, r22
    11ee:	17 06       	cpc	r1, r23
    11f0:	18 06       	cpc	r1, r24
    11f2:	09 06       	cpc	r0, r25
    11f4:	08 95       	ret

000011f6 <__fp_pscB>:
    11f6:	00 24       	eor	r0, r0
    11f8:	0a 94       	dec	r0
    11fa:	12 16       	cp	r1, r18
    11fc:	13 06       	cpc	r1, r19
    11fe:	14 06       	cpc	r1, r20
    1200:	05 06       	cpc	r0, r21
    1202:	08 95       	ret

00001204 <__fp_round>:
    1204:	09 2e       	mov	r0, r25
    1206:	03 94       	inc	r0
    1208:	00 0c       	add	r0, r0
    120a:	11 f4       	brne	.+4      	; 0x1210 <__fp_round+0xc>
    120c:	88 23       	and	r24, r24
    120e:	52 f0       	brmi	.+20     	; 0x1224 <__fp_round+0x20>
    1210:	bb 0f       	add	r27, r27
    1212:	40 f4       	brcc	.+16     	; 0x1224 <__fp_round+0x20>
    1214:	bf 2b       	or	r27, r31
    1216:	11 f4       	brne	.+4      	; 0x121c <__fp_round+0x18>
    1218:	60 ff       	sbrs	r22, 0
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <__fp_round+0x20>
    121c:	6f 5f       	subi	r22, 0xFF	; 255
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	08 95       	ret

00001226 <__fp_split3>:
    1226:	57 fd       	sbrc	r21, 7
    1228:	90 58       	subi	r25, 0x80	; 128
    122a:	44 0f       	add	r20, r20
    122c:	55 1f       	adc	r21, r21
    122e:	59 f0       	breq	.+22     	; 0x1246 <__fp_splitA+0x10>
    1230:	5f 3f       	cpi	r21, 0xFF	; 255
    1232:	71 f0       	breq	.+28     	; 0x1250 <__fp_splitA+0x1a>
    1234:	47 95       	ror	r20

00001236 <__fp_splitA>:
    1236:	88 0f       	add	r24, r24
    1238:	97 fb       	bst	r25, 7
    123a:	99 1f       	adc	r25, r25
    123c:	61 f0       	breq	.+24     	; 0x1256 <__fp_splitA+0x20>
    123e:	9f 3f       	cpi	r25, 0xFF	; 255
    1240:	79 f0       	breq	.+30     	; 0x1260 <__fp_splitA+0x2a>
    1242:	87 95       	ror	r24
    1244:	08 95       	ret
    1246:	12 16       	cp	r1, r18
    1248:	13 06       	cpc	r1, r19
    124a:	14 06       	cpc	r1, r20
    124c:	55 1f       	adc	r21, r21
    124e:	f2 cf       	rjmp	.-28     	; 0x1234 <__fp_split3+0xe>
    1250:	46 95       	lsr	r20
    1252:	f1 df       	rcall	.-30     	; 0x1236 <__fp_splitA>
    1254:	08 c0       	rjmp	.+16     	; 0x1266 <__fp_splitA+0x30>
    1256:	16 16       	cp	r1, r22
    1258:	17 06       	cpc	r1, r23
    125a:	18 06       	cpc	r1, r24
    125c:	99 1f       	adc	r25, r25
    125e:	f1 cf       	rjmp	.-30     	; 0x1242 <__fp_splitA+0xc>
    1260:	86 95       	lsr	r24
    1262:	71 05       	cpc	r23, r1
    1264:	61 05       	cpc	r22, r1
    1266:	08 94       	sec
    1268:	08 95       	ret

0000126a <__fp_zero>:
    126a:	e8 94       	clt

0000126c <__fp_szero>:
    126c:	bb 27       	eor	r27, r27
    126e:	66 27       	eor	r22, r22
    1270:	77 27       	eor	r23, r23
    1272:	cb 01       	movw	r24, r22
    1274:	97 f9       	bld	r25, 7
    1276:	08 95       	ret

00001278 <__gesf2>:
    1278:	0e 94 c7 08 	call	0x118e	; 0x118e <__fp_cmp>
    127c:	08 f4       	brcc	.+2      	; 0x1280 <__gesf2+0x8>
    127e:	8f ef       	ldi	r24, 0xFF	; 255
    1280:	08 95       	ret

00001282 <__mulsf3>:
    1282:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__mulsf3x>
    1286:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__fp_round>
    128a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__fp_pscA>
    128e:	38 f0       	brcs	.+14     	; 0x129e <__mulsf3+0x1c>
    1290:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__fp_pscB>
    1294:	20 f0       	brcs	.+8      	; 0x129e <__mulsf3+0x1c>
    1296:	95 23       	and	r25, r21
    1298:	11 f0       	breq	.+4      	; 0x129e <__mulsf3+0x1c>
    129a:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__fp_inf>
    129e:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__fp_nan>
    12a2:	11 24       	eor	r1, r1
    12a4:	0c 94 36 09 	jmp	0x126c	; 0x126c <__fp_szero>

000012a8 <__mulsf3x>:
    12a8:	0e 94 13 09 	call	0x1226	; 0x1226 <__fp_split3>
    12ac:	70 f3       	brcs	.-36     	; 0x128a <__mulsf3+0x8>

000012ae <__mulsf3_pse>:
    12ae:	95 9f       	mul	r25, r21
    12b0:	c1 f3       	breq	.-16     	; 0x12a2 <__mulsf3+0x20>
    12b2:	95 0f       	add	r25, r21
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	55 1f       	adc	r21, r21
    12b8:	62 9f       	mul	r22, r18
    12ba:	f0 01       	movw	r30, r0
    12bc:	72 9f       	mul	r23, r18
    12be:	bb 27       	eor	r27, r27
    12c0:	f0 0d       	add	r31, r0
    12c2:	b1 1d       	adc	r27, r1
    12c4:	63 9f       	mul	r22, r19
    12c6:	aa 27       	eor	r26, r26
    12c8:	f0 0d       	add	r31, r0
    12ca:	b1 1d       	adc	r27, r1
    12cc:	aa 1f       	adc	r26, r26
    12ce:	64 9f       	mul	r22, r20
    12d0:	66 27       	eor	r22, r22
    12d2:	b0 0d       	add	r27, r0
    12d4:	a1 1d       	adc	r26, r1
    12d6:	66 1f       	adc	r22, r22
    12d8:	82 9f       	mul	r24, r18
    12da:	22 27       	eor	r18, r18
    12dc:	b0 0d       	add	r27, r0
    12de:	a1 1d       	adc	r26, r1
    12e0:	62 1f       	adc	r22, r18
    12e2:	73 9f       	mul	r23, r19
    12e4:	b0 0d       	add	r27, r0
    12e6:	a1 1d       	adc	r26, r1
    12e8:	62 1f       	adc	r22, r18
    12ea:	83 9f       	mul	r24, r19
    12ec:	a0 0d       	add	r26, r0
    12ee:	61 1d       	adc	r22, r1
    12f0:	22 1f       	adc	r18, r18
    12f2:	74 9f       	mul	r23, r20
    12f4:	33 27       	eor	r19, r19
    12f6:	a0 0d       	add	r26, r0
    12f8:	61 1d       	adc	r22, r1
    12fa:	23 1f       	adc	r18, r19
    12fc:	84 9f       	mul	r24, r20
    12fe:	60 0d       	add	r22, r0
    1300:	21 1d       	adc	r18, r1
    1302:	82 2f       	mov	r24, r18
    1304:	76 2f       	mov	r23, r22
    1306:	6a 2f       	mov	r22, r26
    1308:	11 24       	eor	r1, r1
    130a:	9f 57       	subi	r25, 0x7F	; 127
    130c:	50 40       	sbci	r21, 0x00	; 0
    130e:	9a f0       	brmi	.+38     	; 0x1336 <__mulsf3_pse+0x88>
    1310:	f1 f0       	breq	.+60     	; 0x134e <__mulsf3_pse+0xa0>
    1312:	88 23       	and	r24, r24
    1314:	4a f0       	brmi	.+18     	; 0x1328 <__mulsf3_pse+0x7a>
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	bb 1f       	adc	r27, r27
    131c:	66 1f       	adc	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	88 1f       	adc	r24, r24
    1322:	91 50       	subi	r25, 0x01	; 1
    1324:	50 40       	sbci	r21, 0x00	; 0
    1326:	a9 f7       	brne	.-22     	; 0x1312 <__mulsf3_pse+0x64>
    1328:	9e 3f       	cpi	r25, 0xFE	; 254
    132a:	51 05       	cpc	r21, r1
    132c:	80 f0       	brcs	.+32     	; 0x134e <__mulsf3_pse+0xa0>
    132e:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__fp_inf>
    1332:	0c 94 36 09 	jmp	0x126c	; 0x126c <__fp_szero>
    1336:	5f 3f       	cpi	r21, 0xFF	; 255
    1338:	e4 f3       	brlt	.-8      	; 0x1332 <__mulsf3_pse+0x84>
    133a:	98 3e       	cpi	r25, 0xE8	; 232
    133c:	d4 f3       	brlt	.-12     	; 0x1332 <__mulsf3_pse+0x84>
    133e:	86 95       	lsr	r24
    1340:	77 95       	ror	r23
    1342:	67 95       	ror	r22
    1344:	b7 95       	ror	r27
    1346:	f7 95       	ror	r31
    1348:	e7 95       	ror	r30
    134a:	9f 5f       	subi	r25, 0xFF	; 255
    134c:	c1 f7       	brne	.-16     	; 0x133e <__mulsf3_pse+0x90>
    134e:	fe 2b       	or	r31, r30
    1350:	88 0f       	add	r24, r24
    1352:	91 1d       	adc	r25, r1
    1354:	96 95       	lsr	r25
    1356:	87 95       	ror	r24
    1358:	97 f9       	bld	r25, 7
    135a:	08 95       	ret

0000135c <vfprintf>:
    135c:	a0 e1       	ldi	r26, 0x10	; 16
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e4 eb       	ldi	r30, 0xB4	; 180
    1362:	f9 e0       	ldi	r31, 0x09	; 9
    1364:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__>
    1368:	7c 01       	movw	r14, r24
    136a:	1b 01       	movw	r2, r22
    136c:	6a 01       	movw	r12, r20
    136e:	fc 01       	movw	r30, r24
    1370:	17 82       	std	Z+7, r1	; 0x07
    1372:	16 82       	std	Z+6, r1	; 0x06
    1374:	83 81       	ldd	r24, Z+3	; 0x03
    1376:	81 ff       	sbrs	r24, 1
    1378:	44 c3       	rjmp	.+1672   	; 0x1a02 <vfprintf+0x6a6>
    137a:	9e 01       	movw	r18, r28
    137c:	2f 5f       	subi	r18, 0xFF	; 255
    137e:	3f 4f       	sbci	r19, 0xFF	; 255
    1380:	39 01       	movw	r6, r18
    1382:	f7 01       	movw	r30, r14
    1384:	93 81       	ldd	r25, Z+3	; 0x03
    1386:	f1 01       	movw	r30, r2
    1388:	93 fd       	sbrc	r25, 3
    138a:	85 91       	lpm	r24, Z+
    138c:	93 ff       	sbrs	r25, 3
    138e:	81 91       	ld	r24, Z+
    1390:	1f 01       	movw	r2, r30
    1392:	88 23       	and	r24, r24
    1394:	09 f4       	brne	.+2      	; 0x1398 <vfprintf+0x3c>
    1396:	31 c3       	rjmp	.+1634   	; 0x19fa <vfprintf+0x69e>
    1398:	85 32       	cpi	r24, 0x25	; 37
    139a:	39 f4       	brne	.+14     	; 0x13aa <vfprintf+0x4e>
    139c:	93 fd       	sbrc	r25, 3
    139e:	85 91       	lpm	r24, Z+
    13a0:	93 ff       	sbrs	r25, 3
    13a2:	81 91       	ld	r24, Z+
    13a4:	1f 01       	movw	r2, r30
    13a6:	85 32       	cpi	r24, 0x25	; 37
    13a8:	39 f4       	brne	.+14     	; 0x13b8 <vfprintf+0x5c>
    13aa:	b7 01       	movw	r22, r14
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    13b2:	56 01       	movw	r10, r12
    13b4:	65 01       	movw	r12, r10
    13b6:	e5 cf       	rjmp	.-54     	; 0x1382 <vfprintf+0x26>
    13b8:	10 e0       	ldi	r17, 0x00	; 0
    13ba:	51 2c       	mov	r5, r1
    13bc:	91 2c       	mov	r9, r1
    13be:	ff e1       	ldi	r31, 0x1F	; 31
    13c0:	f9 15       	cp	r31, r9
    13c2:	d8 f0       	brcs	.+54     	; 0x13fa <vfprintf+0x9e>
    13c4:	8b 32       	cpi	r24, 0x2B	; 43
    13c6:	79 f0       	breq	.+30     	; 0x13e6 <vfprintf+0x8a>
    13c8:	38 f4       	brcc	.+14     	; 0x13d8 <vfprintf+0x7c>
    13ca:	80 32       	cpi	r24, 0x20	; 32
    13cc:	79 f0       	breq	.+30     	; 0x13ec <vfprintf+0x90>
    13ce:	83 32       	cpi	r24, 0x23	; 35
    13d0:	a1 f4       	brne	.+40     	; 0x13fa <vfprintf+0x9e>
    13d2:	f9 2d       	mov	r31, r9
    13d4:	f0 61       	ori	r31, 0x10	; 16
    13d6:	2e c0       	rjmp	.+92     	; 0x1434 <vfprintf+0xd8>
    13d8:	8d 32       	cpi	r24, 0x2D	; 45
    13da:	61 f0       	breq	.+24     	; 0x13f4 <vfprintf+0x98>
    13dc:	80 33       	cpi	r24, 0x30	; 48
    13de:	69 f4       	brne	.+26     	; 0x13fa <vfprintf+0x9e>
    13e0:	29 2d       	mov	r18, r9
    13e2:	21 60       	ori	r18, 0x01	; 1
    13e4:	2d c0       	rjmp	.+90     	; 0x1440 <vfprintf+0xe4>
    13e6:	39 2d       	mov	r19, r9
    13e8:	32 60       	ori	r19, 0x02	; 2
    13ea:	93 2e       	mov	r9, r19
    13ec:	89 2d       	mov	r24, r9
    13ee:	84 60       	ori	r24, 0x04	; 4
    13f0:	98 2e       	mov	r9, r24
    13f2:	2a c0       	rjmp	.+84     	; 0x1448 <vfprintf+0xec>
    13f4:	e9 2d       	mov	r30, r9
    13f6:	e8 60       	ori	r30, 0x08	; 8
    13f8:	15 c0       	rjmp	.+42     	; 0x1424 <vfprintf+0xc8>
    13fa:	97 fc       	sbrc	r9, 7
    13fc:	2d c0       	rjmp	.+90     	; 0x1458 <vfprintf+0xfc>
    13fe:	20 ed       	ldi	r18, 0xD0	; 208
    1400:	28 0f       	add	r18, r24
    1402:	2a 30       	cpi	r18, 0x0A	; 10
    1404:	88 f4       	brcc	.+34     	; 0x1428 <vfprintf+0xcc>
    1406:	96 fe       	sbrs	r9, 6
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <vfprintf+0xba>
    140a:	3a e0       	ldi	r19, 0x0A	; 10
    140c:	13 9f       	mul	r17, r19
    140e:	20 0d       	add	r18, r0
    1410:	11 24       	eor	r1, r1
    1412:	12 2f       	mov	r17, r18
    1414:	19 c0       	rjmp	.+50     	; 0x1448 <vfprintf+0xec>
    1416:	8a e0       	ldi	r24, 0x0A	; 10
    1418:	58 9e       	mul	r5, r24
    141a:	20 0d       	add	r18, r0
    141c:	11 24       	eor	r1, r1
    141e:	52 2e       	mov	r5, r18
    1420:	e9 2d       	mov	r30, r9
    1422:	e0 62       	ori	r30, 0x20	; 32
    1424:	9e 2e       	mov	r9, r30
    1426:	10 c0       	rjmp	.+32     	; 0x1448 <vfprintf+0xec>
    1428:	8e 32       	cpi	r24, 0x2E	; 46
    142a:	31 f4       	brne	.+12     	; 0x1438 <vfprintf+0xdc>
    142c:	96 fc       	sbrc	r9, 6
    142e:	e5 c2       	rjmp	.+1482   	; 0x19fa <vfprintf+0x69e>
    1430:	f9 2d       	mov	r31, r9
    1432:	f0 64       	ori	r31, 0x40	; 64
    1434:	9f 2e       	mov	r9, r31
    1436:	08 c0       	rjmp	.+16     	; 0x1448 <vfprintf+0xec>
    1438:	8c 36       	cpi	r24, 0x6C	; 108
    143a:	21 f4       	brne	.+8      	; 0x1444 <vfprintf+0xe8>
    143c:	29 2d       	mov	r18, r9
    143e:	20 68       	ori	r18, 0x80	; 128
    1440:	92 2e       	mov	r9, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <vfprintf+0xec>
    1444:	88 36       	cpi	r24, 0x68	; 104
    1446:	41 f4       	brne	.+16     	; 0x1458 <vfprintf+0xfc>
    1448:	f1 01       	movw	r30, r2
    144a:	93 fd       	sbrc	r25, 3
    144c:	85 91       	lpm	r24, Z+
    144e:	93 ff       	sbrs	r25, 3
    1450:	81 91       	ld	r24, Z+
    1452:	1f 01       	movw	r2, r30
    1454:	81 11       	cpse	r24, r1
    1456:	b3 cf       	rjmp	.-154    	; 0x13be <vfprintf+0x62>
    1458:	9b eb       	ldi	r25, 0xBB	; 187
    145a:	98 0f       	add	r25, r24
    145c:	93 30       	cpi	r25, 0x03	; 3
    145e:	20 f4       	brcc	.+8      	; 0x1468 <vfprintf+0x10c>
    1460:	99 2d       	mov	r25, r9
    1462:	90 61       	ori	r25, 0x10	; 16
    1464:	80 5e       	subi	r24, 0xE0	; 224
    1466:	07 c0       	rjmp	.+14     	; 0x1476 <vfprintf+0x11a>
    1468:	9b e9       	ldi	r25, 0x9B	; 155
    146a:	98 0f       	add	r25, r24
    146c:	93 30       	cpi	r25, 0x03	; 3
    146e:	08 f0       	brcs	.+2      	; 0x1472 <vfprintf+0x116>
    1470:	66 c1       	rjmp	.+716    	; 0x173e <vfprintf+0x3e2>
    1472:	99 2d       	mov	r25, r9
    1474:	9f 7e       	andi	r25, 0xEF	; 239
    1476:	96 ff       	sbrs	r25, 6
    1478:	16 e0       	ldi	r17, 0x06	; 6
    147a:	9f 73       	andi	r25, 0x3F	; 63
    147c:	99 2e       	mov	r9, r25
    147e:	85 36       	cpi	r24, 0x65	; 101
    1480:	19 f4       	brne	.+6      	; 0x1488 <vfprintf+0x12c>
    1482:	90 64       	ori	r25, 0x40	; 64
    1484:	99 2e       	mov	r9, r25
    1486:	08 c0       	rjmp	.+16     	; 0x1498 <vfprintf+0x13c>
    1488:	86 36       	cpi	r24, 0x66	; 102
    148a:	21 f4       	brne	.+8      	; 0x1494 <vfprintf+0x138>
    148c:	39 2f       	mov	r19, r25
    148e:	30 68       	ori	r19, 0x80	; 128
    1490:	93 2e       	mov	r9, r19
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <vfprintf+0x13c>
    1494:	11 11       	cpse	r17, r1
    1496:	11 50       	subi	r17, 0x01	; 1
    1498:	97 fe       	sbrs	r9, 7
    149a:	07 c0       	rjmp	.+14     	; 0x14aa <vfprintf+0x14e>
    149c:	1c 33       	cpi	r17, 0x3C	; 60
    149e:	50 f4       	brcc	.+20     	; 0x14b4 <vfprintf+0x158>
    14a0:	44 24       	eor	r4, r4
    14a2:	43 94       	inc	r4
    14a4:	41 0e       	add	r4, r17
    14a6:	27 e0       	ldi	r18, 0x07	; 7
    14a8:	0b c0       	rjmp	.+22     	; 0x14c0 <vfprintf+0x164>
    14aa:	18 30       	cpi	r17, 0x08	; 8
    14ac:	38 f0       	brcs	.+14     	; 0x14bc <vfprintf+0x160>
    14ae:	27 e0       	ldi	r18, 0x07	; 7
    14b0:	17 e0       	ldi	r17, 0x07	; 7
    14b2:	05 c0       	rjmp	.+10     	; 0x14be <vfprintf+0x162>
    14b4:	27 e0       	ldi	r18, 0x07	; 7
    14b6:	9c e3       	ldi	r25, 0x3C	; 60
    14b8:	49 2e       	mov	r4, r25
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <vfprintf+0x164>
    14bc:	21 2f       	mov	r18, r17
    14be:	41 2c       	mov	r4, r1
    14c0:	56 01       	movw	r10, r12
    14c2:	84 e0       	ldi	r24, 0x04	; 4
    14c4:	a8 0e       	add	r10, r24
    14c6:	b1 1c       	adc	r11, r1
    14c8:	f6 01       	movw	r30, r12
    14ca:	60 81       	ld	r22, Z
    14cc:	71 81       	ldd	r23, Z+1	; 0x01
    14ce:	82 81       	ldd	r24, Z+2	; 0x02
    14d0:	93 81       	ldd	r25, Z+3	; 0x03
    14d2:	04 2d       	mov	r16, r4
    14d4:	a3 01       	movw	r20, r6
    14d6:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__ftoa_engine>
    14da:	6c 01       	movw	r12, r24
    14dc:	f9 81       	ldd	r31, Y+1	; 0x01
    14de:	fc 87       	std	Y+12, r31	; 0x0c
    14e0:	f0 ff       	sbrs	r31, 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <vfprintf+0x18c>
    14e4:	f3 ff       	sbrs	r31, 3
    14e6:	06 c0       	rjmp	.+12     	; 0x14f4 <vfprintf+0x198>
    14e8:	91 fc       	sbrc	r9, 1
    14ea:	06 c0       	rjmp	.+12     	; 0x14f8 <vfprintf+0x19c>
    14ec:	92 fe       	sbrs	r9, 2
    14ee:	06 c0       	rjmp	.+12     	; 0x14fc <vfprintf+0x1a0>
    14f0:	00 e2       	ldi	r16, 0x20	; 32
    14f2:	05 c0       	rjmp	.+10     	; 0x14fe <vfprintf+0x1a2>
    14f4:	0d e2       	ldi	r16, 0x2D	; 45
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <vfprintf+0x1a2>
    14f8:	0b e2       	ldi	r16, 0x2B	; 43
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <vfprintf+0x1a2>
    14fc:	00 e0       	ldi	r16, 0x00	; 0
    14fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1500:	8c 70       	andi	r24, 0x0C	; 12
    1502:	19 f0       	breq	.+6      	; 0x150a <vfprintf+0x1ae>
    1504:	01 11       	cpse	r16, r1
    1506:	5a c2       	rjmp	.+1204   	; 0x19bc <vfprintf+0x660>
    1508:	9b c2       	rjmp	.+1334   	; 0x1a40 <vfprintf+0x6e4>
    150a:	97 fe       	sbrs	r9, 7
    150c:	10 c0       	rjmp	.+32     	; 0x152e <vfprintf+0x1d2>
    150e:	4c 0c       	add	r4, r12
    1510:	fc 85       	ldd	r31, Y+12	; 0x0c
    1512:	f4 ff       	sbrs	r31, 4
    1514:	04 c0       	rjmp	.+8      	; 0x151e <vfprintf+0x1c2>
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	81 33       	cpi	r24, 0x31	; 49
    151a:	09 f4       	brne	.+2      	; 0x151e <vfprintf+0x1c2>
    151c:	4a 94       	dec	r4
    151e:	14 14       	cp	r1, r4
    1520:	74 f5       	brge	.+92     	; 0x157e <vfprintf+0x222>
    1522:	28 e0       	ldi	r18, 0x08	; 8
    1524:	24 15       	cp	r18, r4
    1526:	78 f5       	brcc	.+94     	; 0x1586 <vfprintf+0x22a>
    1528:	88 e0       	ldi	r24, 0x08	; 8
    152a:	48 2e       	mov	r4, r24
    152c:	2c c0       	rjmp	.+88     	; 0x1586 <vfprintf+0x22a>
    152e:	96 fc       	sbrc	r9, 6
    1530:	2a c0       	rjmp	.+84     	; 0x1586 <vfprintf+0x22a>
    1532:	81 2f       	mov	r24, r17
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	8c 15       	cp	r24, r12
    1538:	9d 05       	cpc	r25, r13
    153a:	9c f0       	brlt	.+38     	; 0x1562 <vfprintf+0x206>
    153c:	3c ef       	ldi	r19, 0xFC	; 252
    153e:	c3 16       	cp	r12, r19
    1540:	3f ef       	ldi	r19, 0xFF	; 255
    1542:	d3 06       	cpc	r13, r19
    1544:	74 f0       	brlt	.+28     	; 0x1562 <vfprintf+0x206>
    1546:	89 2d       	mov	r24, r9
    1548:	80 68       	ori	r24, 0x80	; 128
    154a:	98 2e       	mov	r9, r24
    154c:	0a c0       	rjmp	.+20     	; 0x1562 <vfprintf+0x206>
    154e:	e2 e0       	ldi	r30, 0x02	; 2
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	ec 0f       	add	r30, r28
    1554:	fd 1f       	adc	r31, r29
    1556:	e1 0f       	add	r30, r17
    1558:	f1 1d       	adc	r31, r1
    155a:	80 81       	ld	r24, Z
    155c:	80 33       	cpi	r24, 0x30	; 48
    155e:	19 f4       	brne	.+6      	; 0x1566 <vfprintf+0x20a>
    1560:	11 50       	subi	r17, 0x01	; 1
    1562:	11 11       	cpse	r17, r1
    1564:	f4 cf       	rjmp	.-24     	; 0x154e <vfprintf+0x1f2>
    1566:	97 fe       	sbrs	r9, 7
    1568:	0e c0       	rjmp	.+28     	; 0x1586 <vfprintf+0x22a>
    156a:	44 24       	eor	r4, r4
    156c:	43 94       	inc	r4
    156e:	41 0e       	add	r4, r17
    1570:	81 2f       	mov	r24, r17
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	c8 16       	cp	r12, r24
    1576:	d9 06       	cpc	r13, r25
    1578:	2c f4       	brge	.+10     	; 0x1584 <vfprintf+0x228>
    157a:	1c 19       	sub	r17, r12
    157c:	04 c0       	rjmp	.+8      	; 0x1586 <vfprintf+0x22a>
    157e:	44 24       	eor	r4, r4
    1580:	43 94       	inc	r4
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <vfprintf+0x22a>
    1584:	10 e0       	ldi	r17, 0x00	; 0
    1586:	97 fe       	sbrs	r9, 7
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <vfprintf+0x23a>
    158a:	1c 14       	cp	r1, r12
    158c:	1d 04       	cpc	r1, r13
    158e:	34 f4       	brge	.+12     	; 0x159c <vfprintf+0x240>
    1590:	c6 01       	movw	r24, r12
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <vfprintf+0x244>
    1596:	85 e0       	ldi	r24, 0x05	; 5
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <vfprintf+0x244>
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	01 11       	cpse	r16, r1
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	11 23       	and	r17, r17
    15a6:	31 f0       	breq	.+12     	; 0x15b4 <vfprintf+0x258>
    15a8:	21 2f       	mov	r18, r17
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	2f 5f       	subi	r18, 0xFF	; 255
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	82 0f       	add	r24, r18
    15b2:	93 1f       	adc	r25, r19
    15b4:	25 2d       	mov	r18, r5
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	82 17       	cp	r24, r18
    15ba:	93 07       	cpc	r25, r19
    15bc:	14 f4       	brge	.+4      	; 0x15c2 <vfprintf+0x266>
    15be:	58 1a       	sub	r5, r24
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <vfprintf+0x268>
    15c2:	51 2c       	mov	r5, r1
    15c4:	89 2d       	mov	r24, r9
    15c6:	89 70       	andi	r24, 0x09	; 9
    15c8:	49 f4       	brne	.+18     	; 0x15dc <vfprintf+0x280>
    15ca:	55 20       	and	r5, r5
    15cc:	39 f0       	breq	.+14     	; 0x15dc <vfprintf+0x280>
    15ce:	b7 01       	movw	r22, r14
    15d0:	80 e2       	ldi	r24, 0x20	; 32
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    15d8:	5a 94       	dec	r5
    15da:	f7 cf       	rjmp	.-18     	; 0x15ca <vfprintf+0x26e>
    15dc:	00 23       	and	r16, r16
    15de:	29 f0       	breq	.+10     	; 0x15ea <vfprintf+0x28e>
    15e0:	b7 01       	movw	r22, r14
    15e2:	80 2f       	mov	r24, r16
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    15ea:	93 fc       	sbrc	r9, 3
    15ec:	09 c0       	rjmp	.+18     	; 0x1600 <vfprintf+0x2a4>
    15ee:	55 20       	and	r5, r5
    15f0:	39 f0       	breq	.+14     	; 0x1600 <vfprintf+0x2a4>
    15f2:	b7 01       	movw	r22, r14
    15f4:	80 e3       	ldi	r24, 0x30	; 48
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    15fc:	5a 94       	dec	r5
    15fe:	f7 cf       	rjmp	.-18     	; 0x15ee <vfprintf+0x292>
    1600:	97 fe       	sbrs	r9, 7
    1602:	4c c0       	rjmp	.+152    	; 0x169c <vfprintf+0x340>
    1604:	46 01       	movw	r8, r12
    1606:	d7 fe       	sbrs	r13, 7
    1608:	02 c0       	rjmp	.+4      	; 0x160e <vfprintf+0x2b2>
    160a:	81 2c       	mov	r8, r1
    160c:	91 2c       	mov	r9, r1
    160e:	c6 01       	movw	r24, r12
    1610:	88 19       	sub	r24, r8
    1612:	99 09       	sbc	r25, r9
    1614:	f3 01       	movw	r30, r6
    1616:	e8 0f       	add	r30, r24
    1618:	f9 1f       	adc	r31, r25
    161a:	fe 87       	std	Y+14, r31	; 0x0e
    161c:	ed 87       	std	Y+13, r30	; 0x0d
    161e:	96 01       	movw	r18, r12
    1620:	24 19       	sub	r18, r4
    1622:	31 09       	sbc	r19, r1
    1624:	38 8b       	std	Y+16, r19	; 0x10
    1626:	2f 87       	std	Y+15, r18	; 0x0f
    1628:	01 2f       	mov	r16, r17
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	11 95       	neg	r17
    162e:	01 95       	neg	r16
    1630:	11 09       	sbc	r17, r1
    1632:	3f ef       	ldi	r19, 0xFF	; 255
    1634:	83 16       	cp	r8, r19
    1636:	93 06       	cpc	r9, r19
    1638:	29 f4       	brne	.+10     	; 0x1644 <vfprintf+0x2e8>
    163a:	b7 01       	movw	r22, r14
    163c:	8e e2       	ldi	r24, 0x2E	; 46
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    1644:	c8 14       	cp	r12, r8
    1646:	d9 04       	cpc	r13, r9
    1648:	4c f0       	brlt	.+18     	; 0x165c <vfprintf+0x300>
    164a:	8f 85       	ldd	r24, Y+15	; 0x0f
    164c:	98 89       	ldd	r25, Y+16	; 0x10
    164e:	88 15       	cp	r24, r8
    1650:	99 05       	cpc	r25, r9
    1652:	24 f4       	brge	.+8      	; 0x165c <vfprintf+0x300>
    1654:	ed 85       	ldd	r30, Y+13	; 0x0d
    1656:	fe 85       	ldd	r31, Y+14	; 0x0e
    1658:	81 81       	ldd	r24, Z+1	; 0x01
    165a:	01 c0       	rjmp	.+2      	; 0x165e <vfprintf+0x302>
    165c:	80 e3       	ldi	r24, 0x30	; 48
    165e:	f1 e0       	ldi	r31, 0x01	; 1
    1660:	8f 1a       	sub	r8, r31
    1662:	91 08       	sbc	r9, r1
    1664:	2d 85       	ldd	r18, Y+13	; 0x0d
    1666:	3e 85       	ldd	r19, Y+14	; 0x0e
    1668:	2f 5f       	subi	r18, 0xFF	; 255
    166a:	3f 4f       	sbci	r19, 0xFF	; 255
    166c:	3e 87       	std	Y+14, r19	; 0x0e
    166e:	2d 87       	std	Y+13, r18	; 0x0d
    1670:	80 16       	cp	r8, r16
    1672:	91 06       	cpc	r9, r17
    1674:	2c f0       	brlt	.+10     	; 0x1680 <vfprintf+0x324>
    1676:	b7 01       	movw	r22, r14
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    167e:	d9 cf       	rjmp	.-78     	; 0x1632 <vfprintf+0x2d6>
    1680:	c8 14       	cp	r12, r8
    1682:	d9 04       	cpc	r13, r9
    1684:	41 f4       	brne	.+16     	; 0x1696 <vfprintf+0x33a>
    1686:	9a 81       	ldd	r25, Y+2	; 0x02
    1688:	96 33       	cpi	r25, 0x36	; 54
    168a:	20 f4       	brcc	.+8      	; 0x1694 <vfprintf+0x338>
    168c:	95 33       	cpi	r25, 0x35	; 53
    168e:	19 f4       	brne	.+6      	; 0x1696 <vfprintf+0x33a>
    1690:	3c 85       	ldd	r19, Y+12	; 0x0c
    1692:	34 ff       	sbrs	r19, 4
    1694:	81 e3       	ldi	r24, 0x31	; 49
    1696:	b7 01       	movw	r22, r14
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	4e c0       	rjmp	.+156    	; 0x1738 <vfprintf+0x3dc>
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	81 33       	cpi	r24, 0x31	; 49
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <vfprintf+0x34c>
    16a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    16a4:	9f 7e       	andi	r25, 0xEF	; 239
    16a6:	9c 87       	std	Y+12, r25	; 0x0c
    16a8:	b7 01       	movw	r22, r14
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    16b0:	11 11       	cpse	r17, r1
    16b2:	05 c0       	rjmp	.+10     	; 0x16be <vfprintf+0x362>
    16b4:	94 fc       	sbrc	r9, 4
    16b6:	18 c0       	rjmp	.+48     	; 0x16e8 <vfprintf+0x38c>
    16b8:	85 e6       	ldi	r24, 0x65	; 101
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	17 c0       	rjmp	.+46     	; 0x16ec <vfprintf+0x390>
    16be:	b7 01       	movw	r22, r14
    16c0:	8e e2       	ldi	r24, 0x2E	; 46
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    16c8:	1e 5f       	subi	r17, 0xFE	; 254
    16ca:	82 e0       	ldi	r24, 0x02	; 2
    16cc:	01 e0       	ldi	r16, 0x01	; 1
    16ce:	08 0f       	add	r16, r24
    16d0:	f3 01       	movw	r30, r6
    16d2:	e8 0f       	add	r30, r24
    16d4:	f1 1d       	adc	r31, r1
    16d6:	80 81       	ld	r24, Z
    16d8:	b7 01       	movw	r22, r14
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    16e0:	80 2f       	mov	r24, r16
    16e2:	01 13       	cpse	r16, r17
    16e4:	f3 cf       	rjmp	.-26     	; 0x16cc <vfprintf+0x370>
    16e6:	e6 cf       	rjmp	.-52     	; 0x16b4 <vfprintf+0x358>
    16e8:	85 e4       	ldi	r24, 0x45	; 69
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	b7 01       	movw	r22, r14
    16ee:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    16f2:	d7 fc       	sbrc	r13, 7
    16f4:	06 c0       	rjmp	.+12     	; 0x1702 <vfprintf+0x3a6>
    16f6:	c1 14       	cp	r12, r1
    16f8:	d1 04       	cpc	r13, r1
    16fa:	41 f4       	brne	.+16     	; 0x170c <vfprintf+0x3b0>
    16fc:	ec 85       	ldd	r30, Y+12	; 0x0c
    16fe:	e4 ff       	sbrs	r30, 4
    1700:	05 c0       	rjmp	.+10     	; 0x170c <vfprintf+0x3b0>
    1702:	d1 94       	neg	r13
    1704:	c1 94       	neg	r12
    1706:	d1 08       	sbc	r13, r1
    1708:	8d e2       	ldi	r24, 0x2D	; 45
    170a:	01 c0       	rjmp	.+2      	; 0x170e <vfprintf+0x3b2>
    170c:	8b e2       	ldi	r24, 0x2B	; 43
    170e:	b7 01       	movw	r22, r14
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    1716:	80 e3       	ldi	r24, 0x30	; 48
    1718:	2a e0       	ldi	r18, 0x0A	; 10
    171a:	c2 16       	cp	r12, r18
    171c:	d1 04       	cpc	r13, r1
    171e:	2c f0       	brlt	.+10     	; 0x172a <vfprintf+0x3ce>
    1720:	8f 5f       	subi	r24, 0xFF	; 255
    1722:	fa e0       	ldi	r31, 0x0A	; 10
    1724:	cf 1a       	sub	r12, r31
    1726:	d1 08       	sbc	r13, r1
    1728:	f7 cf       	rjmp	.-18     	; 0x1718 <vfprintf+0x3bc>
    172a:	b7 01       	movw	r22, r14
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    1732:	b7 01       	movw	r22, r14
    1734:	c6 01       	movw	r24, r12
    1736:	c0 96       	adiw	r24, 0x30	; 48
    1738:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    173c:	54 c1       	rjmp	.+680    	; 0x19e6 <vfprintf+0x68a>
    173e:	83 36       	cpi	r24, 0x63	; 99
    1740:	31 f0       	breq	.+12     	; 0x174e <vfprintf+0x3f2>
    1742:	83 37       	cpi	r24, 0x73	; 115
    1744:	79 f0       	breq	.+30     	; 0x1764 <vfprintf+0x408>
    1746:	83 35       	cpi	r24, 0x53	; 83
    1748:	09 f0       	breq	.+2      	; 0x174c <vfprintf+0x3f0>
    174a:	56 c0       	rjmp	.+172    	; 0x17f8 <vfprintf+0x49c>
    174c:	20 c0       	rjmp	.+64     	; 0x178e <vfprintf+0x432>
    174e:	56 01       	movw	r10, r12
    1750:	32 e0       	ldi	r19, 0x02	; 2
    1752:	a3 0e       	add	r10, r19
    1754:	b1 1c       	adc	r11, r1
    1756:	f6 01       	movw	r30, r12
    1758:	80 81       	ld	r24, Z
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	01 e0       	ldi	r16, 0x01	; 1
    175e:	10 e0       	ldi	r17, 0x00	; 0
    1760:	63 01       	movw	r12, r6
    1762:	12 c0       	rjmp	.+36     	; 0x1788 <vfprintf+0x42c>
    1764:	56 01       	movw	r10, r12
    1766:	f2 e0       	ldi	r31, 0x02	; 2
    1768:	af 0e       	add	r10, r31
    176a:	b1 1c       	adc	r11, r1
    176c:	f6 01       	movw	r30, r12
    176e:	c0 80       	ld	r12, Z
    1770:	d1 80       	ldd	r13, Z+1	; 0x01
    1772:	96 fe       	sbrs	r9, 6
    1774:	03 c0       	rjmp	.+6      	; 0x177c <vfprintf+0x420>
    1776:	61 2f       	mov	r22, r17
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <vfprintf+0x424>
    177c:	6f ef       	ldi	r22, 0xFF	; 255
    177e:	7f ef       	ldi	r23, 0xFF	; 255
    1780:	c6 01       	movw	r24, r12
    1782:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <strnlen>
    1786:	8c 01       	movw	r16, r24
    1788:	f9 2d       	mov	r31, r9
    178a:	ff 77       	andi	r31, 0x7F	; 127
    178c:	14 c0       	rjmp	.+40     	; 0x17b6 <vfprintf+0x45a>
    178e:	56 01       	movw	r10, r12
    1790:	22 e0       	ldi	r18, 0x02	; 2
    1792:	a2 0e       	add	r10, r18
    1794:	b1 1c       	adc	r11, r1
    1796:	f6 01       	movw	r30, r12
    1798:	c0 80       	ld	r12, Z
    179a:	d1 80       	ldd	r13, Z+1	; 0x01
    179c:	96 fe       	sbrs	r9, 6
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <vfprintf+0x44a>
    17a0:	61 2f       	mov	r22, r17
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <vfprintf+0x44e>
    17a6:	6f ef       	ldi	r22, 0xFF	; 255
    17a8:	7f ef       	ldi	r23, 0xFF	; 255
    17aa:	c6 01       	movw	r24, r12
    17ac:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <strnlen_P>
    17b0:	8c 01       	movw	r16, r24
    17b2:	f9 2d       	mov	r31, r9
    17b4:	f0 68       	ori	r31, 0x80	; 128
    17b6:	9f 2e       	mov	r9, r31
    17b8:	f3 fd       	sbrc	r31, 3
    17ba:	1a c0       	rjmp	.+52     	; 0x17f0 <vfprintf+0x494>
    17bc:	85 2d       	mov	r24, r5
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	08 17       	cp	r16, r24
    17c2:	19 07       	cpc	r17, r25
    17c4:	a8 f4       	brcc	.+42     	; 0x17f0 <vfprintf+0x494>
    17c6:	b7 01       	movw	r22, r14
    17c8:	80 e2       	ldi	r24, 0x20	; 32
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    17d0:	5a 94       	dec	r5
    17d2:	f4 cf       	rjmp	.-24     	; 0x17bc <vfprintf+0x460>
    17d4:	f6 01       	movw	r30, r12
    17d6:	97 fc       	sbrc	r9, 7
    17d8:	85 91       	lpm	r24, Z+
    17da:	97 fe       	sbrs	r9, 7
    17dc:	81 91       	ld	r24, Z+
    17de:	6f 01       	movw	r12, r30
    17e0:	b7 01       	movw	r22, r14
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    17e8:	51 10       	cpse	r5, r1
    17ea:	5a 94       	dec	r5
    17ec:	01 50       	subi	r16, 0x01	; 1
    17ee:	11 09       	sbc	r17, r1
    17f0:	01 15       	cp	r16, r1
    17f2:	11 05       	cpc	r17, r1
    17f4:	79 f7       	brne	.-34     	; 0x17d4 <vfprintf+0x478>
    17f6:	f7 c0       	rjmp	.+494    	; 0x19e6 <vfprintf+0x68a>
    17f8:	84 36       	cpi	r24, 0x64	; 100
    17fa:	11 f0       	breq	.+4      	; 0x1800 <vfprintf+0x4a4>
    17fc:	89 36       	cpi	r24, 0x69	; 105
    17fe:	61 f5       	brne	.+88     	; 0x1858 <vfprintf+0x4fc>
    1800:	56 01       	movw	r10, r12
    1802:	97 fe       	sbrs	r9, 7
    1804:	09 c0       	rjmp	.+18     	; 0x1818 <vfprintf+0x4bc>
    1806:	24 e0       	ldi	r18, 0x04	; 4
    1808:	a2 0e       	add	r10, r18
    180a:	b1 1c       	adc	r11, r1
    180c:	f6 01       	movw	r30, r12
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	0a c0       	rjmp	.+20     	; 0x182c <vfprintf+0x4d0>
    1818:	f2 e0       	ldi	r31, 0x02	; 2
    181a:	af 0e       	add	r10, r31
    181c:	b1 1c       	adc	r11, r1
    181e:	f6 01       	movw	r30, r12
    1820:	60 81       	ld	r22, Z
    1822:	71 81       	ldd	r23, Z+1	; 0x01
    1824:	07 2e       	mov	r0, r23
    1826:	00 0c       	add	r0, r0
    1828:	88 0b       	sbc	r24, r24
    182a:	99 0b       	sbc	r25, r25
    182c:	f9 2d       	mov	r31, r9
    182e:	ff 76       	andi	r31, 0x6F	; 111
    1830:	9f 2e       	mov	r9, r31
    1832:	97 ff       	sbrs	r25, 7
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <vfprintf+0x4ec>
    1836:	90 95       	com	r25
    1838:	80 95       	com	r24
    183a:	70 95       	com	r23
    183c:	61 95       	neg	r22
    183e:	7f 4f       	sbci	r23, 0xFF	; 255
    1840:	8f 4f       	sbci	r24, 0xFF	; 255
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	f0 68       	ori	r31, 0x80	; 128
    1846:	9f 2e       	mov	r9, r31
    1848:	2a e0       	ldi	r18, 0x0A	; 10
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	a3 01       	movw	r20, r6
    184e:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__ultoa_invert>
    1852:	c8 2e       	mov	r12, r24
    1854:	c6 18       	sub	r12, r6
    1856:	3f c0       	rjmp	.+126    	; 0x18d6 <vfprintf+0x57a>
    1858:	09 2d       	mov	r16, r9
    185a:	85 37       	cpi	r24, 0x75	; 117
    185c:	21 f4       	brne	.+8      	; 0x1866 <vfprintf+0x50a>
    185e:	0f 7e       	andi	r16, 0xEF	; 239
    1860:	2a e0       	ldi	r18, 0x0A	; 10
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	1d c0       	rjmp	.+58     	; 0x18a0 <vfprintf+0x544>
    1866:	09 7f       	andi	r16, 0xF9	; 249
    1868:	8f 36       	cpi	r24, 0x6F	; 111
    186a:	91 f0       	breq	.+36     	; 0x1890 <vfprintf+0x534>
    186c:	18 f4       	brcc	.+6      	; 0x1874 <vfprintf+0x518>
    186e:	88 35       	cpi	r24, 0x58	; 88
    1870:	59 f0       	breq	.+22     	; 0x1888 <vfprintf+0x52c>
    1872:	c3 c0       	rjmp	.+390    	; 0x19fa <vfprintf+0x69e>
    1874:	80 37       	cpi	r24, 0x70	; 112
    1876:	19 f0       	breq	.+6      	; 0x187e <vfprintf+0x522>
    1878:	88 37       	cpi	r24, 0x78	; 120
    187a:	11 f0       	breq	.+4      	; 0x1880 <vfprintf+0x524>
    187c:	be c0       	rjmp	.+380    	; 0x19fa <vfprintf+0x69e>
    187e:	00 61       	ori	r16, 0x10	; 16
    1880:	04 ff       	sbrs	r16, 4
    1882:	09 c0       	rjmp	.+18     	; 0x1896 <vfprintf+0x53a>
    1884:	04 60       	ori	r16, 0x04	; 4
    1886:	07 c0       	rjmp	.+14     	; 0x1896 <vfprintf+0x53a>
    1888:	94 fe       	sbrs	r9, 4
    188a:	08 c0       	rjmp	.+16     	; 0x189c <vfprintf+0x540>
    188c:	06 60       	ori	r16, 0x06	; 6
    188e:	06 c0       	rjmp	.+12     	; 0x189c <vfprintf+0x540>
    1890:	28 e0       	ldi	r18, 0x08	; 8
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	05 c0       	rjmp	.+10     	; 0x18a0 <vfprintf+0x544>
    1896:	20 e1       	ldi	r18, 0x10	; 16
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <vfprintf+0x544>
    189c:	20 e1       	ldi	r18, 0x10	; 16
    189e:	32 e0       	ldi	r19, 0x02	; 2
    18a0:	56 01       	movw	r10, r12
    18a2:	07 ff       	sbrs	r16, 7
    18a4:	09 c0       	rjmp	.+18     	; 0x18b8 <vfprintf+0x55c>
    18a6:	84 e0       	ldi	r24, 0x04	; 4
    18a8:	a8 0e       	add	r10, r24
    18aa:	b1 1c       	adc	r11, r1
    18ac:	f6 01       	movw	r30, r12
    18ae:	60 81       	ld	r22, Z
    18b0:	71 81       	ldd	r23, Z+1	; 0x01
    18b2:	82 81       	ldd	r24, Z+2	; 0x02
    18b4:	93 81       	ldd	r25, Z+3	; 0x03
    18b6:	08 c0       	rjmp	.+16     	; 0x18c8 <vfprintf+0x56c>
    18b8:	f2 e0       	ldi	r31, 0x02	; 2
    18ba:	af 0e       	add	r10, r31
    18bc:	b1 1c       	adc	r11, r1
    18be:	f6 01       	movw	r30, r12
    18c0:	60 81       	ld	r22, Z
    18c2:	71 81       	ldd	r23, Z+1	; 0x01
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a3 01       	movw	r20, r6
    18ca:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__ultoa_invert>
    18ce:	c8 2e       	mov	r12, r24
    18d0:	c6 18       	sub	r12, r6
    18d2:	0f 77       	andi	r16, 0x7F	; 127
    18d4:	90 2e       	mov	r9, r16
    18d6:	96 fe       	sbrs	r9, 6
    18d8:	0b c0       	rjmp	.+22     	; 0x18f0 <vfprintf+0x594>
    18da:	09 2d       	mov	r16, r9
    18dc:	0e 7f       	andi	r16, 0xFE	; 254
    18de:	c1 16       	cp	r12, r17
    18e0:	50 f4       	brcc	.+20     	; 0x18f6 <vfprintf+0x59a>
    18e2:	94 fe       	sbrs	r9, 4
    18e4:	0a c0       	rjmp	.+20     	; 0x18fa <vfprintf+0x59e>
    18e6:	92 fc       	sbrc	r9, 2
    18e8:	08 c0       	rjmp	.+16     	; 0x18fa <vfprintf+0x59e>
    18ea:	09 2d       	mov	r16, r9
    18ec:	0e 7e       	andi	r16, 0xEE	; 238
    18ee:	05 c0       	rjmp	.+10     	; 0x18fa <vfprintf+0x59e>
    18f0:	dc 2c       	mov	r13, r12
    18f2:	09 2d       	mov	r16, r9
    18f4:	03 c0       	rjmp	.+6      	; 0x18fc <vfprintf+0x5a0>
    18f6:	dc 2c       	mov	r13, r12
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <vfprintf+0x5a0>
    18fa:	d1 2e       	mov	r13, r17
    18fc:	04 ff       	sbrs	r16, 4
    18fe:	0d c0       	rjmp	.+26     	; 0x191a <vfprintf+0x5be>
    1900:	fe 01       	movw	r30, r28
    1902:	ec 0d       	add	r30, r12
    1904:	f1 1d       	adc	r31, r1
    1906:	80 81       	ld	r24, Z
    1908:	80 33       	cpi	r24, 0x30	; 48
    190a:	11 f4       	brne	.+4      	; 0x1910 <vfprintf+0x5b4>
    190c:	09 7e       	andi	r16, 0xE9	; 233
    190e:	09 c0       	rjmp	.+18     	; 0x1922 <vfprintf+0x5c6>
    1910:	02 ff       	sbrs	r16, 2
    1912:	06 c0       	rjmp	.+12     	; 0x1920 <vfprintf+0x5c4>
    1914:	d3 94       	inc	r13
    1916:	d3 94       	inc	r13
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <vfprintf+0x5c6>
    191a:	80 2f       	mov	r24, r16
    191c:	86 78       	andi	r24, 0x86	; 134
    191e:	09 f0       	breq	.+2      	; 0x1922 <vfprintf+0x5c6>
    1920:	d3 94       	inc	r13
    1922:	03 fd       	sbrc	r16, 3
    1924:	11 c0       	rjmp	.+34     	; 0x1948 <vfprintf+0x5ec>
    1926:	00 ff       	sbrs	r16, 0
    1928:	06 c0       	rjmp	.+12     	; 0x1936 <vfprintf+0x5da>
    192a:	1c 2d       	mov	r17, r12
    192c:	d5 14       	cp	r13, r5
    192e:	80 f4       	brcc	.+32     	; 0x1950 <vfprintf+0x5f4>
    1930:	15 0d       	add	r17, r5
    1932:	1d 19       	sub	r17, r13
    1934:	0d c0       	rjmp	.+26     	; 0x1950 <vfprintf+0x5f4>
    1936:	d5 14       	cp	r13, r5
    1938:	58 f4       	brcc	.+22     	; 0x1950 <vfprintf+0x5f4>
    193a:	b7 01       	movw	r22, r14
    193c:	80 e2       	ldi	r24, 0x20	; 32
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    1944:	d3 94       	inc	r13
    1946:	f7 cf       	rjmp	.-18     	; 0x1936 <vfprintf+0x5da>
    1948:	d5 14       	cp	r13, r5
    194a:	10 f4       	brcc	.+4      	; 0x1950 <vfprintf+0x5f4>
    194c:	5d 18       	sub	r5, r13
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <vfprintf+0x5f6>
    1950:	51 2c       	mov	r5, r1
    1952:	04 ff       	sbrs	r16, 4
    1954:	10 c0       	rjmp	.+32     	; 0x1976 <vfprintf+0x61a>
    1956:	b7 01       	movw	r22, r14
    1958:	80 e3       	ldi	r24, 0x30	; 48
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    1960:	02 ff       	sbrs	r16, 2
    1962:	17 c0       	rjmp	.+46     	; 0x1992 <vfprintf+0x636>
    1964:	01 fd       	sbrc	r16, 1
    1966:	03 c0       	rjmp	.+6      	; 0x196e <vfprintf+0x612>
    1968:	88 e7       	ldi	r24, 0x78	; 120
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <vfprintf+0x616>
    196e:	88 e5       	ldi	r24, 0x58	; 88
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	b7 01       	movw	r22, r14
    1974:	0c c0       	rjmp	.+24     	; 0x198e <vfprintf+0x632>
    1976:	80 2f       	mov	r24, r16
    1978:	86 78       	andi	r24, 0x86	; 134
    197a:	59 f0       	breq	.+22     	; 0x1992 <vfprintf+0x636>
    197c:	01 ff       	sbrs	r16, 1
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <vfprintf+0x628>
    1980:	8b e2       	ldi	r24, 0x2B	; 43
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <vfprintf+0x62a>
    1984:	80 e2       	ldi	r24, 0x20	; 32
    1986:	07 fd       	sbrc	r16, 7
    1988:	8d e2       	ldi	r24, 0x2D	; 45
    198a:	b7 01       	movw	r22, r14
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    1992:	c1 16       	cp	r12, r17
    1994:	38 f4       	brcc	.+14     	; 0x19a4 <vfprintf+0x648>
    1996:	b7 01       	movw	r22, r14
    1998:	80 e3       	ldi	r24, 0x30	; 48
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    19a0:	11 50       	subi	r17, 0x01	; 1
    19a2:	f7 cf       	rjmp	.-18     	; 0x1992 <vfprintf+0x636>
    19a4:	ca 94       	dec	r12
    19a6:	f3 01       	movw	r30, r6
    19a8:	ec 0d       	add	r30, r12
    19aa:	f1 1d       	adc	r31, r1
    19ac:	80 81       	ld	r24, Z
    19ae:	b7 01       	movw	r22, r14
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    19b6:	c1 10       	cpse	r12, r1
    19b8:	f5 cf       	rjmp	.-22     	; 0x19a4 <vfprintf+0x648>
    19ba:	15 c0       	rjmp	.+42     	; 0x19e6 <vfprintf+0x68a>
    19bc:	f4 e0       	ldi	r31, 0x04	; 4
    19be:	f5 15       	cp	r31, r5
    19c0:	60 f5       	brcc	.+88     	; 0x1a1a <vfprintf+0x6be>
    19c2:	84 e0       	ldi	r24, 0x04	; 4
    19c4:	58 1a       	sub	r5, r24
    19c6:	93 fe       	sbrs	r9, 3
    19c8:	1f c0       	rjmp	.+62     	; 0x1a08 <vfprintf+0x6ac>
    19ca:	01 11       	cpse	r16, r1
    19cc:	27 c0       	rjmp	.+78     	; 0x1a1c <vfprintf+0x6c0>
    19ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    19d0:	23 ff       	sbrs	r18, 3
    19d2:	2a c0       	rjmp	.+84     	; 0x1a28 <vfprintf+0x6cc>
    19d4:	08 e7       	ldi	r16, 0x78	; 120
    19d6:	10 e0       	ldi	r17, 0x00	; 0
    19d8:	39 2d       	mov	r19, r9
    19da:	30 71       	andi	r19, 0x10	; 16
    19dc:	93 2e       	mov	r9, r19
    19de:	f8 01       	movw	r30, r16
    19e0:	84 91       	lpm	r24, Z
    19e2:	81 11       	cpse	r24, r1
    19e4:	24 c0       	rjmp	.+72     	; 0x1a2e <vfprintf+0x6d2>
    19e6:	55 20       	and	r5, r5
    19e8:	09 f4       	brne	.+2      	; 0x19ec <vfprintf+0x690>
    19ea:	e4 cc       	rjmp	.-1592   	; 0x13b4 <vfprintf+0x58>
    19ec:	b7 01       	movw	r22, r14
    19ee:	80 e2       	ldi	r24, 0x20	; 32
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    19f6:	5a 94       	dec	r5
    19f8:	f6 cf       	rjmp	.-20     	; 0x19e6 <vfprintf+0x68a>
    19fa:	f7 01       	movw	r30, r14
    19fc:	86 81       	ldd	r24, Z+6	; 0x06
    19fe:	97 81       	ldd	r25, Z+7	; 0x07
    1a00:	26 c0       	rjmp	.+76     	; 0x1a4e <vfprintf+0x6f2>
    1a02:	8f ef       	ldi	r24, 0xFF	; 255
    1a04:	9f ef       	ldi	r25, 0xFF	; 255
    1a06:	23 c0       	rjmp	.+70     	; 0x1a4e <vfprintf+0x6f2>
    1a08:	b7 01       	movw	r22, r14
    1a0a:	80 e2       	ldi	r24, 0x20	; 32
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    1a12:	5a 94       	dec	r5
    1a14:	51 10       	cpse	r5, r1
    1a16:	f8 cf       	rjmp	.-16     	; 0x1a08 <vfprintf+0x6ac>
    1a18:	d8 cf       	rjmp	.-80     	; 0x19ca <vfprintf+0x66e>
    1a1a:	51 2c       	mov	r5, r1
    1a1c:	b7 01       	movw	r22, r14
    1a1e:	80 2f       	mov	r24, r16
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    1a26:	d3 cf       	rjmp	.-90     	; 0x19ce <vfprintf+0x672>
    1a28:	0c e7       	ldi	r16, 0x7C	; 124
    1a2a:	10 e0       	ldi	r17, 0x00	; 0
    1a2c:	d5 cf       	rjmp	.-86     	; 0x19d8 <vfprintf+0x67c>
    1a2e:	91 10       	cpse	r9, r1
    1a30:	80 52       	subi	r24, 0x20	; 32
    1a32:	b7 01       	movw	r22, r14
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <fputc>
    1a3a:	0f 5f       	subi	r16, 0xFF	; 255
    1a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3e:	cf cf       	rjmp	.-98     	; 0x19de <vfprintf+0x682>
    1a40:	23 e0       	ldi	r18, 0x03	; 3
    1a42:	25 15       	cp	r18, r5
    1a44:	10 f4       	brcc	.+4      	; 0x1a4a <vfprintf+0x6ee>
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	bd cf       	rjmp	.-134    	; 0x19c4 <vfprintf+0x668>
    1a4a:	51 2c       	mov	r5, r1
    1a4c:	c0 cf       	rjmp	.-128    	; 0x19ce <vfprintf+0x672>
    1a4e:	60 96       	adiw	r28, 0x10	; 16
    1a50:	e2 e1       	ldi	r30, 0x12	; 18
    1a52:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__>

00001a56 <__udivmodsi4>:
    1a56:	a1 e2       	ldi	r26, 0x21	; 33
    1a58:	1a 2e       	mov	r1, r26
    1a5a:	aa 1b       	sub	r26, r26
    1a5c:	bb 1b       	sub	r27, r27
    1a5e:	fd 01       	movw	r30, r26
    1a60:	0d c0       	rjmp	.+26     	; 0x1a7c <__udivmodsi4_ep>

00001a62 <__udivmodsi4_loop>:
    1a62:	aa 1f       	adc	r26, r26
    1a64:	bb 1f       	adc	r27, r27
    1a66:	ee 1f       	adc	r30, r30
    1a68:	ff 1f       	adc	r31, r31
    1a6a:	a2 17       	cp	r26, r18
    1a6c:	b3 07       	cpc	r27, r19
    1a6e:	e4 07       	cpc	r30, r20
    1a70:	f5 07       	cpc	r31, r21
    1a72:	20 f0       	brcs	.+8      	; 0x1a7c <__udivmodsi4_ep>
    1a74:	a2 1b       	sub	r26, r18
    1a76:	b3 0b       	sbc	r27, r19
    1a78:	e4 0b       	sbc	r30, r20
    1a7a:	f5 0b       	sbc	r31, r21

00001a7c <__udivmodsi4_ep>:
    1a7c:	66 1f       	adc	r22, r22
    1a7e:	77 1f       	adc	r23, r23
    1a80:	88 1f       	adc	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	1a 94       	dec	r1
    1a86:	69 f7       	brne	.-38     	; 0x1a62 <__udivmodsi4_loop>
    1a88:	60 95       	com	r22
    1a8a:	70 95       	com	r23
    1a8c:	80 95       	com	r24
    1a8e:	90 95       	com	r25
    1a90:	9b 01       	movw	r18, r22
    1a92:	ac 01       	movw	r20, r24
    1a94:	bd 01       	movw	r22, r26
    1a96:	cf 01       	movw	r24, r30
    1a98:	08 95       	ret

00001a9a <__tablejump2__>:
    1a9a:	ee 0f       	add	r30, r30
    1a9c:	ff 1f       	adc	r31, r31
    1a9e:	05 90       	lpm	r0, Z+
    1aa0:	f4 91       	lpm	r31, Z
    1aa2:	e0 2d       	mov	r30, r0
    1aa4:	09 94       	ijmp

00001aa6 <__prologue_saves__>:
    1aa6:	2f 92       	push	r2
    1aa8:	3f 92       	push	r3
    1aaa:	4f 92       	push	r4
    1aac:	5f 92       	push	r5
    1aae:	6f 92       	push	r6
    1ab0:	7f 92       	push	r7
    1ab2:	8f 92       	push	r8
    1ab4:	9f 92       	push	r9
    1ab6:	af 92       	push	r10
    1ab8:	bf 92       	push	r11
    1aba:	cf 92       	push	r12
    1abc:	df 92       	push	r13
    1abe:	ef 92       	push	r14
    1ac0:	ff 92       	push	r15
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	ca 1b       	sub	r28, r26
    1ad0:	db 0b       	sbc	r29, r27
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	09 94       	ijmp

00001ade <__epilogue_restores__>:
    1ade:	2a 88       	ldd	r2, Y+18	; 0x12
    1ae0:	39 88       	ldd	r3, Y+17	; 0x11
    1ae2:	48 88       	ldd	r4, Y+16	; 0x10
    1ae4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ae6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ae8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aea:	8c 84       	ldd	r8, Y+12	; 0x0c
    1aec:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aee:	aa 84       	ldd	r10, Y+10	; 0x0a
    1af0:	b9 84       	ldd	r11, Y+9	; 0x09
    1af2:	c8 84       	ldd	r12, Y+8	; 0x08
    1af4:	df 80       	ldd	r13, Y+7	; 0x07
    1af6:	ee 80       	ldd	r14, Y+6	; 0x06
    1af8:	fd 80       	ldd	r15, Y+5	; 0x05
    1afa:	0c 81       	ldd	r16, Y+4	; 0x04
    1afc:	1b 81       	ldd	r17, Y+3	; 0x03
    1afe:	aa 81       	ldd	r26, Y+2	; 0x02
    1b00:	b9 81       	ldd	r27, Y+1	; 0x01
    1b02:	ce 0f       	add	r28, r30
    1b04:	d1 1d       	adc	r29, r1
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	ed 01       	movw	r28, r26
    1b12:	08 95       	ret

00001b14 <__ftoa_engine>:
    1b14:	28 30       	cpi	r18, 0x08	; 8
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <__ftoa_engine+0x6>
    1b18:	27 e0       	ldi	r18, 0x07	; 7
    1b1a:	33 27       	eor	r19, r19
    1b1c:	da 01       	movw	r26, r20
    1b1e:	99 0f       	add	r25, r25
    1b20:	31 1d       	adc	r19, r1
    1b22:	87 fd       	sbrc	r24, 7
    1b24:	91 60       	ori	r25, 0x01	; 1
    1b26:	00 96       	adiw	r24, 0x00	; 0
    1b28:	61 05       	cpc	r22, r1
    1b2a:	71 05       	cpc	r23, r1
    1b2c:	39 f4       	brne	.+14     	; 0x1b3c <__ftoa_engine+0x28>
    1b2e:	32 60       	ori	r19, 0x02	; 2
    1b30:	2e 5f       	subi	r18, 0xFE	; 254
    1b32:	3d 93       	st	X+, r19
    1b34:	30 e3       	ldi	r19, 0x30	; 48
    1b36:	2a 95       	dec	r18
    1b38:	e1 f7       	brne	.-8      	; 0x1b32 <__ftoa_engine+0x1e>
    1b3a:	08 95       	ret
    1b3c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b3e:	30 f0       	brcs	.+12     	; 0x1b4c <__ftoa_engine+0x38>
    1b40:	80 38       	cpi	r24, 0x80	; 128
    1b42:	71 05       	cpc	r23, r1
    1b44:	61 05       	cpc	r22, r1
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <__ftoa_engine+0x36>
    1b48:	3c 5f       	subi	r19, 0xFC	; 252
    1b4a:	3c 5f       	subi	r19, 0xFC	; 252
    1b4c:	3d 93       	st	X+, r19
    1b4e:	91 30       	cpi	r25, 0x01	; 1
    1b50:	08 f0       	brcs	.+2      	; 0x1b54 <__ftoa_engine+0x40>
    1b52:	80 68       	ori	r24, 0x80	; 128
    1b54:	91 1d       	adc	r25, r1
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	1f 93       	push	r17
    1b5c:	0f 93       	push	r16
    1b5e:	ff 92       	push	r15
    1b60:	ef 92       	push	r14
    1b62:	19 2f       	mov	r17, r25
    1b64:	98 7f       	andi	r25, 0xF8	; 248
    1b66:	96 95       	lsr	r25
    1b68:	e9 2f       	mov	r30, r25
    1b6a:	96 95       	lsr	r25
    1b6c:	96 95       	lsr	r25
    1b6e:	e9 0f       	add	r30, r25
    1b70:	ff 27       	eor	r31, r31
    1b72:	e6 52       	subi	r30, 0x26	; 38
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	99 27       	eor	r25, r25
    1b78:	33 27       	eor	r19, r19
    1b7a:	ee 24       	eor	r14, r14
    1b7c:	ff 24       	eor	r15, r15
    1b7e:	a7 01       	movw	r20, r14
    1b80:	e7 01       	movw	r28, r14
    1b82:	05 90       	lpm	r0, Z+
    1b84:	08 94       	sec
    1b86:	07 94       	ror	r0
    1b88:	28 f4       	brcc	.+10     	; 0x1b94 <__ftoa_engine+0x80>
    1b8a:	36 0f       	add	r19, r22
    1b8c:	e7 1e       	adc	r14, r23
    1b8e:	f8 1e       	adc	r15, r24
    1b90:	49 1f       	adc	r20, r25
    1b92:	51 1d       	adc	r21, r1
    1b94:	66 0f       	add	r22, r22
    1b96:	77 1f       	adc	r23, r23
    1b98:	88 1f       	adc	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	06 94       	lsr	r0
    1b9e:	a1 f7       	brne	.-24     	; 0x1b88 <__ftoa_engine+0x74>
    1ba0:	05 90       	lpm	r0, Z+
    1ba2:	07 94       	ror	r0
    1ba4:	28 f4       	brcc	.+10     	; 0x1bb0 <__ftoa_engine+0x9c>
    1ba6:	e7 0e       	add	r14, r23
    1ba8:	f8 1e       	adc	r15, r24
    1baa:	49 1f       	adc	r20, r25
    1bac:	56 1f       	adc	r21, r22
    1bae:	c1 1d       	adc	r28, r1
    1bb0:	77 0f       	add	r23, r23
    1bb2:	88 1f       	adc	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	66 1f       	adc	r22, r22
    1bb8:	06 94       	lsr	r0
    1bba:	a1 f7       	brne	.-24     	; 0x1ba4 <__ftoa_engine+0x90>
    1bbc:	05 90       	lpm	r0, Z+
    1bbe:	07 94       	ror	r0
    1bc0:	28 f4       	brcc	.+10     	; 0x1bcc <__ftoa_engine+0xb8>
    1bc2:	f8 0e       	add	r15, r24
    1bc4:	49 1f       	adc	r20, r25
    1bc6:	56 1f       	adc	r21, r22
    1bc8:	c7 1f       	adc	r28, r23
    1bca:	d1 1d       	adc	r29, r1
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	66 1f       	adc	r22, r22
    1bd2:	77 1f       	adc	r23, r23
    1bd4:	06 94       	lsr	r0
    1bd6:	a1 f7       	brne	.-24     	; 0x1bc0 <__ftoa_engine+0xac>
    1bd8:	05 90       	lpm	r0, Z+
    1bda:	07 94       	ror	r0
    1bdc:	20 f4       	brcc	.+8      	; 0x1be6 <__ftoa_engine+0xd2>
    1bde:	49 0f       	add	r20, r25
    1be0:	56 1f       	adc	r21, r22
    1be2:	c7 1f       	adc	r28, r23
    1be4:	d8 1f       	adc	r29, r24
    1be6:	99 0f       	add	r25, r25
    1be8:	66 1f       	adc	r22, r22
    1bea:	77 1f       	adc	r23, r23
    1bec:	88 1f       	adc	r24, r24
    1bee:	06 94       	lsr	r0
    1bf0:	a9 f7       	brne	.-22     	; 0x1bdc <__ftoa_engine+0xc8>
    1bf2:	84 91       	lpm	r24, Z
    1bf4:	10 95       	com	r17
    1bf6:	17 70       	andi	r17, 0x07	; 7
    1bf8:	41 f0       	breq	.+16     	; 0x1c0a <__ftoa_engine+0xf6>
    1bfa:	d6 95       	lsr	r29
    1bfc:	c7 95       	ror	r28
    1bfe:	57 95       	ror	r21
    1c00:	47 95       	ror	r20
    1c02:	f7 94       	ror	r15
    1c04:	e7 94       	ror	r14
    1c06:	1a 95       	dec	r17
    1c08:	c1 f7       	brne	.-16     	; 0x1bfa <__ftoa_engine+0xe6>
    1c0a:	e0 e8       	ldi	r30, 0x80	; 128
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	68 94       	set
    1c10:	15 90       	lpm	r1, Z+
    1c12:	15 91       	lpm	r17, Z+
    1c14:	35 91       	lpm	r19, Z+
    1c16:	65 91       	lpm	r22, Z+
    1c18:	95 91       	lpm	r25, Z+
    1c1a:	05 90       	lpm	r0, Z+
    1c1c:	7f e2       	ldi	r23, 0x2F	; 47
    1c1e:	73 95       	inc	r23
    1c20:	e1 18       	sub	r14, r1
    1c22:	f1 0a       	sbc	r15, r17
    1c24:	43 0b       	sbc	r20, r19
    1c26:	56 0b       	sbc	r21, r22
    1c28:	c9 0b       	sbc	r28, r25
    1c2a:	d0 09       	sbc	r29, r0
    1c2c:	c0 f7       	brcc	.-16     	; 0x1c1e <__ftoa_engine+0x10a>
    1c2e:	e1 0c       	add	r14, r1
    1c30:	f1 1e       	adc	r15, r17
    1c32:	43 1f       	adc	r20, r19
    1c34:	56 1f       	adc	r21, r22
    1c36:	c9 1f       	adc	r28, r25
    1c38:	d0 1d       	adc	r29, r0
    1c3a:	7e f4       	brtc	.+30     	; 0x1c5a <__ftoa_engine+0x146>
    1c3c:	70 33       	cpi	r23, 0x30	; 48
    1c3e:	11 f4       	brne	.+4      	; 0x1c44 <__ftoa_engine+0x130>
    1c40:	8a 95       	dec	r24
    1c42:	e6 cf       	rjmp	.-52     	; 0x1c10 <__ftoa_engine+0xfc>
    1c44:	e8 94       	clt
    1c46:	01 50       	subi	r16, 0x01	; 1
    1c48:	30 f0       	brcs	.+12     	; 0x1c56 <__ftoa_engine+0x142>
    1c4a:	08 0f       	add	r16, r24
    1c4c:	0a f4       	brpl	.+2      	; 0x1c50 <__ftoa_engine+0x13c>
    1c4e:	00 27       	eor	r16, r16
    1c50:	02 17       	cp	r16, r18
    1c52:	08 f4       	brcc	.+2      	; 0x1c56 <__ftoa_engine+0x142>
    1c54:	20 2f       	mov	r18, r16
    1c56:	23 95       	inc	r18
    1c58:	02 2f       	mov	r16, r18
    1c5a:	7a 33       	cpi	r23, 0x3A	; 58
    1c5c:	28 f0       	brcs	.+10     	; 0x1c68 <__ftoa_engine+0x154>
    1c5e:	79 e3       	ldi	r23, 0x39	; 57
    1c60:	7d 93       	st	X+, r23
    1c62:	2a 95       	dec	r18
    1c64:	e9 f7       	brne	.-6      	; 0x1c60 <__ftoa_engine+0x14c>
    1c66:	10 c0       	rjmp	.+32     	; 0x1c88 <__ftoa_engine+0x174>
    1c68:	7d 93       	st	X+, r23
    1c6a:	2a 95       	dec	r18
    1c6c:	89 f6       	brne	.-94     	; 0x1c10 <__ftoa_engine+0xfc>
    1c6e:	06 94       	lsr	r0
    1c70:	97 95       	ror	r25
    1c72:	67 95       	ror	r22
    1c74:	37 95       	ror	r19
    1c76:	17 95       	ror	r17
    1c78:	17 94       	ror	r1
    1c7a:	e1 18       	sub	r14, r1
    1c7c:	f1 0a       	sbc	r15, r17
    1c7e:	43 0b       	sbc	r20, r19
    1c80:	56 0b       	sbc	r21, r22
    1c82:	c9 0b       	sbc	r28, r25
    1c84:	d0 09       	sbc	r29, r0
    1c86:	98 f0       	brcs	.+38     	; 0x1cae <__ftoa_engine+0x19a>
    1c88:	23 95       	inc	r18
    1c8a:	7e 91       	ld	r23, -X
    1c8c:	73 95       	inc	r23
    1c8e:	7a 33       	cpi	r23, 0x3A	; 58
    1c90:	08 f0       	brcs	.+2      	; 0x1c94 <__ftoa_engine+0x180>
    1c92:	70 e3       	ldi	r23, 0x30	; 48
    1c94:	7c 93       	st	X, r23
    1c96:	20 13       	cpse	r18, r16
    1c98:	b8 f7       	brcc	.-18     	; 0x1c88 <__ftoa_engine+0x174>
    1c9a:	7e 91       	ld	r23, -X
    1c9c:	70 61       	ori	r23, 0x10	; 16
    1c9e:	7d 93       	st	X+, r23
    1ca0:	30 f0       	brcs	.+12     	; 0x1cae <__ftoa_engine+0x19a>
    1ca2:	83 95       	inc	r24
    1ca4:	71 e3       	ldi	r23, 0x31	; 49
    1ca6:	7d 93       	st	X+, r23
    1ca8:	70 e3       	ldi	r23, 0x30	; 48
    1caa:	2a 95       	dec	r18
    1cac:	e1 f7       	brne	.-8      	; 0x1ca6 <__ftoa_engine+0x192>
    1cae:	11 24       	eor	r1, r1
    1cb0:	ef 90       	pop	r14
    1cb2:	ff 90       	pop	r15
    1cb4:	0f 91       	pop	r16
    1cb6:	1f 91       	pop	r17
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	99 27       	eor	r25, r25
    1cbe:	87 fd       	sbrc	r24, 7
    1cc0:	90 95       	com	r25
    1cc2:	08 95       	ret

00001cc4 <strnlen_P>:
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	05 90       	lpm	r0, Z+
    1cc8:	61 50       	subi	r22, 0x01	; 1
    1cca:	70 40       	sbci	r23, 0x00	; 0
    1ccc:	01 10       	cpse	r0, r1
    1cce:	d8 f7       	brcc	.-10     	; 0x1cc6 <strnlen_P+0x2>
    1cd0:	80 95       	com	r24
    1cd2:	90 95       	com	r25
    1cd4:	8e 0f       	add	r24, r30
    1cd6:	9f 1f       	adc	r25, r31
    1cd8:	08 95       	ret

00001cda <strnlen>:
    1cda:	fc 01       	movw	r30, r24
    1cdc:	61 50       	subi	r22, 0x01	; 1
    1cde:	70 40       	sbci	r23, 0x00	; 0
    1ce0:	01 90       	ld	r0, Z+
    1ce2:	01 10       	cpse	r0, r1
    1ce4:	d8 f7       	brcc	.-10     	; 0x1cdc <strnlen+0x2>
    1ce6:	80 95       	com	r24
    1ce8:	90 95       	com	r25
    1cea:	8e 0f       	add	r24, r30
    1cec:	9f 1f       	adc	r25, r31
    1cee:	08 95       	ret

00001cf0 <fputc>:
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	fb 01       	movw	r30, r22
    1cfa:	23 81       	ldd	r18, Z+3	; 0x03
    1cfc:	21 fd       	sbrc	r18, 1
    1cfe:	03 c0       	rjmp	.+6      	; 0x1d06 <fputc+0x16>
    1d00:	8f ef       	ldi	r24, 0xFF	; 255
    1d02:	9f ef       	ldi	r25, 0xFF	; 255
    1d04:	2c c0       	rjmp	.+88     	; 0x1d5e <fputc+0x6e>
    1d06:	22 ff       	sbrs	r18, 2
    1d08:	16 c0       	rjmp	.+44     	; 0x1d36 <fputc+0x46>
    1d0a:	46 81       	ldd	r20, Z+6	; 0x06
    1d0c:	57 81       	ldd	r21, Z+7	; 0x07
    1d0e:	24 81       	ldd	r18, Z+4	; 0x04
    1d10:	35 81       	ldd	r19, Z+5	; 0x05
    1d12:	42 17       	cp	r20, r18
    1d14:	53 07       	cpc	r21, r19
    1d16:	44 f4       	brge	.+16     	; 0x1d28 <fputc+0x38>
    1d18:	a0 81       	ld	r26, Z
    1d1a:	b1 81       	ldd	r27, Z+1	; 0x01
    1d1c:	9d 01       	movw	r18, r26
    1d1e:	2f 5f       	subi	r18, 0xFF	; 255
    1d20:	3f 4f       	sbci	r19, 0xFF	; 255
    1d22:	31 83       	std	Z+1, r19	; 0x01
    1d24:	20 83       	st	Z, r18
    1d26:	8c 93       	st	X, r24
    1d28:	26 81       	ldd	r18, Z+6	; 0x06
    1d2a:	37 81       	ldd	r19, Z+7	; 0x07
    1d2c:	2f 5f       	subi	r18, 0xFF	; 255
    1d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d30:	37 83       	std	Z+7, r19	; 0x07
    1d32:	26 83       	std	Z+6, r18	; 0x06
    1d34:	14 c0       	rjmp	.+40     	; 0x1d5e <fputc+0x6e>
    1d36:	8b 01       	movw	r16, r22
    1d38:	ec 01       	movw	r28, r24
    1d3a:	fb 01       	movw	r30, r22
    1d3c:	00 84       	ldd	r0, Z+8	; 0x08
    1d3e:	f1 85       	ldd	r31, Z+9	; 0x09
    1d40:	e0 2d       	mov	r30, r0
    1d42:	09 95       	icall
    1d44:	89 2b       	or	r24, r25
    1d46:	e1 f6       	brne	.-72     	; 0x1d00 <fputc+0x10>
    1d48:	d8 01       	movw	r26, r16
    1d4a:	16 96       	adiw	r26, 0x06	; 6
    1d4c:	8d 91       	ld	r24, X+
    1d4e:	9c 91       	ld	r25, X
    1d50:	17 97       	sbiw	r26, 0x07	; 7
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	17 96       	adiw	r26, 0x07	; 7
    1d56:	9c 93       	st	X, r25
    1d58:	8e 93       	st	-X, r24
    1d5a:	16 97       	sbiw	r26, 0x06	; 6
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	08 95       	ret

00001d68 <vprintf>:
    1d68:	ab 01       	movw	r20, r22
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__iob+0x2>
    1d70:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__iob+0x3>
    1d74:	0e 94 ae 09 	call	0x135c	; 0x135c <vfprintf>
    1d78:	08 95       	ret

00001d7a <__ultoa_invert>:
    1d7a:	fa 01       	movw	r30, r20
    1d7c:	aa 27       	eor	r26, r26
    1d7e:	28 30       	cpi	r18, 0x08	; 8
    1d80:	51 f1       	breq	.+84     	; 0x1dd6 <__ultoa_invert+0x5c>
    1d82:	20 31       	cpi	r18, 0x10	; 16
    1d84:	81 f1       	breq	.+96     	; 0x1de6 <__ultoa_invert+0x6c>
    1d86:	e8 94       	clt
    1d88:	6f 93       	push	r22
    1d8a:	6e 7f       	andi	r22, 0xFE	; 254
    1d8c:	6e 5f       	subi	r22, 0xFE	; 254
    1d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d90:	8f 4f       	sbci	r24, 0xFF	; 255
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	af 4f       	sbci	r26, 0xFF	; 255
    1d96:	b1 e0       	ldi	r27, 0x01	; 1
    1d98:	3e d0       	rcall	.+124    	; 0x1e16 <__ultoa_invert+0x9c>
    1d9a:	b4 e0       	ldi	r27, 0x04	; 4
    1d9c:	3c d0       	rcall	.+120    	; 0x1e16 <__ultoa_invert+0x9c>
    1d9e:	67 0f       	add	r22, r23
    1da0:	78 1f       	adc	r23, r24
    1da2:	89 1f       	adc	r24, r25
    1da4:	9a 1f       	adc	r25, r26
    1da6:	a1 1d       	adc	r26, r1
    1da8:	68 0f       	add	r22, r24
    1daa:	79 1f       	adc	r23, r25
    1dac:	8a 1f       	adc	r24, r26
    1dae:	91 1d       	adc	r25, r1
    1db0:	a1 1d       	adc	r26, r1
    1db2:	6a 0f       	add	r22, r26
    1db4:	71 1d       	adc	r23, r1
    1db6:	81 1d       	adc	r24, r1
    1db8:	91 1d       	adc	r25, r1
    1dba:	a1 1d       	adc	r26, r1
    1dbc:	20 d0       	rcall	.+64     	; 0x1dfe <__ultoa_invert+0x84>
    1dbe:	09 f4       	brne	.+2      	; 0x1dc2 <__ultoa_invert+0x48>
    1dc0:	68 94       	set
    1dc2:	3f 91       	pop	r19
    1dc4:	2a e0       	ldi	r18, 0x0A	; 10
    1dc6:	26 9f       	mul	r18, r22
    1dc8:	11 24       	eor	r1, r1
    1dca:	30 19       	sub	r19, r0
    1dcc:	30 5d       	subi	r19, 0xD0	; 208
    1dce:	31 93       	st	Z+, r19
    1dd0:	de f6       	brtc	.-74     	; 0x1d88 <__ultoa_invert+0xe>
    1dd2:	cf 01       	movw	r24, r30
    1dd4:	08 95       	ret
    1dd6:	46 2f       	mov	r20, r22
    1dd8:	47 70       	andi	r20, 0x07	; 7
    1dda:	40 5d       	subi	r20, 0xD0	; 208
    1ddc:	41 93       	st	Z+, r20
    1dde:	b3 e0       	ldi	r27, 0x03	; 3
    1de0:	0f d0       	rcall	.+30     	; 0x1e00 <__ultoa_invert+0x86>
    1de2:	c9 f7       	brne	.-14     	; 0x1dd6 <__ultoa_invert+0x5c>
    1de4:	f6 cf       	rjmp	.-20     	; 0x1dd2 <__ultoa_invert+0x58>
    1de6:	46 2f       	mov	r20, r22
    1de8:	4f 70       	andi	r20, 0x0F	; 15
    1dea:	40 5d       	subi	r20, 0xD0	; 208
    1dec:	4a 33       	cpi	r20, 0x3A	; 58
    1dee:	18 f0       	brcs	.+6      	; 0x1df6 <__ultoa_invert+0x7c>
    1df0:	49 5d       	subi	r20, 0xD9	; 217
    1df2:	31 fd       	sbrc	r19, 1
    1df4:	40 52       	subi	r20, 0x20	; 32
    1df6:	41 93       	st	Z+, r20
    1df8:	02 d0       	rcall	.+4      	; 0x1dfe <__ultoa_invert+0x84>
    1dfa:	a9 f7       	brne	.-22     	; 0x1de6 <__ultoa_invert+0x6c>
    1dfc:	ea cf       	rjmp	.-44     	; 0x1dd2 <__ultoa_invert+0x58>
    1dfe:	b4 e0       	ldi	r27, 0x04	; 4
    1e00:	a6 95       	lsr	r26
    1e02:	97 95       	ror	r25
    1e04:	87 95       	ror	r24
    1e06:	77 95       	ror	r23
    1e08:	67 95       	ror	r22
    1e0a:	ba 95       	dec	r27
    1e0c:	c9 f7       	brne	.-14     	; 0x1e00 <__ultoa_invert+0x86>
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	61 05       	cpc	r22, r1
    1e12:	71 05       	cpc	r23, r1
    1e14:	08 95       	ret
    1e16:	9b 01       	movw	r18, r22
    1e18:	ac 01       	movw	r20, r24
    1e1a:	0a 2e       	mov	r0, r26
    1e1c:	06 94       	lsr	r0
    1e1e:	57 95       	ror	r21
    1e20:	47 95       	ror	r20
    1e22:	37 95       	ror	r19
    1e24:	27 95       	ror	r18
    1e26:	ba 95       	dec	r27
    1e28:	c9 f7       	brne	.-14     	; 0x1e1c <__ultoa_invert+0xa2>
    1e2a:	62 0f       	add	r22, r18
    1e2c:	73 1f       	adc	r23, r19
    1e2e:	84 1f       	adc	r24, r20
    1e30:	95 1f       	adc	r25, r21
    1e32:	a0 1d       	adc	r26, r0
    1e34:	08 95       	ret

00001e36 <_exit>:
    1e36:	f8 94       	cli

00001e38 <__stop_program>:
    1e38:	ff cf       	rjmp	.-2      	; 0x1e38 <__stop_program>
