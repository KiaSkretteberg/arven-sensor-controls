
ArvenSensorControls.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000c9a  00000d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080013c  0080013c  00000d6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec7  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2d  00000000  00000000  00001da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000790  00000000  00000000  000027d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00002f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000711  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000491  00000000  00000000  00003839  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003cca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_11>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	65 00       	.word	0x0065	; ????
  6a:	6b 00       	.word	0x006b	; ????
  6c:	71 00       	.word	0x0071	; ????
  6e:	77 00       	.word	0x0077	; ????
  70:	7d 00       	.word	0x007d	; ????
  72:	83 00       	.word	0x0083	; ????
  74:	89 00       	.word	0x0089	; ????
  76:	8f 00       	.word	0x008f	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ea e9       	ldi	r30, 0x9A	; 154
  8c:	fc e0       	ldi	r31, 0x0C	; 12
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	ac 33       	cpi	r26, 0x3C	; 60
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	ac e3       	ldi	r26, 0x3C	; 60
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	ae 33       	cpi	r26, 0x3E	; 62
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 c0 01 	call	0x380	; 0x380 <main>
  ae:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <AtoD_SetChannel>:
  ADCSRA = 0b11100111;  // turn on AD, prescale 128, ADATE needs to be on? (28.9.2)
}

void AtoD_SetChannel (AtoD_Channel chan)
{
  switch (chan) 
  b6:	48 2f       	mov	r20, r24
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	48 30       	cpi	r20, 0x08	; 8
  bc:	51 05       	cpc	r21, r1
  be:	a8 f5       	brcc	.+106    	; 0x12a <AtoD_SetChannel+0x74>
  c0:	fa 01       	movw	r30, r20
  c2:	ec 5c       	subi	r30, 0xCC	; 204
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__tablejump2__>
  {
    case AtoD_Channel_0:
      DIDR0 |= 0b00000001;  // kill digital input for channel 0
  ca:	ee e7       	ldi	r30, 0x7E	; 126
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	90 81       	ld	r25, Z
  d0:	91 60       	ori	r25, 0x01	; 1
  d2:	90 83       	st	Z, r25
      break;
  d4:	2c c0       	rjmp	.+88     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_1:
      DIDR0 |= 0b00000010;  // kill digital input for channel 0
  d6:	ee e7       	ldi	r30, 0x7E	; 126
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	90 81       	ld	r25, Z
  dc:	92 60       	ori	r25, 0x02	; 2
  de:	90 83       	st	Z, r25
      break;
  e0:	26 c0       	rjmp	.+76     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_2:
      DIDR0 |= 0b00000100;  // kill digital input for channel 0
  e2:	ee e7       	ldi	r30, 0x7E	; 126
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	94 60       	ori	r25, 0x04	; 4
  ea:	90 83       	st	Z, r25
      break;
  ec:	20 c0       	rjmp	.+64     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_3:
      DIDR0 |= 0b00001000;  // kill digital input for channel 0
  ee:	ee e7       	ldi	r30, 0x7E	; 126
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	98 60       	ori	r25, 0x08	; 8
  f6:	90 83       	st	Z, r25
      break;
  f8:	1a c0       	rjmp	.+52     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_4:
      DIDR0 |= 0b00010000;  // kill digital input for channel 0
  fa:	ee e7       	ldi	r30, 0x7E	; 126
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	90 61       	ori	r25, 0x10	; 16
 102:	90 83       	st	Z, r25
      break;
 104:	14 c0       	rjmp	.+40     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_5:
      DIDR0 |= 0b00100000;  // kill digital input for channel 0
 106:	ee e7       	ldi	r30, 0x7E	; 126
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	90 81       	ld	r25, Z
 10c:	90 62       	ori	r25, 0x20	; 32
 10e:	90 83       	st	Z, r25
      break;
 110:	0e c0       	rjmp	.+28     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_6:
      DIDR0 |= 0b01000000;  // kill digital input for channel 0
 112:	ee e7       	ldi	r30, 0x7E	; 126
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	90 81       	ld	r25, Z
 118:	90 64       	ori	r25, 0x40	; 64
 11a:	90 83       	st	Z, r25
      break;
 11c:	08 c0       	rjmp	.+16     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_7:
      DIDR0 |= 0b10000000;  // kill digital input for channel 0
 11e:	ee e7       	ldi	r30, 0x7E	; 126
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	90 81       	ld	r25, Z
 124:	90 68       	ori	r25, 0x80	; 128
 126:	90 83       	st	Z, r25
      break;
 128:	02 c0       	rjmp	.+4      	; 0x12e <AtoD_SetChannel+0x78>
    default:               // other cases don't require digital inputs 
      DIDR0 = 0b00000000;  // all A/D channels as digital inputs
 12a:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  }      
  
  // channel selection
  ADMUX &= 0b11110000;  // clear channel selection
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	90 81       	ld	r25, Z
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	90 83       	st	Z, r25
  ADMUX |= chan;        // set back channel selection bits
 138:	90 81       	ld	r25, Z
 13a:	89 2b       	or	r24, r25
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <AtoD_Init>:
#include <stdio.h>
#include "atd.h"

void AtoD_Init (AtoD_Channel chan)
{
  PRR &= ~(1 << PRADC); // turn on A/D module in power reduction register
 140:	e4 e6       	ldi	r30, 0x64	; 100
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	90 81       	ld	r25, Z
 146:	9e 7f       	andi	r25, 0xFE	; 254
 148:	90 83       	st	Z, r25
  
  ADMUX = 0b00000000;   // Internal Vref off, right-aligned, ADC0 (28.9.1)  
 14a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  ADCSRB = 0b00000000;  // default, no comparator, free running mode    
 14e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  
  // use support function to set channel
  AtoD_SetChannel(chan);
 152:	0e 94 5b 00 	call	0xb6	; 0xb6 <AtoD_SetChannel>
  
  ADCSRA = 0b11100111;  // turn on AD, prescale 128, ADATE needs to be on? (28.9.2)
 156:	87 ee       	ldi	r24, 0xE7	; 231
 158:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 15c:	08 95       	ret

0000015e <SCI0_Init>:
#include <avr/io.h>
#include <stdio.h>
#include "sci.h"

int SCI0_Init (unsigned long ulBus, unsigned long ulBAUD, int bRXInt)
{
 15e:	cf 92       	push	r12
 160:	df 92       	push	r13
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
  // determine the BAUD rate divisor required
  unsigned int iReg = (unsigned int)((((ulBus * 10 / 16) / ulBAUD) + 5) / 10) - 1;
 16a:	6b 01       	movw	r12, r22
 16c:	7c 01       	movw	r14, r24
 16e:	cc 0c       	add	r12, r12
 170:	dd 1c       	adc	r13, r13
 172:	ee 1c       	adc	r14, r14
 174:	ff 1c       	adc	r15, r15
 176:	d7 01       	movw	r26, r14
 178:	c6 01       	movw	r24, r12
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	aa 1f       	adc	r26, r26
 180:	bb 1f       	adc	r27, r27
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	aa 1f       	adc	r26, r26
 188:	bb 1f       	adc	r27, r27
 18a:	8c 0d       	add	r24, r12
 18c:	9d 1d       	adc	r25, r13
 18e:	ae 1d       	adc	r26, r14
 190:	bf 1d       	adc	r27, r15
 192:	bc 01       	movw	r22, r24
 194:	cd 01       	movw	r24, r26
 196:	68 94       	set
 198:	13 f8       	bld	r1, 3
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	77 95       	ror	r23
 1a0:	67 95       	ror	r22
 1a2:	16 94       	lsr	r1
 1a4:	d1 f7       	brne	.-12     	; 0x19a <SCI0_Init+0x3c>
 1a6:	0e 94 39 03 	call	0x672	; 0x672 <__udivmodsi4>
 1aa:	ca 01       	movw	r24, r20
 1ac:	b9 01       	movw	r22, r18
 1ae:	6b 5f       	subi	r22, 0xFB	; 251
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255
 1b2:	8f 4f       	sbci	r24, 0xFF	; 255
 1b4:	9f 4f       	sbci	r25, 0xFF	; 255
 1b6:	2a e0       	ldi	r18, 0x0A	; 10
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	0e 94 39 03 	call	0x672	; 0x672 <__udivmodsi4>
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	31 09       	sbc	r19, r1

  // won't fit in register
  if (iReg > 0b111111111111u)
 1c6:	21 15       	cp	r18, r1
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	38 07       	cpc	r19, r24
 1cc:	c8 f4       	brcc	.+50     	; 0x200 <SCI0_Init+0xa2>
    return -1;

  // start code will power off all modules...
  // ensure power is on : USART
  PRR &= 0b11111101;
 1ce:	e4 e6       	ldi	r30, 0x64	; 100
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	8d 7f       	andi	r24, 0xFD	; 253
 1d6:	80 83       	st	Z, r24

  // set BAUD rate
  UBRR0H = iReg >> 8;
 1d8:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UBRR0L = (unsigned char)iReg;
 1dc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

  // enable TX and RX
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1e0:	88 e1       	ldi	r24, 0x18	; 24
 1e2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  
  // async, no parity, 1 stop bit, 8 bit
  UCSR0C =  0b00000110;
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  
  // optional interrupt on receiver
  if (bRXInt)
 1ec:	01 2b       	or	r16, r17
 1ee:	59 f0       	breq	.+22     	; 0x206 <SCI0_Init+0xa8>
    UCSR0B |= (1 << RXCIE0);
 1f0:	e1 ec       	ldi	r30, 0xC1	; 193
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	80 68       	ori	r24, 0x80	; 128
 1f8:	80 83       	st	Z, r24

  // no error
  return 0;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <SCI0_Init+0xac>
  // determine the BAUD rate divisor required
  unsigned int iReg = (unsigned int)((((ulBus * 10 / 16) / ulBAUD) + 5) / 10) - 1;

  // won't fit in register
  if (iReg > 0b111111111111u)
    return -1;
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	9f ef       	ldi	r25, 0xFF	; 255
 204:	02 c0       	rjmp	.+4      	; 0x20a <SCI0_Init+0xac>
  // optional interrupt on receiver
  if (bRXInt)
    UCSR0B |= (1 << RXCIE0);

  // no error
  return 0;
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
}
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	08 95       	ret

00000218 <SCI0_BSend>:

void SCI0_BSend (unsigned char data)
{
  // transmit buffer empty?
  while (!(UCSR0A & (1<<UDRE0)))
 218:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 21c:	95 ff       	sbrs	r25, 5
 21e:	fc cf       	rjmp	.-8      	; 0x218 <SCI0_BSend>
  ;

  // transmit complete must be cleared before send in polling mode
  if (UCSR0A & (1<<TXC0))
 220:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 224:	96 ff       	sbrs	r25, 6
 226:	03 c0       	rjmp	.+6      	; 0x22e <SCI0_BSend+0x16>
    UCSR0A = (1<<TXC0);
 228:	90 e4       	ldi	r25, 0x40	; 64
 22a:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

  // free to send data
  UDR0 = data;
 22e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 232:	08 95       	ret

00000234 <SCI0_TxString>:
  if (tl)
    SCI0_TxString ("\r\n");
}

void SCI0_TxString (char * buff)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ec 01       	movw	r28, r24
  while (*buff)
 23a:	03 c0       	rjmp	.+6      	; 0x242 <SCI0_TxString+0xe>
  {
    SCI0_BSend(*buff);
 23c:	0e 94 0c 01 	call	0x218	; 0x218 <SCI0_BSend>
    ++buff;
 240:	21 96       	adiw	r28, 0x01	; 1
    SCI0_TxString ("\r\n");
}

void SCI0_TxString (char * buff)
{
  while (*buff)
 242:	88 81       	ld	r24, Y
 244:	81 11       	cpse	r24, r1
 246:	fa cf       	rjmp	.-12     	; 0x23c <SCI0_TxString+0x8>
  {
    SCI0_BSend(*buff);
    ++buff;
  }
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <Timer_Init>:
void Timer_Init (Timer_Prescale pre, unsigned int uiInitialOffset)
{
	// start code will power off all modules...
	// ensure power is on : Timer 1
	// PRR on 328P, PRR0 on 328PB
	PRR &= ~(1 << PRTIM1);
 24e:	e4 e6       	ldi	r30, 0x64	; 100
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	90 81       	ld	r25, Z
 254:	97 7f       	andi	r25, 0xF7	; 247
 256:	90 83       	st	Z, r25

	// set prescale to requested rate
	TCCR1B = 0;		// noise canceler disabled, waveform generator normal
 258:	e1 e8       	ldi	r30, 0x81	; 129
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	10 82       	st	Z, r1
	TCCR1B |= pre;	// put back requested prescale bits
 25e:	90 81       	ld	r25, Z
 260:	89 2b       	or	r24, r25
 262:	80 83       	st	Z, r24
	
	// setup initial event for output compare 1 A
	OCR1A = TCNT1 + uiInitialOffset;
 264:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 268:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 26c:	68 0f       	add	r22, r24
 26e:	79 1f       	adc	r23, r25
 270:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 274:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	// setup interrupt for output compare
	// timer/counter 1, output compare A match interrupt enable
	TIMSK1 = 0b00000010;
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 27e:	08 95       	ret

00000280 <measure_gd03_voltage>:
#include <stdio.h>
#include "atd.h"
#include "sci.h"
#include "gd03.h"

void measure_gd03_voltage(void){
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	64 97       	sbiw	r28, 0x14	; 20
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
    unsigned char AD_low = ADCL; // must be read first
 2a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    unsigned char AD_high = ADCH;
 2a4:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    unsigned int atodval = (AD_low + AD_high * 256);
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	76 2f       	mov	r23, r22
 2ac:	66 27       	eor	r22, r22
 2ae:	8b 01       	movw	r16, r22
 2b0:	08 0f       	add	r16, r24
 2b2:	11 1d       	adc	r17, r1
    char buff[20];
    sprintf(buff,"\nATOD: %i", atodval);
 2b4:	1f 93       	push	r17
 2b6:	0f 93       	push	r16
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	9f 93       	push	r25
 2be:	8f 93       	push	r24
 2c0:	ce 01       	movw	r24, r28
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	7c 01       	movw	r14, r24
 2c6:	9f 93       	push	r25
 2c8:	8f 93       	push	r24
 2ca:	0e 94 61 03 	call	0x6c2	; 0x6c2 <sprintf>
    SCI0_TxString(buff);
 2ce:	c7 01       	movw	r24, r14
 2d0:	0e 94 1a 01 	call	0x234	; 0x234 <SCI0_TxString>
    float q = 5.0 / 1024.0; // 5 V ref, 10 bit atod
    sprintf(buff," Q: %f", q);
 2d4:	8b e3       	ldi	r24, 0x3B	; 59
 2d6:	8f 93       	push	r24
 2d8:	80 ea       	ldi	r24, 0xA0	; 160
 2da:	8f 93       	push	r24
 2dc:	1f 92       	push	r1
 2de:	1f 92       	push	r1
 2e0:	8a e0       	ldi	r24, 0x0A	; 10
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	9f 93       	push	r25
 2e6:	8f 93       	push	r24
 2e8:	ff 92       	push	r15
 2ea:	ef 92       	push	r14
 2ec:	0e 94 61 03 	call	0x6c2	; 0x6c2 <sprintf>
    SCI0_TxString(buff);
 2f0:	c7 01       	movw	r24, r14
 2f2:	0e 94 1a 01 	call	0x234	; 0x234 <SCI0_TxString>
    float voltage = atodval * q; // min val (resting) 0.73V
 2f6:	b8 01       	movw	r22, r16
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 15 02 	call	0x42a	; 0x42a <__floatunsisf>
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	40 ea       	ldi	r20, 0xA0	; 160
 306:	5b e3       	ldi	r21, 0x3B	; 59
 308:	0e 94 cc 02 	call	0x598	; 0x598 <__mulsf3>
 30c:	c6 2e       	mov	r12, r22
 30e:	d7 2e       	mov	r13, r23
 310:	08 2f       	mov	r16, r24
 312:	19 2f       	mov	r17, r25
    sprintf(buff," VOLT: %f\n", voltage);
 314:	9f 93       	push	r25
 316:	8f 93       	push	r24
 318:	7f 93       	push	r23
 31a:	6f 93       	push	r22
 31c:	81 e1       	ldi	r24, 0x11	; 17
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	9f 93       	push	r25
 322:	8f 93       	push	r24
 324:	ff 92       	push	r15
 326:	ef 92       	push	r14
 328:	0e 94 61 03 	call	0x6c2	; 0x6c2 <sprintf>
    SCI0_TxString(buff);				
 32c:	c7 01       	movw	r24, r14
 32e:	0e 94 1a 01 	call	0x234	; 0x234 <SCI0_TxString>
    if(voltage > 3)
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	f8 94       	cli
 336:	de bf       	out	0x3e, r29	; 62
 338:	0f be       	out	0x3f, r0	; 63
 33a:	cd bf       	out	0x3d, r28	; 61
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	40 e4       	ldi	r20, 0x40	; 64
 342:	50 e4       	ldi	r21, 0x40	; 64
 344:	6c 2d       	mov	r22, r12
 346:	7d 2d       	mov	r23, r13
 348:	80 2f       	mov	r24, r16
 34a:	91 2f       	mov	r25, r17
 34c:	0e 94 c7 02 	call	0x58e	; 0x58e <__gesf2>
 350:	18 16       	cp	r1, r24
 352:	24 f4       	brge	.+8      	; 0x35c <measure_gd03_voltage+0xdc>
    {
        PORTD |= 0b10000000; // turn it on
 354:	8b b1       	in	r24, 0x0b	; 11
 356:	80 68       	ori	r24, 0x80	; 128
 358:	8b b9       	out	0x0b, r24	; 11
 35a:	03 c0       	rjmp	.+6      	; 0x362 <measure_gd03_voltage+0xe2>
    }
    else
    {
        PORTD &= ~(0b10000000); // turn it off
 35c:	8b b1       	in	r24, 0x0b	; 11
 35e:	8f 77       	andi	r24, 0x7F	; 127
 360:	8b b9       	out	0x0b, r24	; 11
    }
 362:	64 96       	adiw	r28, 0x14	; 20
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	0f 91       	pop	r16
 376:	ff 90       	pop	r15
 378:	ef 90       	pop	r14
 37a:	df 90       	pop	r13
 37c:	cf 90       	pop	r12
 37e:	08 95       	ret

00000380 <main>:
	// variable for managing the A/D update
	const unsigned int cuiAtoDEventCount = 500; // every 1/2 second
	unsigned int uiAtoDEventNext = cuiAtoDEventCount;
	// one-time initialization section
	// bring up the timer, requires ISR!
	Timer_Init(Timer_Prescale_8, _Timer_OC_Offset); // 1ms intervals
 380:	6a ef       	ldi	r22, 0xFA	; 250
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	0e 94 27 01 	call	0x24e	; 0x24e <Timer_Init>
	// enable sleep mode, for idle, sort of similar to WAI on 9S12X (13.2)
	sleep_enable();
 38a:	83 b7       	in	r24, 0x33	; 51
 38c:	81 60       	ori	r24, 0x01	; 1
 38e:	83 bf       	out	0x33, r24	; 51
	SCI0_Init(F_CPU, 9600, 1); // 16Mhz clock, 9600 baud
 390:	01 e0       	ldi	r16, 0x01	; 1
 392:	10 e0       	ldi	r17, 0x00	; 0
 394:	20 e8       	ldi	r18, 0x80	; 128
 396:	35 e2       	ldi	r19, 0x25	; 37
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	60 e8       	ldi	r22, 0x80	; 128
 39e:	74 e8       	ldi	r23, 0x84	; 132
 3a0:	8e e1       	ldi	r24, 0x1E	; 30
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 af 00 	call	0x15e	; 0x15e <SCI0_Init>

	// welcome message, so we know it booted OK
	SCI0_TxString("\n328 Up! Characters will echo.\n");
 3a8:	8c e1       	ldi	r24, 0x1C	; 28
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	0e 94 1a 01 	call	0x234	; 0x234 <SCI0_TxString>
	AtoD_Init(AtoD_Channel_0);
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 a0 00 	call	0x140	; 0x140 <AtoD_Init>

	// set the global interrupt flag (enable interrupts)
	// this is backwards from the 9S12
	sei();
 3b6:	78 94       	sei
	// make portd pin 7 an output (PD7)
	DDRD |= 0b10000000;
 3b8:	8a b1       	in	r24, 0x0a	; 10
 3ba:	80 68       	ori	r24, 0x80	; 128
 3bc:	8a b9       	out	0x0a, r24	; 10
volatile unsigned int _Ticks = 0;
int main(void)
{
	// variable for managing the A/D update
	const unsigned int cuiAtoDEventCount = 500; // every 1/2 second
	unsigned int uiAtoDEventNext = cuiAtoDEventCount;
 3be:	c4 ef       	ldi	r28, 0xF4	; 244
 3c0:	d1 e0       	ldi	r29, 0x01	; 1

	// main program loop - don't exit
	while(1)
	{
		// go idle!
		sleep_cpu();
 3c2:	88 95       	sleep

		//// are we past the scheduled event?
		if (uiAtoDEventNext - _Ticks > cuiAtoDEventCount)
 3c4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 3c8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 3cc:	9e 01       	movw	r18, r28
 3ce:	28 1b       	sub	r18, r24
 3d0:	39 0b       	sbc	r19, r25
 3d2:	c9 01       	movw	r24, r18
 3d4:	85 3f       	cpi	r24, 0xF5	; 245
 3d6:	91 40       	sbci	r25, 0x01	; 1
 3d8:	a0 f3       	brcs	.-24     	; 0x3c2 <main+0x42>
		{
			uiAtoDEventNext += cuiAtoDEventCount; // rearm
 3da:	cc 50       	subi	r28, 0x0C	; 12
 3dc:	de 4f       	sbci	r29, 0xFE	; 254
			measure_gd03_voltage();
 3de:	0e 94 40 01 	call	0x280	; 0x280 <measure_gd03_voltage>
 3e2:	ef cf       	rjmp	.-34     	; 0x3c2 <main+0x42>

000003e4 <__vector_11>:

	}
}
// output compare A interrupt
ISR(TIMER1_COMPA_vect)
{
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
	// rearm the output compare operation
	OCR1A += _Timer_OC_Offset; // 1ms intervals
 3f6:	e8 e8       	ldi	r30, 0x88	; 136
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	91 81       	ldd	r25, Z+1	; 0x01
 3fe:	86 50       	subi	r24, 0x06	; 6
 400:	9f 4f       	sbci	r25, 0xFF	; 255
 402:	91 83       	std	Z+1, r25	; 0x01
 404:	80 83       	st	Z, r24

	// up the global tick count
	++_Ticks;
 406:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 40a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 40e:	01 96       	adiw	r24, 0x01	; 1
 410:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 414:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
}
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <__floatunsisf>:
 42a:	e8 94       	clt
 42c:	09 c0       	rjmp	.+18     	; 0x440 <__floatsisf+0x12>

0000042e <__floatsisf>:
 42e:	97 fb       	bst	r25, 7
 430:	3e f4       	brtc	.+14     	; 0x440 <__floatsisf+0x12>
 432:	90 95       	com	r25
 434:	80 95       	com	r24
 436:	70 95       	com	r23
 438:	61 95       	neg	r22
 43a:	7f 4f       	sbci	r23, 0xFF	; 255
 43c:	8f 4f       	sbci	r24, 0xFF	; 255
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
 440:	99 23       	and	r25, r25
 442:	a9 f0       	breq	.+42     	; 0x46e <__floatsisf+0x40>
 444:	f9 2f       	mov	r31, r25
 446:	96 e9       	ldi	r25, 0x96	; 150
 448:	bb 27       	eor	r27, r27
 44a:	93 95       	inc	r25
 44c:	f6 95       	lsr	r31
 44e:	87 95       	ror	r24
 450:	77 95       	ror	r23
 452:	67 95       	ror	r22
 454:	b7 95       	ror	r27
 456:	f1 11       	cpse	r31, r1
 458:	f8 cf       	rjmp	.-16     	; 0x44a <__floatsisf+0x1c>
 45a:	fa f4       	brpl	.+62     	; 0x49a <__floatsisf+0x6c>
 45c:	bb 0f       	add	r27, r27
 45e:	11 f4       	brne	.+4      	; 0x464 <__floatsisf+0x36>
 460:	60 ff       	sbrs	r22, 0
 462:	1b c0       	rjmp	.+54     	; 0x49a <__floatsisf+0x6c>
 464:	6f 5f       	subi	r22, 0xFF	; 255
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	8f 4f       	sbci	r24, 0xFF	; 255
 46a:	9f 4f       	sbci	r25, 0xFF	; 255
 46c:	16 c0       	rjmp	.+44     	; 0x49a <__floatsisf+0x6c>
 46e:	88 23       	and	r24, r24
 470:	11 f0       	breq	.+4      	; 0x476 <__floatsisf+0x48>
 472:	96 e9       	ldi	r25, 0x96	; 150
 474:	11 c0       	rjmp	.+34     	; 0x498 <__floatsisf+0x6a>
 476:	77 23       	and	r23, r23
 478:	21 f0       	breq	.+8      	; 0x482 <__floatsisf+0x54>
 47a:	9e e8       	ldi	r25, 0x8E	; 142
 47c:	87 2f       	mov	r24, r23
 47e:	76 2f       	mov	r23, r22
 480:	05 c0       	rjmp	.+10     	; 0x48c <__floatsisf+0x5e>
 482:	66 23       	and	r22, r22
 484:	71 f0       	breq	.+28     	; 0x4a2 <__floatsisf+0x74>
 486:	96 e8       	ldi	r25, 0x86	; 134
 488:	86 2f       	mov	r24, r22
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	2a f0       	brmi	.+10     	; 0x49a <__floatsisf+0x6c>
 490:	9a 95       	dec	r25
 492:	66 0f       	add	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	88 1f       	adc	r24, r24
 498:	da f7       	brpl	.-10     	; 0x490 <__floatsisf+0x62>
 49a:	88 0f       	add	r24, r24
 49c:	96 95       	lsr	r25
 49e:	87 95       	ror	r24
 4a0:	97 f9       	bld	r25, 7
 4a2:	08 95       	ret

000004a4 <__fp_cmp>:
 4a4:	99 0f       	add	r25, r25
 4a6:	00 08       	sbc	r0, r0
 4a8:	55 0f       	add	r21, r21
 4aa:	aa 0b       	sbc	r26, r26
 4ac:	e0 e8       	ldi	r30, 0x80	; 128
 4ae:	fe ef       	ldi	r31, 0xFE	; 254
 4b0:	16 16       	cp	r1, r22
 4b2:	17 06       	cpc	r1, r23
 4b4:	e8 07       	cpc	r30, r24
 4b6:	f9 07       	cpc	r31, r25
 4b8:	c0 f0       	brcs	.+48     	; 0x4ea <__fp_cmp+0x46>
 4ba:	12 16       	cp	r1, r18
 4bc:	13 06       	cpc	r1, r19
 4be:	e4 07       	cpc	r30, r20
 4c0:	f5 07       	cpc	r31, r21
 4c2:	98 f0       	brcs	.+38     	; 0x4ea <__fp_cmp+0x46>
 4c4:	62 1b       	sub	r22, r18
 4c6:	73 0b       	sbc	r23, r19
 4c8:	84 0b       	sbc	r24, r20
 4ca:	95 0b       	sbc	r25, r21
 4cc:	39 f4       	brne	.+14     	; 0x4dc <__fp_cmp+0x38>
 4ce:	0a 26       	eor	r0, r26
 4d0:	61 f0       	breq	.+24     	; 0x4ea <__fp_cmp+0x46>
 4d2:	23 2b       	or	r18, r19
 4d4:	24 2b       	or	r18, r20
 4d6:	25 2b       	or	r18, r21
 4d8:	21 f4       	brne	.+8      	; 0x4e2 <__fp_cmp+0x3e>
 4da:	08 95       	ret
 4dc:	0a 26       	eor	r0, r26
 4de:	09 f4       	brne	.+2      	; 0x4e2 <__fp_cmp+0x3e>
 4e0:	a1 40       	sbci	r26, 0x01	; 1
 4e2:	a6 95       	lsr	r26
 4e4:	8f ef       	ldi	r24, 0xFF	; 255
 4e6:	81 1d       	adc	r24, r1
 4e8:	81 1d       	adc	r24, r1
 4ea:	08 95       	ret

000004ec <__fp_inf>:
 4ec:	97 f9       	bld	r25, 7
 4ee:	9f 67       	ori	r25, 0x7F	; 127
 4f0:	80 e8       	ldi	r24, 0x80	; 128
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	08 95       	ret

000004f8 <__fp_nan>:
 4f8:	9f ef       	ldi	r25, 0xFF	; 255
 4fa:	80 ec       	ldi	r24, 0xC0	; 192
 4fc:	08 95       	ret

000004fe <__fp_pscA>:
 4fe:	00 24       	eor	r0, r0
 500:	0a 94       	dec	r0
 502:	16 16       	cp	r1, r22
 504:	17 06       	cpc	r1, r23
 506:	18 06       	cpc	r1, r24
 508:	09 06       	cpc	r0, r25
 50a:	08 95       	ret

0000050c <__fp_pscB>:
 50c:	00 24       	eor	r0, r0
 50e:	0a 94       	dec	r0
 510:	12 16       	cp	r1, r18
 512:	13 06       	cpc	r1, r19
 514:	14 06       	cpc	r1, r20
 516:	05 06       	cpc	r0, r21
 518:	08 95       	ret

0000051a <__fp_round>:
 51a:	09 2e       	mov	r0, r25
 51c:	03 94       	inc	r0
 51e:	00 0c       	add	r0, r0
 520:	11 f4       	brne	.+4      	; 0x526 <__fp_round+0xc>
 522:	88 23       	and	r24, r24
 524:	52 f0       	brmi	.+20     	; 0x53a <__fp_round+0x20>
 526:	bb 0f       	add	r27, r27
 528:	40 f4       	brcc	.+16     	; 0x53a <__fp_round+0x20>
 52a:	bf 2b       	or	r27, r31
 52c:	11 f4       	brne	.+4      	; 0x532 <__fp_round+0x18>
 52e:	60 ff       	sbrs	r22, 0
 530:	04 c0       	rjmp	.+8      	; 0x53a <__fp_round+0x20>
 532:	6f 5f       	subi	r22, 0xFF	; 255
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	8f 4f       	sbci	r24, 0xFF	; 255
 538:	9f 4f       	sbci	r25, 0xFF	; 255
 53a:	08 95       	ret

0000053c <__fp_split3>:
 53c:	57 fd       	sbrc	r21, 7
 53e:	90 58       	subi	r25, 0x80	; 128
 540:	44 0f       	add	r20, r20
 542:	55 1f       	adc	r21, r21
 544:	59 f0       	breq	.+22     	; 0x55c <__fp_splitA+0x10>
 546:	5f 3f       	cpi	r21, 0xFF	; 255
 548:	71 f0       	breq	.+28     	; 0x566 <__fp_splitA+0x1a>
 54a:	47 95       	ror	r20

0000054c <__fp_splitA>:
 54c:	88 0f       	add	r24, r24
 54e:	97 fb       	bst	r25, 7
 550:	99 1f       	adc	r25, r25
 552:	61 f0       	breq	.+24     	; 0x56c <__fp_splitA+0x20>
 554:	9f 3f       	cpi	r25, 0xFF	; 255
 556:	79 f0       	breq	.+30     	; 0x576 <__fp_splitA+0x2a>
 558:	87 95       	ror	r24
 55a:	08 95       	ret
 55c:	12 16       	cp	r1, r18
 55e:	13 06       	cpc	r1, r19
 560:	14 06       	cpc	r1, r20
 562:	55 1f       	adc	r21, r21
 564:	f2 cf       	rjmp	.-28     	; 0x54a <__fp_split3+0xe>
 566:	46 95       	lsr	r20
 568:	f1 df       	rcall	.-30     	; 0x54c <__fp_splitA>
 56a:	08 c0       	rjmp	.+16     	; 0x57c <__fp_splitA+0x30>
 56c:	16 16       	cp	r1, r22
 56e:	17 06       	cpc	r1, r23
 570:	18 06       	cpc	r1, r24
 572:	99 1f       	adc	r25, r25
 574:	f1 cf       	rjmp	.-30     	; 0x558 <__fp_splitA+0xc>
 576:	86 95       	lsr	r24
 578:	71 05       	cpc	r23, r1
 57a:	61 05       	cpc	r22, r1
 57c:	08 94       	sec
 57e:	08 95       	ret

00000580 <__fp_zero>:
 580:	e8 94       	clt

00000582 <__fp_szero>:
 582:	bb 27       	eor	r27, r27
 584:	66 27       	eor	r22, r22
 586:	77 27       	eor	r23, r23
 588:	cb 01       	movw	r24, r22
 58a:	97 f9       	bld	r25, 7
 58c:	08 95       	ret

0000058e <__gesf2>:
 58e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__fp_cmp>
 592:	08 f4       	brcc	.+2      	; 0x596 <__gesf2+0x8>
 594:	8f ef       	ldi	r24, 0xFF	; 255
 596:	08 95       	ret

00000598 <__mulsf3>:
 598:	0e 94 df 02 	call	0x5be	; 0x5be <__mulsf3x>
 59c:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__fp_round>
 5a0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fp_pscA>
 5a4:	38 f0       	brcs	.+14     	; 0x5b4 <__mulsf3+0x1c>
 5a6:	0e 94 86 02 	call	0x50c	; 0x50c <__fp_pscB>
 5aa:	20 f0       	brcs	.+8      	; 0x5b4 <__mulsf3+0x1c>
 5ac:	95 23       	and	r25, r21
 5ae:	11 f0       	breq	.+4      	; 0x5b4 <__mulsf3+0x1c>
 5b0:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_inf>
 5b4:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__fp_nan>
 5b8:	11 24       	eor	r1, r1
 5ba:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_szero>

000005be <__mulsf3x>:
 5be:	0e 94 9e 02 	call	0x53c	; 0x53c <__fp_split3>
 5c2:	70 f3       	brcs	.-36     	; 0x5a0 <__mulsf3+0x8>

000005c4 <__mulsf3_pse>:
 5c4:	95 9f       	mul	r25, r21
 5c6:	c1 f3       	breq	.-16     	; 0x5b8 <__mulsf3+0x20>
 5c8:	95 0f       	add	r25, r21
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	55 1f       	adc	r21, r21
 5ce:	62 9f       	mul	r22, r18
 5d0:	f0 01       	movw	r30, r0
 5d2:	72 9f       	mul	r23, r18
 5d4:	bb 27       	eor	r27, r27
 5d6:	f0 0d       	add	r31, r0
 5d8:	b1 1d       	adc	r27, r1
 5da:	63 9f       	mul	r22, r19
 5dc:	aa 27       	eor	r26, r26
 5de:	f0 0d       	add	r31, r0
 5e0:	b1 1d       	adc	r27, r1
 5e2:	aa 1f       	adc	r26, r26
 5e4:	64 9f       	mul	r22, r20
 5e6:	66 27       	eor	r22, r22
 5e8:	b0 0d       	add	r27, r0
 5ea:	a1 1d       	adc	r26, r1
 5ec:	66 1f       	adc	r22, r22
 5ee:	82 9f       	mul	r24, r18
 5f0:	22 27       	eor	r18, r18
 5f2:	b0 0d       	add	r27, r0
 5f4:	a1 1d       	adc	r26, r1
 5f6:	62 1f       	adc	r22, r18
 5f8:	73 9f       	mul	r23, r19
 5fa:	b0 0d       	add	r27, r0
 5fc:	a1 1d       	adc	r26, r1
 5fe:	62 1f       	adc	r22, r18
 600:	83 9f       	mul	r24, r19
 602:	a0 0d       	add	r26, r0
 604:	61 1d       	adc	r22, r1
 606:	22 1f       	adc	r18, r18
 608:	74 9f       	mul	r23, r20
 60a:	33 27       	eor	r19, r19
 60c:	a0 0d       	add	r26, r0
 60e:	61 1d       	adc	r22, r1
 610:	23 1f       	adc	r18, r19
 612:	84 9f       	mul	r24, r20
 614:	60 0d       	add	r22, r0
 616:	21 1d       	adc	r18, r1
 618:	82 2f       	mov	r24, r18
 61a:	76 2f       	mov	r23, r22
 61c:	6a 2f       	mov	r22, r26
 61e:	11 24       	eor	r1, r1
 620:	9f 57       	subi	r25, 0x7F	; 127
 622:	50 40       	sbci	r21, 0x00	; 0
 624:	9a f0       	brmi	.+38     	; 0x64c <__mulsf3_pse+0x88>
 626:	f1 f0       	breq	.+60     	; 0x664 <__mulsf3_pse+0xa0>
 628:	88 23       	and	r24, r24
 62a:	4a f0       	brmi	.+18     	; 0x63e <__mulsf3_pse+0x7a>
 62c:	ee 0f       	add	r30, r30
 62e:	ff 1f       	adc	r31, r31
 630:	bb 1f       	adc	r27, r27
 632:	66 1f       	adc	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	88 1f       	adc	r24, r24
 638:	91 50       	subi	r25, 0x01	; 1
 63a:	50 40       	sbci	r21, 0x00	; 0
 63c:	a9 f7       	brne	.-22     	; 0x628 <__mulsf3_pse+0x64>
 63e:	9e 3f       	cpi	r25, 0xFE	; 254
 640:	51 05       	cpc	r21, r1
 642:	80 f0       	brcs	.+32     	; 0x664 <__mulsf3_pse+0xa0>
 644:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_inf>
 648:	0c 94 c1 02 	jmp	0x582	; 0x582 <__fp_szero>
 64c:	5f 3f       	cpi	r21, 0xFF	; 255
 64e:	e4 f3       	brlt	.-8      	; 0x648 <__mulsf3_pse+0x84>
 650:	98 3e       	cpi	r25, 0xE8	; 232
 652:	d4 f3       	brlt	.-12     	; 0x648 <__mulsf3_pse+0x84>
 654:	86 95       	lsr	r24
 656:	77 95       	ror	r23
 658:	67 95       	ror	r22
 65a:	b7 95       	ror	r27
 65c:	f7 95       	ror	r31
 65e:	e7 95       	ror	r30
 660:	9f 5f       	subi	r25, 0xFF	; 255
 662:	c1 f7       	brne	.-16     	; 0x654 <__mulsf3_pse+0x90>
 664:	fe 2b       	or	r31, r30
 666:	88 0f       	add	r24, r24
 668:	91 1d       	adc	r25, r1
 66a:	96 95       	lsr	r25
 66c:	87 95       	ror	r24
 66e:	97 f9       	bld	r25, 7
 670:	08 95       	ret

00000672 <__udivmodsi4>:
 672:	a1 e2       	ldi	r26, 0x21	; 33
 674:	1a 2e       	mov	r1, r26
 676:	aa 1b       	sub	r26, r26
 678:	bb 1b       	sub	r27, r27
 67a:	fd 01       	movw	r30, r26
 67c:	0d c0       	rjmp	.+26     	; 0x698 <__udivmodsi4_ep>

0000067e <__udivmodsi4_loop>:
 67e:	aa 1f       	adc	r26, r26
 680:	bb 1f       	adc	r27, r27
 682:	ee 1f       	adc	r30, r30
 684:	ff 1f       	adc	r31, r31
 686:	a2 17       	cp	r26, r18
 688:	b3 07       	cpc	r27, r19
 68a:	e4 07       	cpc	r30, r20
 68c:	f5 07       	cpc	r31, r21
 68e:	20 f0       	brcs	.+8      	; 0x698 <__udivmodsi4_ep>
 690:	a2 1b       	sub	r26, r18
 692:	b3 0b       	sbc	r27, r19
 694:	e4 0b       	sbc	r30, r20
 696:	f5 0b       	sbc	r31, r21

00000698 <__udivmodsi4_ep>:
 698:	66 1f       	adc	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	1a 94       	dec	r1
 6a2:	69 f7       	brne	.-38     	; 0x67e <__udivmodsi4_loop>
 6a4:	60 95       	com	r22
 6a6:	70 95       	com	r23
 6a8:	80 95       	com	r24
 6aa:	90 95       	com	r25
 6ac:	9b 01       	movw	r18, r22
 6ae:	ac 01       	movw	r20, r24
 6b0:	bd 01       	movw	r22, r26
 6b2:	cf 01       	movw	r24, r30
 6b4:	08 95       	ret

000006b6 <__tablejump2__>:
 6b6:	ee 0f       	add	r30, r30
 6b8:	ff 1f       	adc	r31, r31
 6ba:	05 90       	lpm	r0, Z+
 6bc:	f4 91       	lpm	r31, Z
 6be:	e0 2d       	mov	r30, r0
 6c0:	09 94       	ijmp

000006c2 <sprintf>:
 6c2:	ae e0       	ldi	r26, 0x0E	; 14
 6c4:	b0 e0       	ldi	r27, 0x00	; 0
 6c6:	e7 e6       	ldi	r30, 0x67	; 103
 6c8:	f3 e0       	ldi	r31, 0x03	; 3
 6ca:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__prologue_saves__+0x1c>
 6ce:	0d 89       	ldd	r16, Y+21	; 0x15
 6d0:	1e 89       	ldd	r17, Y+22	; 0x16
 6d2:	86 e0       	ldi	r24, 0x06	; 6
 6d4:	8c 83       	std	Y+4, r24	; 0x04
 6d6:	1a 83       	std	Y+2, r17	; 0x02
 6d8:	09 83       	std	Y+1, r16	; 0x01
 6da:	8f ef       	ldi	r24, 0xFF	; 255
 6dc:	9f e7       	ldi	r25, 0x7F	; 127
 6de:	9e 83       	std	Y+6, r25	; 0x06
 6e0:	8d 83       	std	Y+5, r24	; 0x05
 6e2:	ae 01       	movw	r20, r28
 6e4:	47 5e       	subi	r20, 0xE7	; 231
 6e6:	5f 4f       	sbci	r21, 0xFF	; 255
 6e8:	6f 89       	ldd	r22, Y+23	; 0x17
 6ea:	78 8d       	ldd	r23, Y+24	; 0x18
 6ec:	ce 01       	movw	r24, r28
 6ee:	01 96       	adiw	r24, 0x01	; 1
 6f0:	0e 94 83 03 	call	0x706	; 0x706 <vfprintf>
 6f4:	ef 81       	ldd	r30, Y+7	; 0x07
 6f6:	f8 85       	ldd	r31, Y+8	; 0x08
 6f8:	e0 0f       	add	r30, r16
 6fa:	f1 1f       	adc	r31, r17
 6fc:	10 82       	st	Z, r1
 6fe:	2e 96       	adiw	r28, 0x0e	; 14
 700:	e4 e0       	ldi	r30, 0x04	; 4
 702:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__epilogue_restores__+0x1c>

00000706 <vfprintf>:
 706:	ab e0       	ldi	r26, 0x0B	; 11
 708:	b0 e0       	ldi	r27, 0x00	; 0
 70a:	e9 e8       	ldi	r30, 0x89	; 137
 70c:	f3 e0       	ldi	r31, 0x03	; 3
 70e:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__prologue_saves__>
 712:	6c 01       	movw	r12, r24
 714:	7b 01       	movw	r14, r22
 716:	8a 01       	movw	r16, r20
 718:	fc 01       	movw	r30, r24
 71a:	17 82       	std	Z+7, r1	; 0x07
 71c:	16 82       	std	Z+6, r1	; 0x06
 71e:	83 81       	ldd	r24, Z+3	; 0x03
 720:	81 ff       	sbrs	r24, 1
 722:	cc c1       	rjmp	.+920    	; 0xabc <__stack+0x1bd>
 724:	ce 01       	movw	r24, r28
 726:	01 96       	adiw	r24, 0x01	; 1
 728:	3c 01       	movw	r6, r24
 72a:	f6 01       	movw	r30, r12
 72c:	93 81       	ldd	r25, Z+3	; 0x03
 72e:	f7 01       	movw	r30, r14
 730:	93 fd       	sbrc	r25, 3
 732:	85 91       	lpm	r24, Z+
 734:	93 ff       	sbrs	r25, 3
 736:	81 91       	ld	r24, Z+
 738:	7f 01       	movw	r14, r30
 73a:	88 23       	and	r24, r24
 73c:	09 f4       	brne	.+2      	; 0x740 <vfprintf+0x3a>
 73e:	ba c1       	rjmp	.+884    	; 0xab4 <__stack+0x1b5>
 740:	85 32       	cpi	r24, 0x25	; 37
 742:	39 f4       	brne	.+14     	; 0x752 <vfprintf+0x4c>
 744:	93 fd       	sbrc	r25, 3
 746:	85 91       	lpm	r24, Z+
 748:	93 ff       	sbrs	r25, 3
 74a:	81 91       	ld	r24, Z+
 74c:	7f 01       	movw	r14, r30
 74e:	85 32       	cpi	r24, 0x25	; 37
 750:	29 f4       	brne	.+10     	; 0x75c <vfprintf+0x56>
 752:	b6 01       	movw	r22, r12
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <fputc>
 75a:	e7 cf       	rjmp	.-50     	; 0x72a <vfprintf+0x24>
 75c:	91 2c       	mov	r9, r1
 75e:	21 2c       	mov	r2, r1
 760:	31 2c       	mov	r3, r1
 762:	ff e1       	ldi	r31, 0x1F	; 31
 764:	f3 15       	cp	r31, r3
 766:	d8 f0       	brcs	.+54     	; 0x79e <vfprintf+0x98>
 768:	8b 32       	cpi	r24, 0x2B	; 43
 76a:	79 f0       	breq	.+30     	; 0x78a <vfprintf+0x84>
 76c:	38 f4       	brcc	.+14     	; 0x77c <vfprintf+0x76>
 76e:	80 32       	cpi	r24, 0x20	; 32
 770:	79 f0       	breq	.+30     	; 0x790 <vfprintf+0x8a>
 772:	83 32       	cpi	r24, 0x23	; 35
 774:	a1 f4       	brne	.+40     	; 0x79e <vfprintf+0x98>
 776:	23 2d       	mov	r18, r3
 778:	20 61       	ori	r18, 0x10	; 16
 77a:	1d c0       	rjmp	.+58     	; 0x7b6 <vfprintf+0xb0>
 77c:	8d 32       	cpi	r24, 0x2D	; 45
 77e:	61 f0       	breq	.+24     	; 0x798 <vfprintf+0x92>
 780:	80 33       	cpi	r24, 0x30	; 48
 782:	69 f4       	brne	.+26     	; 0x79e <vfprintf+0x98>
 784:	23 2d       	mov	r18, r3
 786:	21 60       	ori	r18, 0x01	; 1
 788:	16 c0       	rjmp	.+44     	; 0x7b6 <vfprintf+0xb0>
 78a:	83 2d       	mov	r24, r3
 78c:	82 60       	ori	r24, 0x02	; 2
 78e:	38 2e       	mov	r3, r24
 790:	e3 2d       	mov	r30, r3
 792:	e4 60       	ori	r30, 0x04	; 4
 794:	3e 2e       	mov	r3, r30
 796:	2a c0       	rjmp	.+84     	; 0x7ec <vfprintf+0xe6>
 798:	f3 2d       	mov	r31, r3
 79a:	f8 60       	ori	r31, 0x08	; 8
 79c:	1d c0       	rjmp	.+58     	; 0x7d8 <vfprintf+0xd2>
 79e:	37 fc       	sbrc	r3, 7
 7a0:	2d c0       	rjmp	.+90     	; 0x7fc <vfprintf+0xf6>
 7a2:	20 ed       	ldi	r18, 0xD0	; 208
 7a4:	28 0f       	add	r18, r24
 7a6:	2a 30       	cpi	r18, 0x0A	; 10
 7a8:	40 f0       	brcs	.+16     	; 0x7ba <vfprintf+0xb4>
 7aa:	8e 32       	cpi	r24, 0x2E	; 46
 7ac:	b9 f4       	brne	.+46     	; 0x7dc <vfprintf+0xd6>
 7ae:	36 fc       	sbrc	r3, 6
 7b0:	81 c1       	rjmp	.+770    	; 0xab4 <__stack+0x1b5>
 7b2:	23 2d       	mov	r18, r3
 7b4:	20 64       	ori	r18, 0x40	; 64
 7b6:	32 2e       	mov	r3, r18
 7b8:	19 c0       	rjmp	.+50     	; 0x7ec <vfprintf+0xe6>
 7ba:	36 fe       	sbrs	r3, 6
 7bc:	06 c0       	rjmp	.+12     	; 0x7ca <vfprintf+0xc4>
 7be:	8a e0       	ldi	r24, 0x0A	; 10
 7c0:	98 9e       	mul	r9, r24
 7c2:	20 0d       	add	r18, r0
 7c4:	11 24       	eor	r1, r1
 7c6:	92 2e       	mov	r9, r18
 7c8:	11 c0       	rjmp	.+34     	; 0x7ec <vfprintf+0xe6>
 7ca:	ea e0       	ldi	r30, 0x0A	; 10
 7cc:	2e 9e       	mul	r2, r30
 7ce:	20 0d       	add	r18, r0
 7d0:	11 24       	eor	r1, r1
 7d2:	22 2e       	mov	r2, r18
 7d4:	f3 2d       	mov	r31, r3
 7d6:	f0 62       	ori	r31, 0x20	; 32
 7d8:	3f 2e       	mov	r3, r31
 7da:	08 c0       	rjmp	.+16     	; 0x7ec <vfprintf+0xe6>
 7dc:	8c 36       	cpi	r24, 0x6C	; 108
 7de:	21 f4       	brne	.+8      	; 0x7e8 <vfprintf+0xe2>
 7e0:	83 2d       	mov	r24, r3
 7e2:	80 68       	ori	r24, 0x80	; 128
 7e4:	38 2e       	mov	r3, r24
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <vfprintf+0xe6>
 7e8:	88 36       	cpi	r24, 0x68	; 104
 7ea:	41 f4       	brne	.+16     	; 0x7fc <vfprintf+0xf6>
 7ec:	f7 01       	movw	r30, r14
 7ee:	93 fd       	sbrc	r25, 3
 7f0:	85 91       	lpm	r24, Z+
 7f2:	93 ff       	sbrs	r25, 3
 7f4:	81 91       	ld	r24, Z+
 7f6:	7f 01       	movw	r14, r30
 7f8:	81 11       	cpse	r24, r1
 7fa:	b3 cf       	rjmp	.-154    	; 0x762 <vfprintf+0x5c>
 7fc:	98 2f       	mov	r25, r24
 7fe:	9f 7d       	andi	r25, 0xDF	; 223
 800:	95 54       	subi	r25, 0x45	; 69
 802:	93 30       	cpi	r25, 0x03	; 3
 804:	28 f4       	brcc	.+10     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 806:	0c 5f       	subi	r16, 0xFC	; 252
 808:	1f 4f       	sbci	r17, 0xFF	; 255
 80a:	9f e3       	ldi	r25, 0x3F	; 63
 80c:	99 83       	std	Y+1, r25	; 0x01
 80e:	0d c0       	rjmp	.+26     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 810:	83 36       	cpi	r24, 0x63	; 99
 812:	31 f0       	breq	.+12     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 814:	83 37       	cpi	r24, 0x73	; 115
 816:	71 f0       	breq	.+28     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 818:	83 35       	cpi	r24, 0x53	; 83
 81a:	09 f0       	breq	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81c:	59 c0       	rjmp	.+178    	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 81e:	21 c0       	rjmp	.+66     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 820:	f8 01       	movw	r30, r16
 822:	80 81       	ld	r24, Z
 824:	89 83       	std	Y+1, r24	; 0x01
 826:	0e 5f       	subi	r16, 0xFE	; 254
 828:	1f 4f       	sbci	r17, 0xFF	; 255
 82a:	88 24       	eor	r8, r8
 82c:	83 94       	inc	r8
 82e:	91 2c       	mov	r9, r1
 830:	53 01       	movw	r10, r6
 832:	13 c0       	rjmp	.+38     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 834:	28 01       	movw	r4, r16
 836:	f2 e0       	ldi	r31, 0x02	; 2
 838:	4f 0e       	add	r4, r31
 83a:	51 1c       	adc	r5, r1
 83c:	f8 01       	movw	r30, r16
 83e:	a0 80       	ld	r10, Z
 840:	b1 80       	ldd	r11, Z+1	; 0x01
 842:	36 fe       	sbrs	r3, 6
 844:	03 c0       	rjmp	.+6      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 846:	69 2d       	mov	r22, r9
 848:	70 e0       	ldi	r23, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84c:	6f ef       	ldi	r22, 0xFF	; 255
 84e:	7f ef       	ldi	r23, 0xFF	; 255
 850:	c5 01       	movw	r24, r10
 852:	0e 94 6f 05 	call	0xade	; 0xade <strnlen>
 856:	4c 01       	movw	r8, r24
 858:	82 01       	movw	r16, r4
 85a:	f3 2d       	mov	r31, r3
 85c:	ff 77       	andi	r31, 0x7F	; 127
 85e:	3f 2e       	mov	r3, r31
 860:	16 c0       	rjmp	.+44     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 862:	28 01       	movw	r4, r16
 864:	22 e0       	ldi	r18, 0x02	; 2
 866:	42 0e       	add	r4, r18
 868:	51 1c       	adc	r5, r1
 86a:	f8 01       	movw	r30, r16
 86c:	a0 80       	ld	r10, Z
 86e:	b1 80       	ldd	r11, Z+1	; 0x01
 870:	36 fe       	sbrs	r3, 6
 872:	03 c0       	rjmp	.+6      	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 874:	69 2d       	mov	r22, r9
 876:	70 e0       	ldi	r23, 0x00	; 0
 878:	02 c0       	rjmp	.+4      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 87a:	6f ef       	ldi	r22, 0xFF	; 255
 87c:	7f ef       	ldi	r23, 0xFF	; 255
 87e:	c5 01       	movw	r24, r10
 880:	0e 94 64 05 	call	0xac8	; 0xac8 <strnlen_P>
 884:	4c 01       	movw	r8, r24
 886:	f3 2d       	mov	r31, r3
 888:	f0 68       	ori	r31, 0x80	; 128
 88a:	3f 2e       	mov	r3, r31
 88c:	82 01       	movw	r16, r4
 88e:	33 fc       	sbrc	r3, 3
 890:	1b c0       	rjmp	.+54     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 892:	82 2d       	mov	r24, r2
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	88 16       	cp	r8, r24
 898:	99 06       	cpc	r9, r25
 89a:	b0 f4       	brcc	.+44     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 89c:	b6 01       	movw	r22, r12
 89e:	80 e2       	ldi	r24, 0x20	; 32
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <fputc>
 8a6:	2a 94       	dec	r2
 8a8:	f4 cf       	rjmp	.-24     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 8aa:	f5 01       	movw	r30, r10
 8ac:	37 fc       	sbrc	r3, 7
 8ae:	85 91       	lpm	r24, Z+
 8b0:	37 fe       	sbrs	r3, 7
 8b2:	81 91       	ld	r24, Z+
 8b4:	5f 01       	movw	r10, r30
 8b6:	b6 01       	movw	r22, r12
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <fputc>
 8be:	21 10       	cpse	r2, r1
 8c0:	2a 94       	dec	r2
 8c2:	21 e0       	ldi	r18, 0x01	; 1
 8c4:	82 1a       	sub	r8, r18
 8c6:	91 08       	sbc	r9, r1
 8c8:	81 14       	cp	r8, r1
 8ca:	91 04       	cpc	r9, r1
 8cc:	71 f7       	brne	.-36     	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 8ce:	e8 c0       	rjmp	.+464    	; 0xaa0 <__stack+0x1a1>
 8d0:	84 36       	cpi	r24, 0x64	; 100
 8d2:	11 f0       	breq	.+4      	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8d4:	89 36       	cpi	r24, 0x69	; 105
 8d6:	41 f5       	brne	.+80     	; 0x928 <__stack+0x29>
 8d8:	f8 01       	movw	r30, r16
 8da:	37 fe       	sbrs	r3, 7
 8dc:	07 c0       	rjmp	.+14     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8de:	60 81       	ld	r22, Z
 8e0:	71 81       	ldd	r23, Z+1	; 0x01
 8e2:	82 81       	ldd	r24, Z+2	; 0x02
 8e4:	93 81       	ldd	r25, Z+3	; 0x03
 8e6:	0c 5f       	subi	r16, 0xFC	; 252
 8e8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ea:	08 c0       	rjmp	.+16     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8ec:	60 81       	ld	r22, Z
 8ee:	71 81       	ldd	r23, Z+1	; 0x01
 8f0:	07 2e       	mov	r0, r23
 8f2:	00 0c       	add	r0, r0
 8f4:	88 0b       	sbc	r24, r24
 8f6:	99 0b       	sbc	r25, r25
 8f8:	0e 5f       	subi	r16, 0xFE	; 254
 8fa:	1f 4f       	sbci	r17, 0xFF	; 255
 8fc:	f3 2d       	mov	r31, r3
 8fe:	ff 76       	andi	r31, 0x6F	; 111
 900:	3f 2e       	mov	r3, r31
 902:	97 ff       	sbrs	r25, 7
 904:	09 c0       	rjmp	.+18     	; 0x918 <__stack+0x19>
 906:	90 95       	com	r25
 908:	80 95       	com	r24
 90a:	70 95       	com	r23
 90c:	61 95       	neg	r22
 90e:	7f 4f       	sbci	r23, 0xFF	; 255
 910:	8f 4f       	sbci	r24, 0xFF	; 255
 912:	9f 4f       	sbci	r25, 0xFF	; 255
 914:	f0 68       	ori	r31, 0x80	; 128
 916:	3f 2e       	mov	r3, r31
 918:	2a e0       	ldi	r18, 0x0A	; 10
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	a3 01       	movw	r20, r6
 91e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__ultoa_invert>
 922:	88 2e       	mov	r8, r24
 924:	86 18       	sub	r8, r6
 926:	45 c0       	rjmp	.+138    	; 0x9b2 <__stack+0xb3>
 928:	85 37       	cpi	r24, 0x75	; 117
 92a:	31 f4       	brne	.+12     	; 0x938 <__stack+0x39>
 92c:	23 2d       	mov	r18, r3
 92e:	2f 7e       	andi	r18, 0xEF	; 239
 930:	b2 2e       	mov	r11, r18
 932:	2a e0       	ldi	r18, 0x0A	; 10
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	25 c0       	rjmp	.+74     	; 0x982 <__stack+0x83>
 938:	93 2d       	mov	r25, r3
 93a:	99 7f       	andi	r25, 0xF9	; 249
 93c:	b9 2e       	mov	r11, r25
 93e:	8f 36       	cpi	r24, 0x6F	; 111
 940:	c1 f0       	breq	.+48     	; 0x972 <__stack+0x73>
 942:	18 f4       	brcc	.+6      	; 0x94a <__stack+0x4b>
 944:	88 35       	cpi	r24, 0x58	; 88
 946:	79 f0       	breq	.+30     	; 0x966 <__stack+0x67>
 948:	b5 c0       	rjmp	.+362    	; 0xab4 <__stack+0x1b5>
 94a:	80 37       	cpi	r24, 0x70	; 112
 94c:	19 f0       	breq	.+6      	; 0x954 <__stack+0x55>
 94e:	88 37       	cpi	r24, 0x78	; 120
 950:	21 f0       	breq	.+8      	; 0x95a <__stack+0x5b>
 952:	b0 c0       	rjmp	.+352    	; 0xab4 <__stack+0x1b5>
 954:	e9 2f       	mov	r30, r25
 956:	e0 61       	ori	r30, 0x10	; 16
 958:	be 2e       	mov	r11, r30
 95a:	b4 fe       	sbrs	r11, 4
 95c:	0d c0       	rjmp	.+26     	; 0x978 <__stack+0x79>
 95e:	fb 2d       	mov	r31, r11
 960:	f4 60       	ori	r31, 0x04	; 4
 962:	bf 2e       	mov	r11, r31
 964:	09 c0       	rjmp	.+18     	; 0x978 <__stack+0x79>
 966:	34 fe       	sbrs	r3, 4
 968:	0a c0       	rjmp	.+20     	; 0x97e <__stack+0x7f>
 96a:	29 2f       	mov	r18, r25
 96c:	26 60       	ori	r18, 0x06	; 6
 96e:	b2 2e       	mov	r11, r18
 970:	06 c0       	rjmp	.+12     	; 0x97e <__stack+0x7f>
 972:	28 e0       	ldi	r18, 0x08	; 8
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	05 c0       	rjmp	.+10     	; 0x982 <__stack+0x83>
 978:	20 e1       	ldi	r18, 0x10	; 16
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	02 c0       	rjmp	.+4      	; 0x982 <__stack+0x83>
 97e:	20 e1       	ldi	r18, 0x10	; 16
 980:	32 e0       	ldi	r19, 0x02	; 2
 982:	f8 01       	movw	r30, r16
 984:	b7 fe       	sbrs	r11, 7
 986:	07 c0       	rjmp	.+14     	; 0x996 <__stack+0x97>
 988:	60 81       	ld	r22, Z
 98a:	71 81       	ldd	r23, Z+1	; 0x01
 98c:	82 81       	ldd	r24, Z+2	; 0x02
 98e:	93 81       	ldd	r25, Z+3	; 0x03
 990:	0c 5f       	subi	r16, 0xFC	; 252
 992:	1f 4f       	sbci	r17, 0xFF	; 255
 994:	06 c0       	rjmp	.+12     	; 0x9a2 <__stack+0xa3>
 996:	60 81       	ld	r22, Z
 998:	71 81       	ldd	r23, Z+1	; 0x01
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 5f       	subi	r16, 0xFE	; 254
 9a0:	1f 4f       	sbci	r17, 0xFF	; 255
 9a2:	a3 01       	movw	r20, r6
 9a4:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__ultoa_invert>
 9a8:	88 2e       	mov	r8, r24
 9aa:	86 18       	sub	r8, r6
 9ac:	fb 2d       	mov	r31, r11
 9ae:	ff 77       	andi	r31, 0x7F	; 127
 9b0:	3f 2e       	mov	r3, r31
 9b2:	36 fe       	sbrs	r3, 6
 9b4:	0d c0       	rjmp	.+26     	; 0x9d0 <__stack+0xd1>
 9b6:	23 2d       	mov	r18, r3
 9b8:	2e 7f       	andi	r18, 0xFE	; 254
 9ba:	a2 2e       	mov	r10, r18
 9bc:	89 14       	cp	r8, r9
 9be:	58 f4       	brcc	.+22     	; 0x9d6 <__stack+0xd7>
 9c0:	34 fe       	sbrs	r3, 4
 9c2:	0b c0       	rjmp	.+22     	; 0x9da <__stack+0xdb>
 9c4:	32 fc       	sbrc	r3, 2
 9c6:	09 c0       	rjmp	.+18     	; 0x9da <__stack+0xdb>
 9c8:	83 2d       	mov	r24, r3
 9ca:	8e 7e       	andi	r24, 0xEE	; 238
 9cc:	a8 2e       	mov	r10, r24
 9ce:	05 c0       	rjmp	.+10     	; 0x9da <__stack+0xdb>
 9d0:	b8 2c       	mov	r11, r8
 9d2:	a3 2c       	mov	r10, r3
 9d4:	03 c0       	rjmp	.+6      	; 0x9dc <__stack+0xdd>
 9d6:	b8 2c       	mov	r11, r8
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <__stack+0xdd>
 9da:	b9 2c       	mov	r11, r9
 9dc:	a4 fe       	sbrs	r10, 4
 9de:	0f c0       	rjmp	.+30     	; 0x9fe <__stack+0xff>
 9e0:	fe 01       	movw	r30, r28
 9e2:	e8 0d       	add	r30, r8
 9e4:	f1 1d       	adc	r31, r1
 9e6:	80 81       	ld	r24, Z
 9e8:	80 33       	cpi	r24, 0x30	; 48
 9ea:	21 f4       	brne	.+8      	; 0x9f4 <__stack+0xf5>
 9ec:	9a 2d       	mov	r25, r10
 9ee:	99 7e       	andi	r25, 0xE9	; 233
 9f0:	a9 2e       	mov	r10, r25
 9f2:	09 c0       	rjmp	.+18     	; 0xa06 <__stack+0x107>
 9f4:	a2 fe       	sbrs	r10, 2
 9f6:	06 c0       	rjmp	.+12     	; 0xa04 <__stack+0x105>
 9f8:	b3 94       	inc	r11
 9fa:	b3 94       	inc	r11
 9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__stack+0x107>
 9fe:	8a 2d       	mov	r24, r10
 a00:	86 78       	andi	r24, 0x86	; 134
 a02:	09 f0       	breq	.+2      	; 0xa06 <__stack+0x107>
 a04:	b3 94       	inc	r11
 a06:	a3 fc       	sbrc	r10, 3
 a08:	11 c0       	rjmp	.+34     	; 0xa2c <__stack+0x12d>
 a0a:	a0 fe       	sbrs	r10, 0
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <__stack+0x11b>
 a0e:	b2 14       	cp	r11, r2
 a10:	88 f4       	brcc	.+34     	; 0xa34 <__stack+0x135>
 a12:	28 0c       	add	r2, r8
 a14:	92 2c       	mov	r9, r2
 a16:	9b 18       	sub	r9, r11
 a18:	0e c0       	rjmp	.+28     	; 0xa36 <__stack+0x137>
 a1a:	b2 14       	cp	r11, r2
 a1c:	60 f4       	brcc	.+24     	; 0xa36 <__stack+0x137>
 a1e:	b6 01       	movw	r22, r12
 a20:	80 e2       	ldi	r24, 0x20	; 32
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <fputc>
 a28:	b3 94       	inc	r11
 a2a:	f7 cf       	rjmp	.-18     	; 0xa1a <__stack+0x11b>
 a2c:	b2 14       	cp	r11, r2
 a2e:	18 f4       	brcc	.+6      	; 0xa36 <__stack+0x137>
 a30:	2b 18       	sub	r2, r11
 a32:	02 c0       	rjmp	.+4      	; 0xa38 <__stack+0x139>
 a34:	98 2c       	mov	r9, r8
 a36:	21 2c       	mov	r2, r1
 a38:	a4 fe       	sbrs	r10, 4
 a3a:	10 c0       	rjmp	.+32     	; 0xa5c <__stack+0x15d>
 a3c:	b6 01       	movw	r22, r12
 a3e:	80 e3       	ldi	r24, 0x30	; 48
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <fputc>
 a46:	a2 fe       	sbrs	r10, 2
 a48:	17 c0       	rjmp	.+46     	; 0xa78 <__stack+0x179>
 a4a:	a1 fc       	sbrc	r10, 1
 a4c:	03 c0       	rjmp	.+6      	; 0xa54 <__stack+0x155>
 a4e:	88 e7       	ldi	r24, 0x78	; 120
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <__stack+0x159>
 a54:	88 e5       	ldi	r24, 0x58	; 88
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	b6 01       	movw	r22, r12
 a5a:	0c c0       	rjmp	.+24     	; 0xa74 <__stack+0x175>
 a5c:	8a 2d       	mov	r24, r10
 a5e:	86 78       	andi	r24, 0x86	; 134
 a60:	59 f0       	breq	.+22     	; 0xa78 <__stack+0x179>
 a62:	a1 fe       	sbrs	r10, 1
 a64:	02 c0       	rjmp	.+4      	; 0xa6a <__stack+0x16b>
 a66:	8b e2       	ldi	r24, 0x2B	; 43
 a68:	01 c0       	rjmp	.+2      	; 0xa6c <__stack+0x16d>
 a6a:	80 e2       	ldi	r24, 0x20	; 32
 a6c:	a7 fc       	sbrc	r10, 7
 a6e:	8d e2       	ldi	r24, 0x2D	; 45
 a70:	b6 01       	movw	r22, r12
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <fputc>
 a78:	89 14       	cp	r8, r9
 a7a:	38 f4       	brcc	.+14     	; 0xa8a <__stack+0x18b>
 a7c:	b6 01       	movw	r22, r12
 a7e:	80 e3       	ldi	r24, 0x30	; 48
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <fputc>
 a86:	9a 94       	dec	r9
 a88:	f7 cf       	rjmp	.-18     	; 0xa78 <__stack+0x179>
 a8a:	8a 94       	dec	r8
 a8c:	f3 01       	movw	r30, r6
 a8e:	e8 0d       	add	r30, r8
 a90:	f1 1d       	adc	r31, r1
 a92:	80 81       	ld	r24, Z
 a94:	b6 01       	movw	r22, r12
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <fputc>
 a9c:	81 10       	cpse	r8, r1
 a9e:	f5 cf       	rjmp	.-22     	; 0xa8a <__stack+0x18b>
 aa0:	22 20       	and	r2, r2
 aa2:	09 f4       	brne	.+2      	; 0xaa6 <__stack+0x1a7>
 aa4:	42 ce       	rjmp	.-892    	; 0x72a <vfprintf+0x24>
 aa6:	b6 01       	movw	r22, r12
 aa8:	80 e2       	ldi	r24, 0x20	; 32
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <fputc>
 ab0:	2a 94       	dec	r2
 ab2:	f6 cf       	rjmp	.-20     	; 0xaa0 <__stack+0x1a1>
 ab4:	f6 01       	movw	r30, r12
 ab6:	86 81       	ldd	r24, Z+6	; 0x06
 ab8:	97 81       	ldd	r25, Z+7	; 0x07
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <__stack+0x1c1>
 abc:	8f ef       	ldi	r24, 0xFF	; 255
 abe:	9f ef       	ldi	r25, 0xFF	; 255
 ac0:	2b 96       	adiw	r28, 0x0b	; 11
 ac2:	e2 e1       	ldi	r30, 0x12	; 18
 ac4:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__epilogue_restores__>

00000ac8 <strnlen_P>:
 ac8:	fc 01       	movw	r30, r24
 aca:	05 90       	lpm	r0, Z+
 acc:	61 50       	subi	r22, 0x01	; 1
 ace:	70 40       	sbci	r23, 0x00	; 0
 ad0:	01 10       	cpse	r0, r1
 ad2:	d8 f7       	brcc	.-10     	; 0xaca <strnlen_P+0x2>
 ad4:	80 95       	com	r24
 ad6:	90 95       	com	r25
 ad8:	8e 0f       	add	r24, r30
 ada:	9f 1f       	adc	r25, r31
 adc:	08 95       	ret

00000ade <strnlen>:
 ade:	fc 01       	movw	r30, r24
 ae0:	61 50       	subi	r22, 0x01	; 1
 ae2:	70 40       	sbci	r23, 0x00	; 0
 ae4:	01 90       	ld	r0, Z+
 ae6:	01 10       	cpse	r0, r1
 ae8:	d8 f7       	brcc	.-10     	; 0xae0 <strnlen+0x2>
 aea:	80 95       	com	r24
 aec:	90 95       	com	r25
 aee:	8e 0f       	add	r24, r30
 af0:	9f 1f       	adc	r25, r31
 af2:	08 95       	ret

00000af4 <fputc>:
 af4:	0f 93       	push	r16
 af6:	1f 93       	push	r17
 af8:	cf 93       	push	r28
 afa:	df 93       	push	r29
 afc:	fb 01       	movw	r30, r22
 afe:	23 81       	ldd	r18, Z+3	; 0x03
 b00:	21 fd       	sbrc	r18, 1
 b02:	03 c0       	rjmp	.+6      	; 0xb0a <fputc+0x16>
 b04:	8f ef       	ldi	r24, 0xFF	; 255
 b06:	9f ef       	ldi	r25, 0xFF	; 255
 b08:	2c c0       	rjmp	.+88     	; 0xb62 <fputc+0x6e>
 b0a:	22 ff       	sbrs	r18, 2
 b0c:	16 c0       	rjmp	.+44     	; 0xb3a <fputc+0x46>
 b0e:	46 81       	ldd	r20, Z+6	; 0x06
 b10:	57 81       	ldd	r21, Z+7	; 0x07
 b12:	24 81       	ldd	r18, Z+4	; 0x04
 b14:	35 81       	ldd	r19, Z+5	; 0x05
 b16:	42 17       	cp	r20, r18
 b18:	53 07       	cpc	r21, r19
 b1a:	44 f4       	brge	.+16     	; 0xb2c <fputc+0x38>
 b1c:	a0 81       	ld	r26, Z
 b1e:	b1 81       	ldd	r27, Z+1	; 0x01
 b20:	9d 01       	movw	r18, r26
 b22:	2f 5f       	subi	r18, 0xFF	; 255
 b24:	3f 4f       	sbci	r19, 0xFF	; 255
 b26:	31 83       	std	Z+1, r19	; 0x01
 b28:	20 83       	st	Z, r18
 b2a:	8c 93       	st	X, r24
 b2c:	26 81       	ldd	r18, Z+6	; 0x06
 b2e:	37 81       	ldd	r19, Z+7	; 0x07
 b30:	2f 5f       	subi	r18, 0xFF	; 255
 b32:	3f 4f       	sbci	r19, 0xFF	; 255
 b34:	37 83       	std	Z+7, r19	; 0x07
 b36:	26 83       	std	Z+6, r18	; 0x06
 b38:	14 c0       	rjmp	.+40     	; 0xb62 <fputc+0x6e>
 b3a:	8b 01       	movw	r16, r22
 b3c:	ec 01       	movw	r28, r24
 b3e:	fb 01       	movw	r30, r22
 b40:	00 84       	ldd	r0, Z+8	; 0x08
 b42:	f1 85       	ldd	r31, Z+9	; 0x09
 b44:	e0 2d       	mov	r30, r0
 b46:	09 95       	icall
 b48:	89 2b       	or	r24, r25
 b4a:	e1 f6       	brne	.-72     	; 0xb04 <fputc+0x10>
 b4c:	d8 01       	movw	r26, r16
 b4e:	16 96       	adiw	r26, 0x06	; 6
 b50:	8d 91       	ld	r24, X+
 b52:	9c 91       	ld	r25, X
 b54:	17 97       	sbiw	r26, 0x07	; 7
 b56:	01 96       	adiw	r24, 0x01	; 1
 b58:	17 96       	adiw	r26, 0x07	; 7
 b5a:	9c 93       	st	X, r25
 b5c:	8e 93       	st	-X, r24
 b5e:	16 97       	sbiw	r26, 0x06	; 6
 b60:	ce 01       	movw	r24, r28
 b62:	df 91       	pop	r29
 b64:	cf 91       	pop	r28
 b66:	1f 91       	pop	r17
 b68:	0f 91       	pop	r16
 b6a:	08 95       	ret

00000b6c <__ultoa_invert>:
 b6c:	fa 01       	movw	r30, r20
 b6e:	aa 27       	eor	r26, r26
 b70:	28 30       	cpi	r18, 0x08	; 8
 b72:	51 f1       	breq	.+84     	; 0xbc8 <__ultoa_invert+0x5c>
 b74:	20 31       	cpi	r18, 0x10	; 16
 b76:	81 f1       	breq	.+96     	; 0xbd8 <__ultoa_invert+0x6c>
 b78:	e8 94       	clt
 b7a:	6f 93       	push	r22
 b7c:	6e 7f       	andi	r22, 0xFE	; 254
 b7e:	6e 5f       	subi	r22, 0xFE	; 254
 b80:	7f 4f       	sbci	r23, 0xFF	; 255
 b82:	8f 4f       	sbci	r24, 0xFF	; 255
 b84:	9f 4f       	sbci	r25, 0xFF	; 255
 b86:	af 4f       	sbci	r26, 0xFF	; 255
 b88:	b1 e0       	ldi	r27, 0x01	; 1
 b8a:	3e d0       	rcall	.+124    	; 0xc08 <__ultoa_invert+0x9c>
 b8c:	b4 e0       	ldi	r27, 0x04	; 4
 b8e:	3c d0       	rcall	.+120    	; 0xc08 <__ultoa_invert+0x9c>
 b90:	67 0f       	add	r22, r23
 b92:	78 1f       	adc	r23, r24
 b94:	89 1f       	adc	r24, r25
 b96:	9a 1f       	adc	r25, r26
 b98:	a1 1d       	adc	r26, r1
 b9a:	68 0f       	add	r22, r24
 b9c:	79 1f       	adc	r23, r25
 b9e:	8a 1f       	adc	r24, r26
 ba0:	91 1d       	adc	r25, r1
 ba2:	a1 1d       	adc	r26, r1
 ba4:	6a 0f       	add	r22, r26
 ba6:	71 1d       	adc	r23, r1
 ba8:	81 1d       	adc	r24, r1
 baa:	91 1d       	adc	r25, r1
 bac:	a1 1d       	adc	r26, r1
 bae:	20 d0       	rcall	.+64     	; 0xbf0 <__ultoa_invert+0x84>
 bb0:	09 f4       	brne	.+2      	; 0xbb4 <__ultoa_invert+0x48>
 bb2:	68 94       	set
 bb4:	3f 91       	pop	r19
 bb6:	2a e0       	ldi	r18, 0x0A	; 10
 bb8:	26 9f       	mul	r18, r22
 bba:	11 24       	eor	r1, r1
 bbc:	30 19       	sub	r19, r0
 bbe:	30 5d       	subi	r19, 0xD0	; 208
 bc0:	31 93       	st	Z+, r19
 bc2:	de f6       	brtc	.-74     	; 0xb7a <__ultoa_invert+0xe>
 bc4:	cf 01       	movw	r24, r30
 bc6:	08 95       	ret
 bc8:	46 2f       	mov	r20, r22
 bca:	47 70       	andi	r20, 0x07	; 7
 bcc:	40 5d       	subi	r20, 0xD0	; 208
 bce:	41 93       	st	Z+, r20
 bd0:	b3 e0       	ldi	r27, 0x03	; 3
 bd2:	0f d0       	rcall	.+30     	; 0xbf2 <__ultoa_invert+0x86>
 bd4:	c9 f7       	brne	.-14     	; 0xbc8 <__ultoa_invert+0x5c>
 bd6:	f6 cf       	rjmp	.-20     	; 0xbc4 <__ultoa_invert+0x58>
 bd8:	46 2f       	mov	r20, r22
 bda:	4f 70       	andi	r20, 0x0F	; 15
 bdc:	40 5d       	subi	r20, 0xD0	; 208
 bde:	4a 33       	cpi	r20, 0x3A	; 58
 be0:	18 f0       	brcs	.+6      	; 0xbe8 <__ultoa_invert+0x7c>
 be2:	49 5d       	subi	r20, 0xD9	; 217
 be4:	31 fd       	sbrc	r19, 1
 be6:	40 52       	subi	r20, 0x20	; 32
 be8:	41 93       	st	Z+, r20
 bea:	02 d0       	rcall	.+4      	; 0xbf0 <__ultoa_invert+0x84>
 bec:	a9 f7       	brne	.-22     	; 0xbd8 <__ultoa_invert+0x6c>
 bee:	ea cf       	rjmp	.-44     	; 0xbc4 <__ultoa_invert+0x58>
 bf0:	b4 e0       	ldi	r27, 0x04	; 4
 bf2:	a6 95       	lsr	r26
 bf4:	97 95       	ror	r25
 bf6:	87 95       	ror	r24
 bf8:	77 95       	ror	r23
 bfa:	67 95       	ror	r22
 bfc:	ba 95       	dec	r27
 bfe:	c9 f7       	brne	.-14     	; 0xbf2 <__ultoa_invert+0x86>
 c00:	00 97       	sbiw	r24, 0x00	; 0
 c02:	61 05       	cpc	r22, r1
 c04:	71 05       	cpc	r23, r1
 c06:	08 95       	ret
 c08:	9b 01       	movw	r18, r22
 c0a:	ac 01       	movw	r20, r24
 c0c:	0a 2e       	mov	r0, r26
 c0e:	06 94       	lsr	r0
 c10:	57 95       	ror	r21
 c12:	47 95       	ror	r20
 c14:	37 95       	ror	r19
 c16:	27 95       	ror	r18
 c18:	ba 95       	dec	r27
 c1a:	c9 f7       	brne	.-14     	; 0xc0e <__ultoa_invert+0xa2>
 c1c:	62 0f       	add	r22, r18
 c1e:	73 1f       	adc	r23, r19
 c20:	84 1f       	adc	r24, r20
 c22:	95 1f       	adc	r25, r21
 c24:	a0 1d       	adc	r26, r0
 c26:	08 95       	ret

00000c28 <__prologue_saves__>:
 c28:	2f 92       	push	r2
 c2a:	3f 92       	push	r3
 c2c:	4f 92       	push	r4
 c2e:	5f 92       	push	r5
 c30:	6f 92       	push	r6
 c32:	7f 92       	push	r7
 c34:	8f 92       	push	r8
 c36:	9f 92       	push	r9
 c38:	af 92       	push	r10
 c3a:	bf 92       	push	r11
 c3c:	cf 92       	push	r12
 c3e:	df 92       	push	r13
 c40:	ef 92       	push	r14
 c42:	ff 92       	push	r15
 c44:	0f 93       	push	r16
 c46:	1f 93       	push	r17
 c48:	cf 93       	push	r28
 c4a:	df 93       	push	r29
 c4c:	cd b7       	in	r28, 0x3d	; 61
 c4e:	de b7       	in	r29, 0x3e	; 62
 c50:	ca 1b       	sub	r28, r26
 c52:	db 0b       	sbc	r29, r27
 c54:	0f b6       	in	r0, 0x3f	; 63
 c56:	f8 94       	cli
 c58:	de bf       	out	0x3e, r29	; 62
 c5a:	0f be       	out	0x3f, r0	; 63
 c5c:	cd bf       	out	0x3d, r28	; 61
 c5e:	09 94       	ijmp

00000c60 <__epilogue_restores__>:
 c60:	2a 88       	ldd	r2, Y+18	; 0x12
 c62:	39 88       	ldd	r3, Y+17	; 0x11
 c64:	48 88       	ldd	r4, Y+16	; 0x10
 c66:	5f 84       	ldd	r5, Y+15	; 0x0f
 c68:	6e 84       	ldd	r6, Y+14	; 0x0e
 c6a:	7d 84       	ldd	r7, Y+13	; 0x0d
 c6c:	8c 84       	ldd	r8, Y+12	; 0x0c
 c6e:	9b 84       	ldd	r9, Y+11	; 0x0b
 c70:	aa 84       	ldd	r10, Y+10	; 0x0a
 c72:	b9 84       	ldd	r11, Y+9	; 0x09
 c74:	c8 84       	ldd	r12, Y+8	; 0x08
 c76:	df 80       	ldd	r13, Y+7	; 0x07
 c78:	ee 80       	ldd	r14, Y+6	; 0x06
 c7a:	fd 80       	ldd	r15, Y+5	; 0x05
 c7c:	0c 81       	ldd	r16, Y+4	; 0x04
 c7e:	1b 81       	ldd	r17, Y+3	; 0x03
 c80:	aa 81       	ldd	r26, Y+2	; 0x02
 c82:	b9 81       	ldd	r27, Y+1	; 0x01
 c84:	ce 0f       	add	r28, r30
 c86:	d1 1d       	adc	r29, r1
 c88:	0f b6       	in	r0, 0x3f	; 63
 c8a:	f8 94       	cli
 c8c:	de bf       	out	0x3e, r29	; 62
 c8e:	0f be       	out	0x3f, r0	; 63
 c90:	cd bf       	out	0x3d, r28	; 61
 c92:	ed 01       	movw	r28, r26
 c94:	08 95       	ret

00000c96 <_exit>:
 c96:	f8 94       	cli

00000c98 <__stop_program>:
 c98:	ff cf       	rjmp	.-2      	; 0xc98 <__stop_program>
