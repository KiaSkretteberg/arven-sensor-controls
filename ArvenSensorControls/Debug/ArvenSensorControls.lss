
ArvenSensorControls.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000213c  000021d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000213c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800122  00800122  000021f2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019e3  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc8  00000000  00000000  00003ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f5  00000000  00000000  00004c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000770  00000000  00000000  00006178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d82  00000000  00000000  000068e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eef  00000000  00000000  0000766a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00008559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__ctors_end>
       4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
       c:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__vector_3>
      10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      14:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__vector_5>
      18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      2c:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__vector_11>
      30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
      68:	1c 01       	movw	r2, r24
      6a:	26 01       	movw	r4, r12
      6c:	30 01       	movw	r6, r0
      6e:	3a 01       	movw	r6, r20
      70:	44 01       	movw	r8, r8
      72:	4e 01       	movw	r8, r28
      74:	58 01       	movw	r10, r16
      76:	62 01       	movw	r12, r4

00000078 <__trampolines_end>:
      78:	6e 61       	ori	r22, 0x1E	; 30
      7a:	6e 00       	.word	0x006e	; ????

0000007c <__c.2332>:
      7c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      8c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      9c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      ac:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      bc:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      cc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      dc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      ec:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      fc:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     10c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     11c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     12c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     13c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     14c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     15c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     16c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000017a <__ctors_end>:
     17a:	11 24       	eor	r1, r1
     17c:	1f be       	out	0x3f, r1	; 63
     17e:	cf ef       	ldi	r28, 0xFF	; 255
     180:	d8 e0       	ldi	r29, 0x08	; 8
     182:	de bf       	out	0x3e, r29	; 62
     184:	cd bf       	out	0x3d, r28	; 61

00000186 <__do_copy_data>:
     186:	11 e0       	ldi	r17, 0x01	; 1
     188:	a0 e0       	ldi	r26, 0x00	; 0
     18a:	b1 e0       	ldi	r27, 0x01	; 1
     18c:	ec e3       	ldi	r30, 0x3C	; 60
     18e:	f1 e2       	ldi	r31, 0x21	; 33
     190:	02 c0       	rjmp	.+4      	; 0x196 <__do_copy_data+0x10>
     192:	05 90       	lpm	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	a2 32       	cpi	r26, 0x22	; 34
     198:	b1 07       	cpc	r27, r17
     19a:	d9 f7       	brne	.-10     	; 0x192 <__do_copy_data+0xc>

0000019c <__do_clear_bss>:
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	a2 e2       	ldi	r26, 0x22	; 34
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <.do_clear_bss_start>

000001a4 <.do_clear_bss_loop>:
     1a4:	1d 92       	st	X+, r1

000001a6 <.do_clear_bss_start>:
     1a6:	a2 33       	cpi	r26, 0x32	; 50
     1a8:	b2 07       	cpc	r27, r18
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <.do_clear_bss_loop>
     1ac:	0e 94 07 06 	call	0xc0e	; 0xc0e <main>
     1b0:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <_exit>

000001b4 <__bad_interrupt>:
     1b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b8 <AtoD_Init>:
#include <avr/io.h>
#include <stdio.h>
#include "atd.h"

void AtoD_Init (AtoD_Channel chan)
{
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	1f 92       	push	r1
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
     1c2:	89 83       	std	Y+1, r24	; 0x01
  PRR &= ~(1 << PRADC); // turn on A/D module in power reduction register
     1c4:	84 e6       	ldi	r24, 0x64	; 100
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	24 e6       	ldi	r18, 0x64	; 100
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	f9 01       	movw	r30, r18
     1ce:	20 81       	ld	r18, Z
     1d0:	2e 7f       	andi	r18, 0xFE	; 254
     1d2:	fc 01       	movw	r30, r24
     1d4:	20 83       	st	Z, r18
  
  ADMUX = 0b00000000;   // Internal Vref off, right-aligned, ADC0 (28.9.1)  
     1d6:	8c e7       	ldi	r24, 0x7C	; 124
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	fc 01       	movw	r30, r24
     1dc:	10 82       	st	Z, r1
  ADCSRB = 0b00000000;  // default, no comparator, free running mode    
     1de:	8b e7       	ldi	r24, 0x7B	; 123
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	fc 01       	movw	r30, r24
     1e4:	10 82       	st	Z, r1
  
  // use support function to set channel
  AtoD_SetChannel(chan);
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	0e 94 00 01 	call	0x200	; 0x200 <AtoD_SetChannel>
  
  ADCSRA = 0b11100111;  // turn on AD, prescale 128, ADATE needs to be on? (28.9.2)
     1ec:	8a e7       	ldi	r24, 0x7A	; 122
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	27 ee       	ldi	r18, 0xE7	; 231
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
}
     1f6:	00 00       	nop
     1f8:	0f 90       	pop	r0
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <AtoD_SetChannel>:

void AtoD_SetChannel (AtoD_Channel chan)
{
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	1f 92       	push	r1
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	89 83       	std	Y+1, r24	; 0x01
  switch (chan) 
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	88 2f       	mov	r24, r24
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	09 2e       	mov	r0, r25
     214:	00 0c       	add	r0, r0
     216:	aa 0b       	sbc	r26, r26
     218:	bb 0b       	sbc	r27, r27
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	27 e0       	ldi	r18, 0x07	; 7
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	84 1b       	sub	r24, r20
     224:	95 0b       	sbc	r25, r21
     226:	28 17       	cp	r18, r24
     228:	39 07       	cpc	r19, r25
     22a:	08 f4       	brcc	.+2      	; 0x22e <AtoD_SetChannel+0x2e>
     22c:	55 c0       	rjmp	.+170    	; 0x2d8 <AtoD_SetChannel+0xd8>
     22e:	8c 5c       	subi	r24, 0xCC	; 204
     230:	9f 4f       	sbci	r25, 0xFF	; 255
     232:	fc 01       	movw	r30, r24
     234:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__tablejump2__>
  {
    case AtoD_Channel_0:
      DIDR0 |= 0b00000001;  // kill digital input for channel 0
     238:	8e e7       	ldi	r24, 0x7E	; 126
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	2e e7       	ldi	r18, 0x7E	; 126
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	f9 01       	movw	r30, r18
     242:	20 81       	ld	r18, Z
     244:	21 60       	ori	r18, 0x01	; 1
     246:	fc 01       	movw	r30, r24
     248:	20 83       	st	Z, r18
      break;
     24a:	4a c0       	rjmp	.+148    	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_1:
      DIDR0 |= 0b00000010;  // kill digital input for channel 0
     24c:	8e e7       	ldi	r24, 0x7E	; 126
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	2e e7       	ldi	r18, 0x7E	; 126
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	20 81       	ld	r18, Z
     258:	22 60       	ori	r18, 0x02	; 2
     25a:	fc 01       	movw	r30, r24
     25c:	20 83       	st	Z, r18
      break;
     25e:	40 c0       	rjmp	.+128    	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_2:
      DIDR0 |= 0b00000100;  // kill digital input for channel 0
     260:	8e e7       	ldi	r24, 0x7E	; 126
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	2e e7       	ldi	r18, 0x7E	; 126
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	f9 01       	movw	r30, r18
     26a:	20 81       	ld	r18, Z
     26c:	24 60       	ori	r18, 0x04	; 4
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
      break;
     272:	36 c0       	rjmp	.+108    	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_3:
      DIDR0 |= 0b00001000;  // kill digital input for channel 0
     274:	8e e7       	ldi	r24, 0x7E	; 126
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	2e e7       	ldi	r18, 0x7E	; 126
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	f9 01       	movw	r30, r18
     27e:	20 81       	ld	r18, Z
     280:	28 60       	ori	r18, 0x08	; 8
     282:	fc 01       	movw	r30, r24
     284:	20 83       	st	Z, r18
      break;
     286:	2c c0       	rjmp	.+88     	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_4:
      DIDR0 |= 0b00010000;  // kill digital input for channel 0
     288:	8e e7       	ldi	r24, 0x7E	; 126
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	2e e7       	ldi	r18, 0x7E	; 126
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	f9 01       	movw	r30, r18
     292:	20 81       	ld	r18, Z
     294:	20 61       	ori	r18, 0x10	; 16
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
      break;
     29a:	22 c0       	rjmp	.+68     	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_5:
      DIDR0 |= 0b00100000;  // kill digital input for channel 0
     29c:	8e e7       	ldi	r24, 0x7E	; 126
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	2e e7       	ldi	r18, 0x7E	; 126
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	f9 01       	movw	r30, r18
     2a6:	20 81       	ld	r18, Z
     2a8:	20 62       	ori	r18, 0x20	; 32
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
      break;
     2ae:	18 c0       	rjmp	.+48     	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_6:
      DIDR0 |= 0b01000000;  // kill digital input for channel 0
     2b0:	8e e7       	ldi	r24, 0x7E	; 126
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	2e e7       	ldi	r18, 0x7E	; 126
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	f9 01       	movw	r30, r18
     2ba:	20 81       	ld	r18, Z
     2bc:	20 64       	ori	r18, 0x40	; 64
     2be:	fc 01       	movw	r30, r24
     2c0:	20 83       	st	Z, r18
      break;
     2c2:	0e c0       	rjmp	.+28     	; 0x2e0 <AtoD_SetChannel+0xe0>
    case AtoD_Channel_7:
      DIDR0 |= 0b10000000;  // kill digital input for channel 0
     2c4:	8e e7       	ldi	r24, 0x7E	; 126
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	2e e7       	ldi	r18, 0x7E	; 126
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	f9 01       	movw	r30, r18
     2ce:	20 81       	ld	r18, Z
     2d0:	20 68       	ori	r18, 0x80	; 128
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 83       	st	Z, r18
      break;
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <AtoD_SetChannel+0xe0>
    default:               // other cases don't require digital inputs 
      DIDR0 = 0b00000000;  // all A/D channels as digital inputs
     2d8:	8e e7       	ldi	r24, 0x7E	; 126
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	fc 01       	movw	r30, r24
     2de:	10 82       	st	Z, r1
  }      
  
  // channel selection
  ADMUX &= 0b11110000;  // clear channel selection
     2e0:	8c e7       	ldi	r24, 0x7C	; 124
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	2c e7       	ldi	r18, 0x7C	; 124
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	f9 01       	movw	r30, r18
     2ea:	20 81       	ld	r18, Z
     2ec:	20 7f       	andi	r18, 0xF0	; 240
     2ee:	fc 01       	movw	r30, r24
     2f0:	20 83       	st	Z, r18
  ADMUX |= chan;        // set back channel selection bits
     2f2:	8c e7       	ldi	r24, 0x7C	; 124
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	2c e7       	ldi	r18, 0x7C	; 124
     2f8:	30 e0       	ldi	r19, 0x00	; 0
     2fa:	f9 01       	movw	r30, r18
     2fc:	30 81       	ld	r19, Z
     2fe:	29 81       	ldd	r18, Y+1	; 0x01
     300:	23 2b       	or	r18, r19
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18
     306:	00 00       	nop
     308:	0f 90       	pop	r0
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <I2C_Init>:
//  won't typically be greater than 16MHz, and the I2C rate won't
//  be slower than 100kHz, unless the user wants to run the I2C rate
//  much slower than 100kHz?
// return -1 if rate unreachable
int I2C_Init (unsigned long ulBusRate, I2C_BusRate sclRate)
{
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	29 97       	sbiw	r28, 0x09	; 9
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
     328:	6d 83       	std	Y+5, r22	; 0x05
     32a:	7e 83       	std	Y+6, r23	; 0x06
     32c:	8f 83       	std	Y+7, r24	; 0x07
     32e:	98 87       	std	Y+8, r25	; 0x08
     330:	49 87       	std	Y+9, r20	; 0x09
	// start will power off all modules...
	// ensure power is on : TWI
	PRR &= 0b01111111;
     332:	84 e6       	ldi	r24, 0x64	; 100
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	24 e6       	ldi	r18, 0x64	; 100
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	f9 01       	movw	r30, r18
     33c:	20 81       	ld	r18, Z
     33e:	2f 77       	andi	r18, 0x7F	; 127
     340:	fc 01       	movw	r30, r24
     342:	20 83       	st	Z, r18

	float fac = 0;
     344:	19 82       	std	Y+1, r1	; 0x01
     346:	1a 82       	std	Y+2, r1	; 0x02
     348:	1b 82       	std	Y+3, r1	; 0x03
     34a:	1c 82       	std	Y+4, r1	; 0x04

  // precision here isn't necessary
	switch (sclRate)
     34c:	89 85       	ldd	r24, Y+9	; 0x09
     34e:	88 2f       	mov	r24, r24
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	00 97       	sbiw	r24, 0x00	; 0
     354:	19 f0       	breq	.+6      	; 0x35c <I2C_Init+0x4c>
     356:	01 97       	sbiw	r24, 0x01	; 1
     358:	61 f1       	breq	.+88     	; 0x3b2 <I2C_Init+0xa2>
     35a:	56 c0       	rjmp	.+172    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		case I2CBus100:
			fac = ((ulBusRate / 2.0f) / 100000.0f) - 8;
     35c:	6d 81       	ldd	r22, Y+5	; 0x05
     35e:	7e 81       	ldd	r23, Y+6	; 0x06
     360:	8f 81       	ldd	r24, Y+7	; 0x07
     362:	98 85       	ldd	r25, Y+8	; 0x08
     364:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__floatunsisf>
     368:	dc 01       	movw	r26, r24
     36a:	cb 01       	movw	r24, r22
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e4       	ldi	r21, 0x40	; 64
     374:	bc 01       	movw	r22, r24
     376:	cd 01       	movw	r24, r26
     378:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__divsf3>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	20 e0       	ldi	r18, 0x00	; 0
     382:	30 e5       	ldi	r19, 0x50	; 80
     384:	43 ec       	ldi	r20, 0xC3	; 195
     386:	57 e4       	ldi	r21, 0x47	; 71
     388:	bc 01       	movw	r22, r24
     38a:	cd 01       	movw	r24, r26
     38c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__divsf3>
     390:	dc 01       	movw	r26, r24
     392:	cb 01       	movw	r24, r22
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	51 e4       	ldi	r21, 0x41	; 65
     39c:	bc 01       	movw	r22, r24
     39e:	cd 01       	movw	r24, r26
     3a0:	0e 94 65 09 	call	0x12ca	; 0x12ca <__subsf3>
     3a4:	dc 01       	movw	r26, r24
     3a6:	cb 01       	movw	r24, r22
     3a8:	89 83       	std	Y+1, r24	; 0x01
     3aa:	9a 83       	std	Y+2, r25	; 0x02
     3ac:	ab 83       	std	Y+3, r26	; 0x03
     3ae:	bc 83       	std	Y+4, r27	; 0x04
			break;
     3b0:	2b c0       	rjmp	.+86     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		case I2CBus400:
			fac = ((ulBusRate / 2.0f) / 400000.0f) - 8;
     3b2:	6d 81       	ldd	r22, Y+5	; 0x05
     3b4:	7e 81       	ldd	r23, Y+6	; 0x06
     3b6:	8f 81       	ldd	r24, Y+7	; 0x07
     3b8:	98 85       	ldd	r25, Y+8	; 0x08
     3ba:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__floatunsisf>
     3be:	dc 01       	movw	r26, r24
     3c0:	cb 01       	movw	r24, r22
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	50 e4       	ldi	r21, 0x40	; 64
     3ca:	bc 01       	movw	r22, r24
     3cc:	cd 01       	movw	r24, r26
     3ce:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__divsf3>
     3d2:	dc 01       	movw	r26, r24
     3d4:	cb 01       	movw	r24, r22
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e5       	ldi	r19, 0x50	; 80
     3da:	43 ec       	ldi	r20, 0xC3	; 195
     3dc:	58 e4       	ldi	r21, 0x48	; 72
     3de:	bc 01       	movw	r22, r24
     3e0:	cd 01       	movw	r24, r26
     3e2:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__divsf3>
     3e6:	dc 01       	movw	r26, r24
     3e8:	cb 01       	movw	r24, r22
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	51 e4       	ldi	r21, 0x41	; 65
     3f2:	bc 01       	movw	r22, r24
     3f4:	cd 01       	movw	r24, r26
     3f6:	0e 94 65 09 	call	0x12ca	; 0x12ca <__subsf3>
     3fa:	dc 01       	movw	r26, r24
     3fc:	cb 01       	movw	r24, r22
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	9a 83       	std	Y+2, r25	; 0x02
     402:	ab 83       	std	Y+3, r26	; 0x03
     404:	bc 83       	std	Y+4, r27	; 0x04
			break;
     406:	00 00       	nop
	}

	// fac must fit into 8 bits
	if (fac < 1 || fac > 255)
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e8       	ldi	r20, 0x80	; 128
     40e:	5f e3       	ldi	r21, 0x3F	; 63
     410:	69 81       	ldd	r22, Y+1	; 0x01
     412:	7a 81       	ldd	r23, Y+2	; 0x02
     414:	8b 81       	ldd	r24, Y+3	; 0x03
     416:	9c 81       	ldd	r25, Y+4	; 0x04
     418:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__cmpsf2>
     41c:	88 23       	and	r24, r24
     41e:	64 f0       	brlt	.+24     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	4f e7       	ldi	r20, 0x7F	; 127
     426:	53 e4       	ldi	r21, 0x43	; 67
     428:	69 81       	ldd	r22, Y+1	; 0x01
     42a:	7a 81       	ldd	r23, Y+2	; 0x02
     42c:	8b 81       	ldd	r24, Y+3	; 0x03
     42e:	9c 81       	ldd	r25, Y+4	; 0x04
     430:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__gesf2>
     434:	18 16       	cp	r1, r24
     436:	1c f4       	brge	.+6      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
		return -1;
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	9f ef       	ldi	r25, 0xFF	; 255
     43c:	17 c0       	rjmp	.+46     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>

	// set rate
	TWBR = (unsigned char)fac;
     43e:	08 eb       	ldi	r16, 0xB8	; 184
     440:	10 e0       	ldi	r17, 0x00	; 0
     442:	69 81       	ldd	r22, Y+1	; 0x01
     444:	7a 81       	ldd	r23, Y+2	; 0x02
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	9c 81       	ldd	r25, Y+4	; 0x04
     44a:	0e 94 49 0a 	call	0x1492	; 0x1492 <__fixunssfsi>
     44e:	dc 01       	movw	r26, r24
     450:	cb 01       	movw	r24, r22
     452:	f8 01       	movw	r30, r16
     454:	80 83       	st	Z, r24

	// power on I2C to grab module pins
	TWCR |= 0b00000100;
     456:	8c eb       	ldi	r24, 0xBC	; 188
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	2c eb       	ldi	r18, 0xBC	; 188
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	f9 01       	movw	r30, r18
     460:	20 81       	ld	r18, Z
     462:	24 60       	ori	r18, 0x04	; 4
     464:	fc 01       	movw	r30, r24
     466:	20 83       	st	Z, r18

	return 0;
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
}
     46c:	29 96       	adiw	r28, 0x09	; 9
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <I2C_Scan>:

// assume 128-byte buffer provided for scan results
void I2C_Scan (unsigned char * results)
{
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	00 d0       	rcall	.+0      	; 0x488 <I2C_Scan+0x6>
     488:	1f 92       	push	r1
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	9b 83       	std	Y+3, r25	; 0x03
     490:	8a 83       	std	Y+2, r24	; 0x02
	for (unsigned char addr = 0x01; addr <= 0x7E; ++addr)
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	89 83       	std	Y+1, r24	; 0x01
     496:	2e c0       	rjmp	.+92     	; 0x4f4 <I2C_Scan+0x72>
	{
		if (!I2C_Start(addr, I2C_WRITE))
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	0e 94 84 02 	call	0x508	; 0x508 <I2C_Start>
     4a2:	89 2b       	or	r24, r25
     4a4:	59 f4       	brne	.+22     	; 0x4bc <I2C_Scan+0x3a>
			results[addr] = addr;			
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	88 2f       	mov	r24, r24
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	2a 81       	ldd	r18, Y+2	; 0x02
     4ae:	3b 81       	ldd	r19, Y+3	; 0x03
     4b0:	82 0f       	add	r24, r18
     4b2:	93 1f       	adc	r25, r19
     4b4:	29 81       	ldd	r18, Y+1	; 0x01
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
     4ba:	09 c0       	rjmp	.+18     	; 0x4ce <I2C_Scan+0x4c>
		else
			results[addr] = 0;				
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	88 2f       	mov	r24, r24
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	2a 81       	ldd	r18, Y+2	; 0x02
     4c4:	3b 81       	ldd	r19, Y+3	; 0x03
     4c6:	82 0f       	add	r24, r18
     4c8:	93 1f       	adc	r25, r19
     4ca:	fc 01       	movw	r30, r24
     4cc:	10 82       	st	Z, r1

		// send stop
		TWCR = 0b10010100;
     4ce:	8c eb       	ldi	r24, 0xBC	; 188
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	24 e9       	ldi	r18, 0x94	; 148
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18

		// wait for stop to automatically clear (stop completed)
		while (TWCR & 0x10)
     4d8:	00 00       	nop
     4da:	8c eb       	ldi	r24, 0xBC	; 188
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	fc 01       	movw	r30, r24
     4e0:	80 81       	ld	r24, Z
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	80 71       	andi	r24, 0x10	; 16
     4e8:	99 27       	eor	r25, r25
     4ea:	89 2b       	or	r24, r25
     4ec:	b1 f7       	brne	.-20     	; 0x4da <I2C_Scan+0x58>
}

// assume 128-byte buffer provided for scan results
void I2C_Scan (unsigned char * results)
{
	for (unsigned char addr = 0x01; addr <= 0x7E; ++addr)
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	8f 5f       	subi	r24, 0xFF	; 255
     4f2:	89 83       	std	Y+1, r24	; 0x01
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	8f 37       	cpi	r24, 0x7F	; 127
     4f8:	78 f2       	brcs	.-98     	; 0x498 <I2C_Scan+0x16>

		// wait for stop to automatically clear (stop completed)
		while (TWCR & 0x10)
		;
	}
}
     4fa:	00 00       	nop
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <I2C_Start>:

int I2C_Start (unsigned char uc7Addr, int bRead)
{
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	00 d0       	rcall	.+0      	; 0x50e <I2C_Start+0x6>
     50e:	1f 92       	push	r1
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	89 83       	std	Y+1, r24	; 0x01
     516:	7b 83       	std	Y+3, r23	; 0x03
     518:	6a 83       	std	Y+2, r22	; 0x02
	// send start
	TWCR = 0b10100100;
     51a:	8c eb       	ldi	r24, 0xBC	; 188
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	24 ea       	ldi	r18, 0xA4	; 164
     520:	fc 01       	movw	r30, r24
     522:	20 83       	st	Z, r18
	
	// wait for operation to complete
	while (!(TWCR & 0x80))
     524:	00 00       	nop
     526:	8c eb       	ldi	r24, 0xBC	; 188
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	fc 01       	movw	r30, r24
     52c:	80 81       	ld	r24, Z
     52e:	88 23       	and	r24, r24
     530:	d4 f7       	brge	.-12     	; 0x526 <I2C_Start+0x1e>
	  ;

	// ensure status says START sent (or restart?)
	if (!((TWSR & 0b11111000) == 0x08 || (TWSR & 0b11111000) == 0x10))
     532:	89 eb       	ldi	r24, 0xB9	; 185
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	fc 01       	movw	r30, r24
     538:	80 81       	ld	r24, Z
     53a:	88 2f       	mov	r24, r24
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	88 7f       	andi	r24, 0xF8	; 248
     540:	99 27       	eor	r25, r25
     542:	08 97       	sbiw	r24, 0x08	; 8
     544:	69 f0       	breq	.+26     	; 0x560 <I2C_Start+0x58>
     546:	89 eb       	ldi	r24, 0xB9	; 185
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	fc 01       	movw	r30, r24
     54c:	80 81       	ld	r24, Z
     54e:	88 2f       	mov	r24, r24
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	88 7f       	andi	r24, 0xF8	; 248
     554:	99 27       	eor	r25, r25
     556:	40 97       	sbiw	r24, 0x10	; 16
     558:	19 f0       	breq	.+6      	; 0x560 <I2C_Start+0x58>
	  return -1;
     55a:	8f ef       	ldi	r24, 0xFF	; 255
     55c:	9f ef       	ldi	r25, 0xFF	; 255
     55e:	49 c0       	rjmp	.+146    	; 0x5f2 <I2C_Start+0xea>

	// now send address with read or write
	if (bRead)
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	9b 81       	ldd	r25, Y+3	; 0x03
     564:	89 2b       	or	r24, r25
     566:	21 f1       	breq	.+72     	; 0x5b0 <I2C_Start+0xa8>
    // debug, 500us delay for pedo
    //for (int i = 0; i < 16000; i++)
    //  ;
        
		// enter master read mode
		TWDR = (uc7Addr << 1) | 0x01;
     568:	8b eb       	ldi	r24, 0xBB	; 187
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	29 81       	ldd	r18, Y+1	; 0x01
     56e:	22 2f       	mov	r18, r18
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	22 0f       	add	r18, r18
     574:	33 1f       	adc	r19, r19
     576:	21 60       	ori	r18, 0x01	; 1
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18

		// clear TWINT, no START, keep TWI enabled
		TWCR = 0b10000100;
     57c:	8c eb       	ldi	r24, 0xBC	; 188
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	24 e8       	ldi	r18, 0x84	; 132
     582:	fc 01       	movw	r30, r24
     584:	20 83       	st	Z, r18
		
		// wait for operation to complete
		while (!(TWCR & 0x80))
     586:	00 00       	nop
     588:	8c eb       	ldi	r24, 0xBC	; 188
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	fc 01       	movw	r30, r24
     58e:	80 81       	ld	r24, Z
     590:	88 23       	and	r24, r24
     592:	d4 f7       	brge	.-12     	; 0x588 <I2C_Start+0x80>
		  ;

		// look for ADDR+R sent with ACK
		if ((TWSR & 0b11111000) != 0x40)
     594:	89 eb       	ldi	r24, 0xB9	; 185
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	fc 01       	movw	r30, r24
     59a:	80 81       	ld	r24, Z
     59c:	88 2f       	mov	r24, r24
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	88 7f       	andi	r24, 0xF8	; 248
     5a2:	99 27       	eor	r25, r25
     5a4:	80 34       	cpi	r24, 0x40	; 64
     5a6:	91 05       	cpc	r25, r1
     5a8:	11 f1       	breq	.+68     	; 0x5ee <I2C_Start+0xe6>
		  return -2;
     5aa:	8e ef       	ldi	r24, 0xFE	; 254
     5ac:	9f ef       	ldi	r25, 0xFF	; 255
     5ae:	21 c0       	rjmp	.+66     	; 0x5f2 <I2C_Start+0xea>
    // debug, 500us delay for pedo
    //for (int i = 0; i < 16000; i++)
    //  ;
    
		// enter master write mode
		TWDR = uc7Addr << 1;
     5b0:	8b eb       	ldi	r24, 0xBB	; 187
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	29 81       	ldd	r18, Y+1	; 0x01
     5b6:	22 0f       	add	r18, r18
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 83       	st	Z, r18

		// clear TWINT, no START, keep TWI enabled
		TWCR = 0b10000100;
     5bc:	8c eb       	ldi	r24, 0xBC	; 188
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	24 e8       	ldi	r18, 0x84	; 132
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 83       	st	Z, r18
		
		// wait for operation to complete
		while (!(TWCR & 0x80))
     5c6:	00 00       	nop
     5c8:	8c eb       	ldi	r24, 0xBC	; 188
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	fc 01       	movw	r30, r24
     5ce:	80 81       	ld	r24, Z
     5d0:	88 23       	and	r24, r24
     5d2:	d4 f7       	brge	.-12     	; 0x5c8 <I2C_Start+0xc0>
		  ;

		// look for ADDR+W sent with ACK
		if ((TWSR & 0b11111000) != 0x18)
     5d4:	89 eb       	ldi	r24, 0xB9	; 185
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	fc 01       	movw	r30, r24
     5da:	80 81       	ld	r24, Z
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	88 7f       	andi	r24, 0xF8	; 248
     5e2:	99 27       	eor	r25, r25
     5e4:	48 97       	sbiw	r24, 0x18	; 24
     5e6:	19 f0       	breq	.+6      	; 0x5ee <I2C_Start+0xe6>
		  return -2;
     5e8:	8e ef       	ldi	r24, 0xFE	; 254
     5ea:	9f ef       	ldi	r25, 0xFF	; 255
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <I2C_Start+0xea>
	}

	return 0;
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
}
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <I2C_Read8>:

// assumes transaction is open
int I2C_Read8 (unsigned char *ucData, int bAck, int bStop)
{
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
     602:	00 d0       	rcall	.+0      	; 0x604 <I2C_Read8+0x6>
     604:	00 d0       	rcall	.+0      	; 0x606 <I2C_Read8+0x8>
     606:	00 d0       	rcall	.+0      	; 0x608 <I2C_Read8+0xa>
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	9a 83       	std	Y+2, r25	; 0x02
     60e:	89 83       	std	Y+1, r24	; 0x01
     610:	7c 83       	std	Y+4, r23	; 0x04
     612:	6b 83       	std	Y+3, r22	; 0x03
     614:	5e 83       	std	Y+6, r21	; 0x06
     616:	4d 83       	std	Y+5, r20	; 0x05
	// clear TWINT, keep TWI enabled
	if (bAck)
     618:	8b 81       	ldd	r24, Y+3	; 0x03
     61a:	9c 81       	ldd	r25, Y+4	; 0x04
     61c:	89 2b       	or	r24, r25
     61e:	31 f0       	breq	.+12     	; 0x62c <I2C_Read8+0x2e>
	  TWCR = 0b11000100;
     620:	8c eb       	ldi	r24, 0xBC	; 188
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	24 ec       	ldi	r18, 0xC4	; 196
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
     62a:	05 c0       	rjmp	.+10     	; 0x636 <I2C_Read8+0x38>
	else
	  TWCR = 0b10000100;
     62c:	8c eb       	ldi	r24, 0xBC	; 188
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	24 e8       	ldi	r18, 0x84	; 132
     632:	fc 01       	movw	r30, r24
     634:	20 83       	st	Z, r18

	// look for data sent, with TWINT bit
	while (!(TWCR & 0x80))
     636:	00 00       	nop
     638:	8c eb       	ldi	r24, 0xBC	; 188
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	fc 01       	movw	r30, r24
     63e:	80 81       	ld	r24, Z
     640:	88 23       	and	r24, r24
     642:	d4 f7       	brge	.-12     	; 0x638 <I2C_Read8+0x3a>
	  ;

	if (bAck)
     644:	8b 81       	ldd	r24, Y+3	; 0x03
     646:	9c 81       	ldd	r25, Y+4	; 0x04
     648:	89 2b       	or	r24, r25
     64a:	71 f0       	breq	.+28     	; 0x668 <I2C_Read8+0x6a>
	{
		// look for data received, ack returned
		if ((TWSR & 0b11111000) != 0x50)
     64c:	89 eb       	ldi	r24, 0xB9	; 185
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	fc 01       	movw	r30, r24
     652:	80 81       	ld	r24, Z
     654:	88 2f       	mov	r24, r24
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	88 7f       	andi	r24, 0xF8	; 248
     65a:	99 27       	eor	r25, r25
     65c:	80 35       	cpi	r24, 0x50	; 80
     65e:	91 05       	cpc	r25, r1
     660:	89 f0       	breq	.+34     	; 0x684 <I2C_Read8+0x86>
		  return -3;
     662:	8d ef       	ldi	r24, 0xFD	; 253
     664:	9f ef       	ldi	r25, 0xFF	; 255
     666:	2c c0       	rjmp	.+88     	; 0x6c0 <I2C_Read8+0xc2>
	}
	else
	{
		// look for data received, ack not returned
		if ((TWSR & 0b11111000) != 0x58)
     668:	89 eb       	ldi	r24, 0xB9	; 185
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	fc 01       	movw	r30, r24
     66e:	80 81       	ld	r24, Z
     670:	88 2f       	mov	r24, r24
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	88 7f       	andi	r24, 0xF8	; 248
     676:	99 27       	eor	r25, r25
     678:	88 35       	cpi	r24, 0x58	; 88
     67a:	91 05       	cpc	r25, r1
     67c:	19 f0       	breq	.+6      	; 0x684 <I2C_Read8+0x86>
		  return -3;
     67e:	8d ef       	ldi	r24, 0xFD	; 253
     680:	9f ef       	ldi	r25, 0xFF	; 255
     682:	1e c0       	rjmp	.+60     	; 0x6c0 <I2C_Read8+0xc2>
	}

	// read the data byte
	*ucData = TWDR;
     684:	8b eb       	ldi	r24, 0xBB	; 187
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	fc 01       	movw	r30, r24
     68a:	20 81       	ld	r18, Z
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	9a 81       	ldd	r25, Y+2	; 0x02
     690:	fc 01       	movw	r30, r24
     692:	20 83       	st	Z, r18
	
	// if stop requested, send it
	if (bStop)
     694:	8d 81       	ldd	r24, Y+5	; 0x05
     696:	9e 81       	ldd	r25, Y+6	; 0x06
     698:	89 2b       	or	r24, r25
     69a:	81 f0       	breq	.+32     	; 0x6bc <I2C_Read8+0xbe>
	{
		// send STOP
		TWCR = 0b10010100;
     69c:	8c eb       	ldi	r24, 0xBC	; 188
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	24 e9       	ldi	r18, 0x94	; 148
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 83       	st	Z, r18

		// wait for stop to automatically clear (stop completed)
		while (TWCR & 0x10)
     6a6:	00 00       	nop
     6a8:	8c eb       	ldi	r24, 0xBC	; 188
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	fc 01       	movw	r30, r24
     6ae:	80 81       	ld	r24, Z
     6b0:	88 2f       	mov	r24, r24
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	80 71       	andi	r24, 0x10	; 16
     6b6:	99 27       	eor	r25, r25
     6b8:	89 2b       	or	r24, r25
     6ba:	b1 f7       	brne	.-20     	; 0x6a8 <I2C_Read8+0xaa>
			;
	}

	return 0;
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
}
     6c0:	26 96       	adiw	r28, 0x06	; 6
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <I2C_Write8>:

// assumes transaction is open
int I2C_Write8 (unsigned char ucData, int bStop)
{
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	00 d0       	rcall	.+0      	; 0x6d8 <I2C_Write8+0x6>
     6d8:	1f 92       	push	r1
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	7b 83       	std	Y+3, r23	; 0x03
     6e2:	6a 83       	std	Y+2, r22	; 0x02
	// enter master write mode
	TWDR = ucData;
     6e4:	8b eb       	ldi	r24, 0xBB	; 187
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	29 81       	ldd	r18, Y+1	; 0x01
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 83       	st	Z, r18

	// clear TWINT, no START, keep TWI enabled
	TWCR = 0b10000100;
     6ee:	8c eb       	ldi	r24, 0xBC	; 188
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	24 e8       	ldi	r18, 0x84	; 132
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 83       	st	Z, r18
	
	// look for data sent, with TWINT bit
	while (!(TWCR & 0x80))
     6f8:	00 00       	nop
     6fa:	8c eb       	ldi	r24, 0xBC	; 188
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	fc 01       	movw	r30, r24
     700:	80 81       	ld	r24, Z
     702:	88 23       	and	r24, r24
     704:	d4 f7       	brge	.-12     	; 0x6fa <I2C_Write8+0x28>
	  ;

	// look for data sent with ACK
	if ((TWSR & 0b11111000) != 0x28)
     706:	89 eb       	ldi	r24, 0xB9	; 185
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	fc 01       	movw	r30, r24
     70c:	80 81       	ld	r24, Z
     70e:	88 2f       	mov	r24, r24
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	88 7f       	andi	r24, 0xF8	; 248
     714:	99 27       	eor	r25, r25
     716:	88 97       	sbiw	r24, 0x28	; 40
     718:	19 f0       	breq	.+6      	; 0x720 <I2C_Write8+0x4e>
	  return -3;
     71a:	8d ef       	ldi	r24, 0xFD	; 253
     71c:	9f ef       	ldi	r25, 0xFF	; 255
     71e:	16 c0       	rjmp	.+44     	; 0x74c <I2C_Write8+0x7a>
	
	// if stop requested, send it
	if (bStop)
     720:	8a 81       	ldd	r24, Y+2	; 0x02
     722:	9b 81       	ldd	r25, Y+3	; 0x03
     724:	89 2b       	or	r24, r25
     726:	81 f0       	breq	.+32     	; 0x748 <I2C_Write8+0x76>
	{
		// send STOP
		TWCR = 0b10010100;
     728:	8c eb       	ldi	r24, 0xBC	; 188
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	24 e9       	ldi	r18, 0x94	; 148
     72e:	fc 01       	movw	r30, r24
     730:	20 83       	st	Z, r18

		// wait for stop to automatically clear (stop completed)
		while (TWCR & 0x10)
     732:	00 00       	nop
     734:	8c eb       	ldi	r24, 0xBC	; 188
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	fc 01       	movw	r30, r24
     73a:	80 81       	ld	r24, Z
     73c:	88 2f       	mov	r24, r24
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	80 71       	andi	r24, 0x10	; 16
     742:	99 27       	eor	r25, r25
     744:	89 2b       	or	r24, r25
     746:	b1 f7       	brne	.-20     	; 0x734 <I2C_Write8+0x62>
			;
	}

	return 0;
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
}
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <SCI0_Init>:
  (void)sprintf(buff, "0x%4.4X", uiVal);
  SCI0_TxString (buff);

  if (tl)
    SCI0_TxString ("\r\n");
}
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	2c 97       	sbiw	r28, 0x0c	; 12
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	6b 83       	std	Y+3, r22	; 0x03
     772:	7c 83       	std	Y+4, r23	; 0x04
     774:	8d 83       	std	Y+5, r24	; 0x05
     776:	9e 83       	std	Y+6, r25	; 0x06
     778:	2f 83       	std	Y+7, r18	; 0x07
     77a:	38 87       	std	Y+8, r19	; 0x08
     77c:	49 87       	std	Y+9, r20	; 0x09
     77e:	5a 87       	std	Y+10, r21	; 0x0a
     780:	1c 87       	std	Y+12, r17	; 0x0c
     782:	0b 87       	std	Y+11, r16	; 0x0b
     784:	8b 81       	ldd	r24, Y+3	; 0x03
     786:	9c 81       	ldd	r25, Y+4	; 0x04
     788:	ad 81       	ldd	r26, Y+5	; 0x05
     78a:	be 81       	ldd	r27, Y+6	; 0x06
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	aa 1f       	adc	r26, r26
     792:	bb 1f       	adc	r27, r27
     794:	9c 01       	movw	r18, r24
     796:	ad 01       	movw	r20, r26
     798:	22 0f       	add	r18, r18
     79a:	33 1f       	adc	r19, r19
     79c:	44 1f       	adc	r20, r20
     79e:	55 1f       	adc	r21, r21
     7a0:	22 0f       	add	r18, r18
     7a2:	33 1f       	adc	r19, r19
     7a4:	44 1f       	adc	r20, r20
     7a6:	55 1f       	adc	r21, r21
     7a8:	82 0f       	add	r24, r18
     7aa:	93 1f       	adc	r25, r19
     7ac:	a4 1f       	adc	r26, r20
     7ae:	b5 1f       	adc	r27, r21
     7b0:	68 94       	set
     7b2:	13 f8       	bld	r1, 3
     7b4:	b6 95       	lsr	r27
     7b6:	a7 95       	ror	r26
     7b8:	97 95       	ror	r25
     7ba:	87 95       	ror	r24
     7bc:	16 94       	lsr	r1
     7be:	d1 f7       	brne	.-12     	; 0x7b4 <SCI0_Init+0x5c>
     7c0:	2f 81       	ldd	r18, Y+7	; 0x07
     7c2:	38 85       	ldd	r19, Y+8	; 0x08
     7c4:	49 85       	ldd	r20, Y+9	; 0x09
     7c6:	5a 85       	ldd	r21, Y+10	; 0x0a
     7c8:	bc 01       	movw	r22, r24
     7ca:	cd 01       	movw	r24, r26
     7cc:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__udivmodsi4>
     7d0:	da 01       	movw	r26, r20
     7d2:	c9 01       	movw	r24, r18
     7d4:	05 96       	adiw	r24, 0x05	; 5
     7d6:	a1 1d       	adc	r26, r1
     7d8:	b1 1d       	adc	r27, r1
     7da:	2a e0       	ldi	r18, 0x0A	; 10
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	bc 01       	movw	r22, r24
     7e4:	cd 01       	movw	r24, r26
     7e6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__udivmodsi4>
     7ea:	da 01       	movw	r26, r20
     7ec:	c9 01       	movw	r24, r18
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	9a 83       	std	Y+2, r25	; 0x02
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	9a 81       	ldd	r25, Y+2	; 0x02
     7f8:	81 15       	cp	r24, r1
     7fa:	90 41       	sbci	r25, 0x10	; 16
     7fc:	18 f0       	brcs	.+6      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7fe:	8f ef       	ldi	r24, 0xFF	; 255
     800:	9f ef       	ldi	r25, 0xFF	; 255
     802:	2f c0       	rjmp	.+94     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
     804:	84 e6       	ldi	r24, 0x64	; 100
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	24 e6       	ldi	r18, 0x64	; 100
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	f9 01       	movw	r30, r18
     80e:	20 81       	ld	r18, Z
     810:	2d 7f       	andi	r18, 0xFD	; 253
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18
     816:	85 ec       	ldi	r24, 0xC5	; 197
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	29 81       	ldd	r18, Y+1	; 0x01
     81c:	3a 81       	ldd	r19, Y+2	; 0x02
     81e:	23 2f       	mov	r18, r19
     820:	33 27       	eor	r19, r19
     822:	fc 01       	movw	r30, r24
     824:	20 83       	st	Z, r18
     826:	84 ec       	ldi	r24, 0xC4	; 196
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	29 81       	ldd	r18, Y+1	; 0x01
     82c:	fc 01       	movw	r30, r24
     82e:	20 83       	st	Z, r18
     830:	81 ec       	ldi	r24, 0xC1	; 193
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	28 e1       	ldi	r18, 0x18	; 24
     836:	fc 01       	movw	r30, r24
     838:	20 83       	st	Z, r18
     83a:	82 ec       	ldi	r24, 0xC2	; 194
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	26 e0       	ldi	r18, 0x06	; 6
     840:	fc 01       	movw	r30, r24
     842:	20 83       	st	Z, r18
     844:	8b 85       	ldd	r24, Y+11	; 0x0b
     846:	9c 85       	ldd	r25, Y+12	; 0x0c
     848:	89 2b       	or	r24, r25
     84a:	49 f0       	breq	.+18     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     84c:	81 ec       	ldi	r24, 0xC1	; 193
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	21 ec       	ldi	r18, 0xC1	; 193
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	f9 01       	movw	r30, r18
     856:	20 81       	ld	r18, Z
     858:	20 68       	ori	r18, 0x80	; 128
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	2c 96       	adiw	r28, 0x0c	; 12
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	08 95       	ret

00000878 <SCI0_BSend>:
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	1f 92       	push	r1
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	89 83       	std	Y+1, r24	; 0x01
     884:	00 00       	nop
     886:	80 ec       	ldi	r24, 0xC0	; 192
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	fc 01       	movw	r30, r24
     88c:	80 81       	ld	r24, Z
     88e:	88 2f       	mov	r24, r24
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	80 72       	andi	r24, 0x20	; 32
     894:	99 27       	eor	r25, r25
     896:	89 2b       	or	r24, r25
     898:	b1 f3       	breq	.-20     	; 0x886 <SCI0_BSend+0xe>
     89a:	80 ec       	ldi	r24, 0xC0	; 192
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	fc 01       	movw	r30, r24
     8a0:	80 81       	ld	r24, Z
     8a2:	88 2f       	mov	r24, r24
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	80 74       	andi	r24, 0x40	; 64
     8a8:	99 27       	eor	r25, r25
     8aa:	89 2b       	or	r24, r25
     8ac:	29 f0       	breq	.+10     	; 0x8b8 <SCI0_BSend+0x40>
     8ae:	80 ec       	ldi	r24, 0xC0	; 192
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	20 e4       	ldi	r18, 0x40	; 64
     8b4:	fc 01       	movw	r30, r24
     8b6:	20 83       	st	Z, r18
     8b8:	86 ec       	ldi	r24, 0xC6	; 198
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	29 81       	ldd	r18, Y+1	; 0x01
     8be:	fc 01       	movw	r30, r24
     8c0:	20 83       	st	Z, r18
     8c2:	00 00       	nop
     8c4:	0f 90       	pop	r0
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <SCI0_TxString>:

void SCI0_TxString (char * buff)
{
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <SCI0_TxString+0x6>
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	9a 83       	std	Y+2, r25	; 0x02
     8d8:	89 83       	std	Y+1, r24	; 0x01
  while (*buff)
     8da:	0b c0       	rjmp	.+22     	; 0x8f2 <SCI0_TxString+0x26>
  {
    SCI0_BSend(*buff);
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	9a 81       	ldd	r25, Y+2	; 0x02
     8e0:	fc 01       	movw	r30, r24
     8e2:	80 81       	ld	r24, Z
     8e4:	0e 94 3c 04 	call	0x878	; 0x878 <SCI0_BSend>
    ++buff;
     8e8:	89 81       	ldd	r24, Y+1	; 0x01
     8ea:	9a 81       	ldd	r25, Y+2	; 0x02
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	9a 83       	std	Y+2, r25	; 0x02
     8f0:	89 83       	std	Y+1, r24	; 0x01
    SCI0_TxString ("\r\n");
}

void SCI0_TxString (char * buff)
{
  while (*buff)
     8f2:	89 81       	ldd	r24, Y+1	; 0x01
     8f4:	9a 81       	ldd	r25, Y+2	; 0x02
     8f6:	fc 01       	movw	r30, r24
     8f8:	80 81       	ld	r24, Z
     8fa:	88 23       	and	r24, r24
     8fc:	79 f7       	brne	.-34     	; 0x8dc <SCI0_TxString+0x10>
  {
    SCI0_BSend(*buff);
    ++buff;
  }
}
     8fe:	00 00       	nop
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <Timer_Init>:

#include <avr/io.h>
#include "timer.h"

void Timer_Init (Timer_Prescale pre, unsigned int uiInitialOffset)
{
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	00 d0       	rcall	.+0      	; 0x910 <Timer_Init+0x6>
     910:	1f 92       	push	r1
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	89 83       	std	Y+1, r24	; 0x01
     918:	7b 83       	std	Y+3, r23	; 0x03
     91a:	6a 83       	std	Y+2, r22	; 0x02
	// start code will power off all modules...
	// ensure power is on : Timer 1
	// PRR on 328P, PRR0 on 328PB
	PRR &= ~(1 << PRTIM1);
     91c:	84 e6       	ldi	r24, 0x64	; 100
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	24 e6       	ldi	r18, 0x64	; 100
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	27 7f       	andi	r18, 0xF7	; 247
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18

	// set prescale to requested rate
	TCCR1B = 0;		// noise canceler disabled, waveform generator normal
     92e:	81 e8       	ldi	r24, 0x81	; 129
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	fc 01       	movw	r30, r24
     934:	10 82       	st	Z, r1
	TCCR1B |= pre;	// put back requested prescale bits
     936:	81 e8       	ldi	r24, 0x81	; 129
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	21 e8       	ldi	r18, 0x81	; 129
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	f9 01       	movw	r30, r18
     940:	30 81       	ld	r19, Z
     942:	29 81       	ldd	r18, Y+1	; 0x01
     944:	23 2b       	or	r18, r19
     946:	fc 01       	movw	r30, r24
     948:	20 83       	st	Z, r18
	
	// setup initial event for output compare 1 A
	OCR1A = TCNT1 + uiInitialOffset;
     94a:	88 e8       	ldi	r24, 0x88	; 136
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	24 e8       	ldi	r18, 0x84	; 132
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	f9 01       	movw	r30, r18
     954:	40 81       	ld	r20, Z
     956:	51 81       	ldd	r21, Z+1	; 0x01
     958:	2a 81       	ldd	r18, Y+2	; 0x02
     95a:	3b 81       	ldd	r19, Y+3	; 0x03
     95c:	24 0f       	add	r18, r20
     95e:	35 1f       	adc	r19, r21
     960:	fc 01       	movw	r30, r24
     962:	31 83       	std	Z+1, r19	; 0x01
     964:	20 83       	st	Z, r18

	// setup interrupt for output compare
	// timer/counter 1, output compare A match interrupt enable
	TIMSK1 = 0b00000010;
     966:	8f e6       	ldi	r24, 0x6F	; 111
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	22 e0       	ldi	r18, 0x02	; 2
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
}
     970:	00 00       	nop
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <Back_Sens_InitAll>:
/************************************************************************/
/* Header Implementation                                                */
/************************************************************************/

void Back_Sens_InitAll(void)
{
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
	Back_Sens_InitSens(Back_Sens_L);
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 cf 04 	call	0x99e	; 0x99e <Back_Sens_InitSens>
	Back_Sens_InitSens(Back_Sens_R);
     98e:	88 e4       	ldi	r24, 0x48	; 72
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 cf 04 	call	0x99e	; 0x99e <Back_Sens_InitSens>
}
     996:	00 00       	nop
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <Back_Sens_InitSens>:

void Back_Sens_InitSens(int sens)
{
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <Back_Sens_InitSens+0x6>
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	9a 83       	std	Y+2, r25	; 0x02
     9aa:	89 83       	std	Y+1, r24	; 0x01
	DDRD &= ~sens; //input
     9ac:	8a e2       	ldi	r24, 0x2A	; 42
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	2a e2       	ldi	r18, 0x2A	; 42
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	f9 01       	movw	r30, r18
     9b6:	20 81       	ld	r18, Z
     9b8:	32 2f       	mov	r19, r18
     9ba:	29 81       	ldd	r18, Y+1	; 0x01
     9bc:	20 95       	com	r18
     9be:	23 23       	and	r18, r19
     9c0:	fc 01       	movw	r30, r24
     9c2:	20 83       	st	Z, r18
	
	PCMSK2 |= sens; // turn on PCINT18/19 pin mask (enable interrupts) (12.2.6)
     9c4:	8d e6       	ldi	r24, 0x6D	; 109
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	2d e6       	ldi	r18, 0x6D	; 109
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	f9 01       	movw	r30, r18
     9ce:	20 81       	ld	r18, Z
     9d0:	32 2f       	mov	r19, r18
     9d2:	29 81       	ldd	r18, Y+1	; 0x01
     9d4:	23 2b       	or	r18, r19
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
	PCICR |= 0b00000100; // turn on interrupts for group 2 (12.2.4)
     9da:	88 e6       	ldi	r24, 0x68	; 104
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	28 e6       	ldi	r18, 0x68	; 104
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	f9 01       	movw	r30, r18
     9e4:	20 81       	ld	r18, Z
     9e6:	24 60       	ori	r18, 0x04	; 4
     9e8:	fc 01       	movw	r30, r24
     9ea:	20 83       	st	Z, r18
}
     9ec:	00 00       	nop
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <GD03_Init>:
/************************************************************************/
/* Header Implementation                                                */
/************************************************************************/

void GD03_Init(void)
{
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
	AtoD_Init(AtoD_Channel_0); // pin 23
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <AtoD_Init>
}
     a06:	00 00       	nop
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <HCSR04_InitAll>:
	 {
		 duration = waitForEcho(device);
		 if(duration >= 0) distance = calculateDistance(duration);
	 }
	 return distance;
 }
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	0e 94 18 05 	call	0xa30	; 0xa30 <HCSR04_InitDevice>
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	0e 94 18 05 	call	0xa30	; 0xa30 <HCSR04_InitDevice>
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	0e 94 18 05 	call	0xa30	; 0xa30 <HCSR04_InitDevice>
     a28:	00 00       	nop
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <HCSR04_InitDevice>:
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	1f 92       	push	r1
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	88 2f       	mov	r24, r24
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	81 30       	cpi	r24, 0x01	; 1
     a44:	91 05       	cpc	r25, r1
     a46:	61 f1       	breq	.+88     	; 0xaa0 <HCSR04_InitDevice+0x70>
     a48:	82 30       	cpi	r24, 0x02	; 2
     a4a:	91 05       	cpc	r25, r1
     a4c:	09 f4       	brne	.+2      	; 0xa50 <HCSR04_InitDevice+0x20>
     a4e:	4d c0       	rjmp	.+154    	; 0xaea <HCSR04_InitDevice+0xba>
     a50:	89 2b       	or	r24, r25
     a52:	09 f0       	breq	.+2      	; 0xa56 <HCSR04_InitDevice+0x26>
     a54:	6f c0       	rjmp	.+222    	; 0xb34 <HCSR04_InitDevice+0x104>
     a56:	8a e2       	ldi	r24, 0x2A	; 42
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	2a e2       	ldi	r18, 0x2A	; 42
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	f9 01       	movw	r30, r18
     a60:	20 81       	ld	r18, Z
     a62:	20 62       	ori	r18, 0x20	; 32
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18
     a68:	8a e2       	ldi	r24, 0x2A	; 42
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	2a e2       	ldi	r18, 0x2A	; 42
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	f9 01       	movw	r30, r18
     a72:	20 81       	ld	r18, Z
     a74:	2f 7b       	andi	r18, 0xBF	; 191
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
     a7a:	8d e6       	ldi	r24, 0x6D	; 109
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	2d e6       	ldi	r18, 0x6D	; 109
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	f9 01       	movw	r30, r18
     a84:	20 81       	ld	r18, Z
     a86:	20 64       	ori	r18, 0x40	; 64
     a88:	fc 01       	movw	r30, r24
     a8a:	20 83       	st	Z, r18
     a8c:	88 e6       	ldi	r24, 0x68	; 104
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	28 e6       	ldi	r18, 0x68	; 104
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	f9 01       	movw	r30, r18
     a96:	20 81       	ld	r18, Z
     a98:	24 60       	ori	r18, 0x04	; 4
     a9a:	fc 01       	movw	r30, r24
     a9c:	20 83       	st	Z, r18
     a9e:	4a c0       	rjmp	.+148    	; 0xb34 <HCSR04_InitDevice+0x104>
     aa0:	8a e2       	ldi	r24, 0x2A	; 42
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	2a e2       	ldi	r18, 0x2A	; 42
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	f9 01       	movw	r30, r18
     aaa:	20 81       	ld	r18, Z
     aac:	20 68       	ori	r18, 0x80	; 128
     aae:	fc 01       	movw	r30, r24
     ab0:	20 83       	st	Z, r18
     ab2:	84 e2       	ldi	r24, 0x24	; 36
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	24 e2       	ldi	r18, 0x24	; 36
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	f9 01       	movw	r30, r18
     abc:	20 81       	ld	r18, Z
     abe:	2e 7f       	andi	r18, 0xFE	; 254
     ac0:	fc 01       	movw	r30, r24
     ac2:	20 83       	st	Z, r18
     ac4:	8b e6       	ldi	r24, 0x6B	; 107
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	2b e6       	ldi	r18, 0x6B	; 107
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	f9 01       	movw	r30, r18
     ace:	20 81       	ld	r18, Z
     ad0:	21 60       	ori	r18, 0x01	; 1
     ad2:	fc 01       	movw	r30, r24
     ad4:	20 83       	st	Z, r18
     ad6:	88 e6       	ldi	r24, 0x68	; 104
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	28 e6       	ldi	r18, 0x68	; 104
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	f9 01       	movw	r30, r18
     ae0:	20 81       	ld	r18, Z
     ae2:	21 60       	ori	r18, 0x01	; 1
     ae4:	fc 01       	movw	r30, r24
     ae6:	20 83       	st	Z, r18
     ae8:	25 c0       	rjmp	.+74     	; 0xb34 <HCSR04_InitDevice+0x104>
     aea:	84 e2       	ldi	r24, 0x24	; 36
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	24 e2       	ldi	r18, 0x24	; 36
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	f9 01       	movw	r30, r18
     af4:	20 81       	ld	r18, Z
     af6:	22 60       	ori	r18, 0x02	; 2
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18
     afc:	84 e2       	ldi	r24, 0x24	; 36
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	24 e2       	ldi	r18, 0x24	; 36
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	f9 01       	movw	r30, r18
     b06:	20 81       	ld	r18, Z
     b08:	2b 7f       	andi	r18, 0xFB	; 251
     b0a:	fc 01       	movw	r30, r24
     b0c:	20 83       	st	Z, r18
     b0e:	8b e6       	ldi	r24, 0x6B	; 107
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	2b e6       	ldi	r18, 0x6B	; 107
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	f9 01       	movw	r30, r18
     b18:	20 81       	ld	r18, Z
     b1a:	24 60       	ori	r18, 0x04	; 4
     b1c:	fc 01       	movw	r30, r24
     b1e:	20 83       	st	Z, r18
     b20:	88 e6       	ldi	r24, 0x68	; 104
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	28 e6       	ldi	r18, 0x68	; 104
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	f9 01       	movw	r30, r18
     b2a:	20 81       	ld	r18, Z
     b2c:	21 60       	ori	r18, 0x01	; 1
     b2e:	fc 01       	movw	r30, r24
     b30:	20 83       	st	Z, r18
     b32:	00 00       	nop
     b34:	00 00       	nop
     b36:	0f 90       	pop	r0
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <HCSR04_ISR>:

 void HCSR04_ISR()
 {
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	00 d0       	rcall	.+0      	; 0xb44 <HCSR04_ISR+0x6>
     b44:	cd b7       	in	r28, 0x3d	; 61
     b46:	de b7       	in	r29, 0x3e	; 62
	 // Only perform the check if there's an active device
	 if(activeDevice != HCSR04_None)
     b48:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b4c:	8a 30       	cpi	r24, 0x0A	; 10
     b4e:	09 f4       	brne	.+2      	; 0xb52 <HCSR04_ISR+0x14>
     b50:	58 c0       	rjmp	.+176    	; 0xc02 <HCSR04_ISR+0xc4>
	 {
		 int condition = 0;
     b52:	1a 82       	std	Y+2, r1	; 0x02
     b54:	19 82       	std	Y+1, r1	; 0x01
		 // determine the high condition for the active device
		 switch(activeDevice)
     b56:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b5a:	88 2f       	mov	r24, r24
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	91 05       	cpc	r25, r1
     b62:	89 f0       	breq	.+34     	; 0xb86 <HCSR04_ISR+0x48>
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	91 05       	cpc	r25, r1
     b68:	c9 f0       	breq	.+50     	; 0xb9c <HCSR04_ISR+0x5e>
     b6a:	89 2b       	or	r24, r25
     b6c:	09 f0       	breq	.+2      	; 0xb70 <HCSR04_ISR+0x32>
				break;
			 case HCSR04_R:
				condition = PINB & HCSR04_R_Echo;
				break;
			default:
				break;
     b6e:	21 c0       	rjmp	.+66     	; 0xbb2 <HCSR04_ISR+0x74>
		 int condition = 0;
		 // determine the high condition for the active device
		 switch(activeDevice)
		 {
			 case HCSR04_L:
				condition = PIND & HCSR04_L_Echo;
     b70:	89 e2       	ldi	r24, 0x29	; 41
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	fc 01       	movw	r30, r24
     b76:	80 81       	ld	r24, Z
     b78:	88 2f       	mov	r24, r24
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	80 74       	andi	r24, 0x40	; 64
     b7e:	99 27       	eor	r25, r25
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
				break;
     b84:	16 c0       	rjmp	.+44     	; 0xbb2 <HCSR04_ISR+0x74>
			 case HCSR04_C:
				condition = PINB & HCSR04_C_Echo;
     b86:	83 e2       	ldi	r24, 0x23	; 35
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	fc 01       	movw	r30, r24
     b8c:	80 81       	ld	r24, Z
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	81 70       	andi	r24, 0x01	; 1
     b94:	99 27       	eor	r25, r25
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
				break;
     b9a:	0b c0       	rjmp	.+22     	; 0xbb2 <HCSR04_ISR+0x74>
			 case HCSR04_R:
				condition = PINB & HCSR04_R_Echo;
     b9c:	83 e2       	ldi	r24, 0x23	; 35
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	fc 01       	movw	r30, r24
     ba2:	80 81       	ld	r24, Z
     ba4:	88 2f       	mov	r24, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	84 70       	andi	r24, 0x04	; 4
     baa:	99 27       	eor	r25, r25
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	89 83       	std	Y+1, r24	; 0x01
				break;
     bb0:	00 00       	nop
			default:
				break;
		 }
		 
		 // When the echo starts, track current TCNT value
		 if(condition)
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	9a 81       	ldd	r25, Y+2	; 0x02
     bb6:	89 2b       	or	r24, r25
     bb8:	89 f0       	breq	.+34     	; 0xbdc <HCSR04_ISR+0x9e>
		 {
			 echoTimeStart = TCNT1;
     bba:	84 e8       	ldi	r24, 0x84	; 132
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	fc 01       	movw	r30, r24
     bc0:	80 81       	ld	r24, Z
     bc2:	91 81       	ldd	r25, Z+1	; 0x01
     bc4:	cc 01       	movw	r24, r24
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
     bce:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
     bd2:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <__data_end+0x2>
     bd6:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <__data_end+0x3>
		 {
			 echoTimeEnd = TCNT1;
			 activeDevice = HCSR04_None;
		 }
	 }
 }
     bda:	13 c0       	rjmp	.+38     	; 0xc02 <HCSR04_ISR+0xc4>
			 echoTimeStart = TCNT1;
		 }
		 // When echo ends, track the new TCNT value and indicate no device is active
		 else
		 {
			 echoTimeEnd = TCNT1;
     bdc:	84 e8       	ldi	r24, 0x84	; 132
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	fc 01       	movw	r30, r24
     be2:	80 81       	ld	r24, Z
     be4:	91 81       	ldd	r25, Z+1	; 0x01
     be6:	cc 01       	movw	r24, r24
     be8:	a0 e0       	ldi	r26, 0x00	; 0
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <echoTimeEnd>
     bf0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <echoTimeEnd+0x1>
     bf4:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <echoTimeEnd+0x2>
     bf8:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <echoTimeEnd+0x3>
			 activeDevice = HCSR04_None;
     bfc:	8a e0       	ldi	r24, 0x0A	; 10
     bfe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		 }
	 }
 }
     c02:	00 00       	nop
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	08 95       	ret

00000c0e <main>:
// constant for timer output compare offset, init and ISR rearm
const unsigned int _Timer_OC_Offset = 1000; // 1 / (16000000 / 8 / 1000) = 0.5ms (prescale 8) -- wanted prescale 16
// global counter for timer ISR, used as reference to coordinate activities
volatile unsigned int _Ticks = 0;
int main(void)
{
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	00 d0       	rcall	.+0      	; 0xc18 <main+0xa>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <main+0xc>
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
	// variable for managing the A/D update
	const unsigned int cuiAtoDEventCount = 1000; // every 1/2 second
     c1e:	88 ee       	ldi	r24, 0xE8	; 232
     c20:	93 e0       	ldi	r25, 0x03	; 3
     c22:	9c 83       	std	Y+4, r25	; 0x04
     c24:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int uiAtoDEventNext = cuiAtoDEventCount;
     c26:	8b 81       	ldd	r24, Y+3	; 0x03
     c28:	9c 81       	ldd	r25, Y+4	; 0x04
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
	// make portc2 (pin 25) an output (PC2)
	DDRC |= LED;
     c2e:	87 e2       	ldi	r24, 0x27	; 39
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	27 e2       	ldi	r18, 0x27	; 39
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	f9 01       	movw	r30, r18
     c38:	20 81       	ld	r18, Z
     c3a:	24 60       	ori	r18, 0x04	; 4
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18
	// one-time initialization section
	// bring up the timer, requires ISR!
	Timer_Init(Timer_Prescale_8, _Timer_OC_Offset); // 1ms intervals
     c40:	88 ee       	ldi	r24, 0xE8	; 232
     c42:	93 e0       	ldi	r25, 0x03	; 3
     c44:	bc 01       	movw	r22, r24
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	0e 94 85 04 	call	0x90a	; 0x90a <Timer_Init>
	// enable sleep mode, for idle, sort of similar to WAI on 9S12X (13.2)
	sleep_enable();
     c4c:	83 e5       	ldi	r24, 0x53	; 83
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	23 e5       	ldi	r18, 0x53	; 83
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	f9 01       	movw	r30, r18
     c56:	20 81       	ld	r18, Z
     c58:	21 60       	ori	r18, 0x01	; 1
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 83       	st	Z, r18
	SCI0_Init(F_CPU, 9600, 1); // 16Mhz clock, 9600 baud
     c5e:	01 e0       	ldi	r16, 0x01	; 1
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	20 e8       	ldi	r18, 0x80	; 128
     c64:	35 e2       	ldi	r19, 0x25	; 37
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	74 e2       	ldi	r23, 0x24	; 36
     c6e:	84 ef       	ldi	r24, 0xF4	; 244
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 ac 03 	call	0x758	; 0x758 <SCI0_Init>
	// bring up the I2C bus, at 400kHz operation
	I2C_Init(F_CPU, I2CBus400);
     c76:	41 e0       	ldi	r20, 0x01	; 1
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	74 e2       	ldi	r23, 0x24	; 36
     c7c:	84 ef       	ldi	r24, 0xF4	; 244
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 88 01 	call	0x310	; 0x310 <I2C_Init>

	// welcome message, so we know it booted OK
	SCI0_TxString("\n328 Up! Characters will echo.\n");
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 66 04 	call	0x8cc	; 0x8cc <SCI0_TxString>
	GD03_Init();
     c8c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <GD03_Init>
	if(SEN0427_InitDevice(SEN0427_L))
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 06 07 	call	0xe0c	; 0xe0c <SEN0427_InitDevice>
     c96:	89 2b       	or	r24, r25
     c98:	49 f0       	breq	.+18     	; 0xcac <main+0x9e>
		PORTC |= LED; // turn on LED
     c9a:	88 e2       	ldi	r24, 0x28	; 40
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	28 e2       	ldi	r18, 0x28	; 40
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	f9 01       	movw	r30, r18
     ca4:	20 81       	ld	r18, Z
     ca6:	24 60       	ori	r18, 0x04	; 4
     ca8:	fc 01       	movw	r30, r24
     caa:	20 83       	st	Z, r18
	
	// requires ISR for PCI2
	Back_Sens_InitAll();
     cac:	0e 94 bf 04 	call	0x97e	; 0x97e <Back_Sens_InitAll>
	// requires ISR for PCI2 & PCI0
	HCSR04_InitAll();
     cb0:	0e 94 07 05 	call	0xa0e	; 0xa0e <HCSR04_InitAll>


	// set the global interrupt flag (enable interrupts)
	// this is backwards from the 9S12
	sei();
     cb4:	78 94       	sei
		else
		{
			PORTC &= ~LED; // turn off LED
		}*/
		// go idle!
		sleep_cpu();
     cb6:	88 95       	sleep

		//// are we past the scheduled event?
		if (uiAtoDEventNext - _Ticks > cuiAtoDEventCount)
     cb8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_Ticks>
     cbc:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <_Ticks+0x1>
     cc0:	29 81       	ldd	r18, Y+1	; 0x01
     cc2:	3a 81       	ldd	r19, Y+2	; 0x02
     cc4:	28 1b       	sub	r18, r24
     cc6:	39 0b       	sbc	r19, r25
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	9c 81       	ldd	r25, Y+4	; 0x04
     ccc:	82 17       	cp	r24, r18
     cce:	93 07       	cpc	r25, r19
     cd0:	90 f7       	brcc	.-28     	; 0xcb6 <main+0xa8>
		{
			uiAtoDEventNext += cuiAtoDEventCount; // rearm
     cd2:	29 81       	ldd	r18, Y+1	; 0x01
     cd4:	3a 81       	ldd	r19, Y+2	; 0x02
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	9c 81       	ldd	r25, Y+4	; 0x04
     cda:	82 0f       	add	r24, r18
     cdc:	93 1f       	adc	r25, r19
     cde:	9a 83       	std	Y+2, r25	; 0x02
     ce0:	89 83       	std	Y+1, r24	; 0x01
			else
			{
				PORTC &= ~LED; // turn off LED
			}*/
		}
	}
     ce2:	e9 cf       	rjmp	.-46     	; 0xcb6 <main+0xa8>

00000ce4 <__vector_11>:
}
// output compare A interrupt for timer
ISR (TIMER1_COMPA_vect)
{
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     cec:	0f 92       	push	r0
     cee:	11 24       	eor	r1, r1
     cf0:	2f 93       	push	r18
     cf2:	3f 93       	push	r19
     cf4:	4f 93       	push	r20
     cf6:	5f 93       	push	r21
     cf8:	8f 93       	push	r24
     cfa:	9f 93       	push	r25
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
	// rearm the output compare operation
	OCR1A += _Timer_OC_Offset; // 1ms intervals
     d08:	88 e8       	ldi	r24, 0x88	; 136
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	28 e8       	ldi	r18, 0x88	; 136
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	f9 01       	movw	r30, r18
     d12:	40 81       	ld	r20, Z
     d14:	51 81       	ldd	r21, Z+1	; 0x01
     d16:	28 ee       	ldi	r18, 0xE8	; 232
     d18:	33 e0       	ldi	r19, 0x03	; 3
     d1a:	24 0f       	add	r18, r20
     d1c:	35 1f       	adc	r19, r21
     d1e:	fc 01       	movw	r30, r24
     d20:	31 83       	std	Z+1, r19	; 0x01
     d22:	20 83       	st	Z, r18

	// up the global tick count
	++_Ticks;
     d24:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <_Ticks>
     d28:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <_Ticks+0x1>
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <_Ticks+0x1>
     d32:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_Ticks>
}
     d36:	00 00       	nop
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	ff 91       	pop	r31
     d3e:	ef 91       	pop	r30
     d40:	9f 91       	pop	r25
     d42:	8f 91       	pop	r24
     d44:	5f 91       	pop	r21
     d46:	4f 91       	pop	r20
     d48:	3f 91       	pop	r19
     d4a:	2f 91       	pop	r18
     d4c:	0f 90       	pop	r0
     d4e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d52:	0f 90       	pop	r0
     d54:	1f 90       	pop	r1
     d56:	18 95       	reti

00000d58 <__vector_5>:

// ISR for PCI2, covering PCINT23 through PCINT16
ISR (PCINT2_vect)
{
     d58:	1f 92       	push	r1
     d5a:	0f 92       	push	r0
     d5c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     d60:	0f 92       	push	r0
     d62:	11 24       	eor	r1, r1
     d64:	2f 93       	push	r18
     d66:	3f 93       	push	r19
     d68:	4f 93       	push	r20
     d6a:	5f 93       	push	r21
     d6c:	6f 93       	push	r22
     d6e:	7f 93       	push	r23
     d70:	8f 93       	push	r24
     d72:	9f 93       	push	r25
     d74:	af 93       	push	r26
     d76:	bf 93       	push	r27
     d78:	ef 93       	push	r30
     d7a:	ff 93       	push	r31
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
	HCSR04_ISR();
     d84:	0e 94 9f 05 	call	0xb3e	; 0xb3e <HCSR04_ISR>
	}
	else
	{
		PORTC &= ~LED; // turn off LED
	}*/
}
     d88:	00 00       	nop
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	bf 91       	pop	r27
     d94:	af 91       	pop	r26
     d96:	9f 91       	pop	r25
     d98:	8f 91       	pop	r24
     d9a:	7f 91       	pop	r23
     d9c:	6f 91       	pop	r22
     d9e:	5f 91       	pop	r21
     da0:	4f 91       	pop	r20
     da2:	3f 91       	pop	r19
     da4:	2f 91       	pop	r18
     da6:	0f 90       	pop	r0
     da8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     dac:	0f 90       	pop	r0
     dae:	1f 90       	pop	r1
     db0:	18 95       	reti

00000db2 <__vector_3>:

// ISR for PCI0, covering PCINT0 through PCINT8
ISR (PCINT0_vect)
{
     db2:	1f 92       	push	r1
     db4:	0f 92       	push	r0
     db6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     dba:	0f 92       	push	r0
     dbc:	11 24       	eor	r1, r1
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	4f 93       	push	r20
     dc4:	5f 93       	push	r21
     dc6:	6f 93       	push	r22
     dc8:	7f 93       	push	r23
     dca:	8f 93       	push	r24
     dcc:	9f 93       	push	r25
     dce:	af 93       	push	r26
     dd0:	bf 93       	push	r27
     dd2:	ef 93       	push	r30
     dd4:	ff 93       	push	r31
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
	HCSR04_ISR();	
     dde:	0e 94 9f 05 	call	0xb3e	; 0xb3e <HCSR04_ISR>
}
     de2:	00 00       	nop
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	0f 90       	pop	r0
     e02:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <SEN0427_InitDevice>:
}

unsigned char SEN0427_ReadRangeMeasurement(SEN0427_Device device)
{
    return read8bit(device, 0x062);
}
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	c1 58       	subi	r28, 0x81	; 129
     e16:	d1 09       	sbc	r29, r1
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	9e 01       	movw	r18, r28
     e24:	2f 57       	subi	r18, 0x7F	; 127
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	f9 01       	movw	r30, r18
     e2a:	80 83       	st	Z, r24
     e2c:	ce 01       	movw	r24, r28
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	0e 94 41 02 	call	0x482	; 0x482 <I2C_Scan>
     e34:	8a a5       	ldd	r24, Y+42	; 0x2a
     e36:	88 23       	and	r24, r24
     e38:	19 f4       	brne	.+6      	; 0xe40 <SEN0427_InitDevice+0x34>
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	9f ef       	ldi	r25, 0xFF	; 255
     e3e:	9b c1       	rjmp	.+822    	; 0x1176 <SEN0427_InitDevice+0x36a>
     e40:	ce 01       	movw	r24, r28
     e42:	8f 57       	subi	r24, 0x7F	; 127
     e44:	9f 4f       	sbci	r25, 0xFF	; 255
     e46:	fc 01       	movw	r30, r24
     e48:	80 81       	ld	r24, Z
     e4a:	0e 94 c5 08 	call	0x118a	; 0x118a <reAddressDevice>
     e4e:	ce 01       	movw	r24, r28
     e50:	8f 57       	subi	r24, 0x7F	; 127
     e52:	9f 4f       	sbci	r25, 0xFF	; 255
     e54:	66 e1       	ldi	r22, 0x16	; 22
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	fc 01       	movw	r30, r24
     e5a:	80 81       	ld	r24, Z
     e5c:	0e 94 14 09 	call	0x1228	; 0x1228 <read8bit>
     e60:	88 23       	and	r24, r24
     e62:	09 f4       	brne	.+2      	; 0xe66 <SEN0427_InitDevice+0x5a>
     e64:	2c c1       	rjmp	.+600    	; 0x10be <SEN0427_InitDevice+0x2b2>
     e66:	ce 01       	movw	r24, r28
     e68:	8f 57       	subi	r24, 0x7F	; 127
     e6a:	9f 4f       	sbci	r25, 0xFF	; 255
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	67 e0       	ldi	r22, 0x07	; 7
     e70:	72 e0       	ldi	r23, 0x02	; 2
     e72:	fc 01       	movw	r30, r24
     e74:	80 81       	ld	r24, Z
     e76:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     e7a:	ce 01       	movw	r24, r28
     e7c:	8f 57       	subi	r24, 0x7F	; 127
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	68 e0       	ldi	r22, 0x08	; 8
     e84:	72 e0       	ldi	r23, 0x02	; 2
     e86:	fc 01       	movw	r30, r24
     e88:	80 81       	ld	r24, Z
     e8a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     e8e:	ce 01       	movw	r24, r28
     e90:	8f 57       	subi	r24, 0x7F	; 127
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	40 e0       	ldi	r20, 0x00	; 0
     e96:	66 e9       	ldi	r22, 0x96	; 150
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	fc 01       	movw	r30, r24
     e9c:	80 81       	ld	r24, Z
     e9e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     ea2:	ce 01       	movw	r24, r28
     ea4:	8f 57       	subi	r24, 0x7F	; 127
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	4d ef       	ldi	r20, 0xFD	; 253
     eaa:	67 e9       	ldi	r22, 0x97	; 151
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	fc 01       	movw	r30, r24
     eb0:	80 81       	ld	r24, Z
     eb2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     eb6:	ce 01       	movw	r24, r28
     eb8:	8f 57       	subi	r24, 0x7F	; 127
     eba:	9f 4f       	sbci	r25, 0xFF	; 255
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	63 ee       	ldi	r22, 0xE3	; 227
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	fc 01       	movw	r30, r24
     ec4:	80 81       	ld	r24, Z
     ec6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     eca:	ce 01       	movw	r24, r28
     ecc:	8f 57       	subi	r24, 0x7F	; 127
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	44 e0       	ldi	r20, 0x04	; 4
     ed2:	64 ee       	ldi	r22, 0xE4	; 228
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	fc 01       	movw	r30, r24
     ed8:	80 81       	ld	r24, Z
     eda:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     ede:	ce 01       	movw	r24, r28
     ee0:	8f 57       	subi	r24, 0x7F	; 127
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	42 e0       	ldi	r20, 0x02	; 2
     ee6:	65 ee       	ldi	r22, 0xE5	; 229
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	fc 01       	movw	r30, r24
     eec:	80 81       	ld	r24, Z
     eee:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     ef2:	ce 01       	movw	r24, r28
     ef4:	8f 57       	subi	r24, 0x7F	; 127
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	66 ee       	ldi	r22, 0xE6	; 230
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	fc 01       	movw	r30, r24
     f00:	80 81       	ld	r24, Z
     f02:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     f06:	ce 01       	movw	r24, r28
     f08:	8f 57       	subi	r24, 0x7F	; 127
     f0a:	9f 4f       	sbci	r25, 0xFF	; 255
     f0c:	43 e0       	ldi	r20, 0x03	; 3
     f0e:	67 ee       	ldi	r22, 0xE7	; 231
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	fc 01       	movw	r30, r24
     f14:	80 81       	ld	r24, Z
     f16:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     f1a:	ce 01       	movw	r24, r28
     f1c:	8f 57       	subi	r24, 0x7F	; 127
     f1e:	9f 4f       	sbci	r25, 0xFF	; 255
     f20:	42 e0       	ldi	r20, 0x02	; 2
     f22:	65 ef       	ldi	r22, 0xF5	; 245
     f24:	70 e0       	ldi	r23, 0x00	; 0
     f26:	fc 01       	movw	r30, r24
     f28:	80 81       	ld	r24, Z
     f2a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     f2e:	ce 01       	movw	r24, r28
     f30:	8f 57       	subi	r24, 0x7F	; 127
     f32:	9f 4f       	sbci	r25, 0xFF	; 255
     f34:	45 e0       	ldi	r20, 0x05	; 5
     f36:	69 ed       	ldi	r22, 0xD9	; 217
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	fc 01       	movw	r30, r24
     f3c:	80 81       	ld	r24, Z
     f3e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     f42:	ce 01       	movw	r24, r28
     f44:	8f 57       	subi	r24, 0x7F	; 127
     f46:	9f 4f       	sbci	r25, 0xFF	; 255
     f48:	4e ec       	ldi	r20, 0xCE	; 206
     f4a:	6b ed       	ldi	r22, 0xDB	; 219
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	fc 01       	movw	r30, r24
     f50:	80 81       	ld	r24, Z
     f52:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     f56:	ce 01       	movw	r24, r28
     f58:	8f 57       	subi	r24, 0x7F	; 127
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	43 e0       	ldi	r20, 0x03	; 3
     f5e:	6c ed       	ldi	r22, 0xDC	; 220
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	fc 01       	movw	r30, r24
     f64:	80 81       	ld	r24, Z
     f66:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     f6a:	ce 01       	movw	r24, r28
     f6c:	8f 57       	subi	r24, 0x7F	; 127
     f6e:	9f 4f       	sbci	r25, 0xFF	; 255
     f70:	48 ef       	ldi	r20, 0xF8	; 248
     f72:	6d ed       	ldi	r22, 0xDD	; 221
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	fc 01       	movw	r30, r24
     f78:	80 81       	ld	r24, Z
     f7a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     f7e:	ce 01       	movw	r24, r28
     f80:	8f 57       	subi	r24, 0x7F	; 127
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	6f e9       	ldi	r22, 0x9F	; 159
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	fc 01       	movw	r30, r24
     f8c:	80 81       	ld	r24, Z
     f8e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     f92:	ce 01       	movw	r24, r28
     f94:	8f 57       	subi	r24, 0x7F	; 127
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	4c e3       	ldi	r20, 0x3C	; 60
     f9a:	63 ea       	ldi	r22, 0xA3	; 163
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	fc 01       	movw	r30, r24
     fa0:	80 81       	ld	r24, Z
     fa2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     fa6:	ce 01       	movw	r24, r28
     fa8:	8f 57       	subi	r24, 0x7F	; 127
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	67 eb       	ldi	r22, 0xB7	; 183
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	fc 01       	movw	r30, r24
     fb4:	80 81       	ld	r24, Z
     fb6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     fba:	ce 01       	movw	r24, r28
     fbc:	8f 57       	subi	r24, 0x7F	; 127
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	4c e3       	ldi	r20, 0x3C	; 60
     fc2:	6b eb       	ldi	r22, 0xBB	; 187
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	fc 01       	movw	r30, r24
     fc8:	80 81       	ld	r24, Z
     fca:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     fce:	ce 01       	movw	r24, r28
     fd0:	8f 57       	subi	r24, 0x7F	; 127
     fd2:	9f 4f       	sbci	r25, 0xFF	; 255
     fd4:	49 e0       	ldi	r20, 0x09	; 9
     fd6:	62 eb       	ldi	r22, 0xB2	; 178
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	80 81       	ld	r24, Z
     fde:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     fe2:	ce 01       	movw	r24, r28
     fe4:	8f 57       	subi	r24, 0x7F	; 127
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	49 e0       	ldi	r20, 0x09	; 9
     fea:	6a ec       	ldi	r22, 0xCA	; 202
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	fc 01       	movw	r30, r24
     ff0:	80 81       	ld	r24, Z
     ff2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
     ff6:	ce 01       	movw	r24, r28
     ff8:	8f 57       	subi	r24, 0x7F	; 127
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	41 e0       	ldi	r20, 0x01	; 1
     ffe:	68 e9       	ldi	r22, 0x98	; 152
    1000:	71 e0       	ldi	r23, 0x01	; 1
    1002:	fc 01       	movw	r30, r24
    1004:	80 81       	ld	r24, Z
    1006:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    100a:	ce 01       	movw	r24, r28
    100c:	8f 57       	subi	r24, 0x7F	; 127
    100e:	9f 4f       	sbci	r25, 0xFF	; 255
    1010:	47 e1       	ldi	r20, 0x17	; 23
    1012:	60 eb       	ldi	r22, 0xB0	; 176
    1014:	71 e0       	ldi	r23, 0x01	; 1
    1016:	fc 01       	movw	r30, r24
    1018:	80 81       	ld	r24, Z
    101a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    101e:	ce 01       	movw	r24, r28
    1020:	8f 57       	subi	r24, 0x7F	; 127
    1022:	9f 4f       	sbci	r25, 0xFF	; 255
    1024:	40 e0       	ldi	r20, 0x00	; 0
    1026:	6d ea       	ldi	r22, 0xAD	; 173
    1028:	71 e0       	ldi	r23, 0x01	; 1
    102a:	fc 01       	movw	r30, r24
    102c:	80 81       	ld	r24, Z
    102e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    1032:	ce 01       	movw	r24, r28
    1034:	8f 57       	subi	r24, 0x7F	; 127
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	45 e0       	ldi	r20, 0x05	; 5
    103a:	6f ef       	ldi	r22, 0xFF	; 255
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	fc 01       	movw	r30, r24
    1040:	80 81       	ld	r24, Z
    1042:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    1046:	ce 01       	movw	r24, r28
    1048:	8f 57       	subi	r24, 0x7F	; 127
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	45 e0       	ldi	r20, 0x05	; 5
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	71 e0       	ldi	r23, 0x01	; 1
    1052:	fc 01       	movw	r30, r24
    1054:	80 81       	ld	r24, Z
    1056:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    105a:	ce 01       	movw	r24, r28
    105c:	8f 57       	subi	r24, 0x7F	; 127
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	45 e0       	ldi	r20, 0x05	; 5
    1062:	69 e9       	ldi	r22, 0x99	; 153
    1064:	71 e0       	ldi	r23, 0x01	; 1
    1066:	fc 01       	movw	r30, r24
    1068:	80 81       	ld	r24, Z
    106a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    106e:	ce 01       	movw	r24, r28
    1070:	8f 57       	subi	r24, 0x7F	; 127
    1072:	9f 4f       	sbci	r25, 0xFF	; 255
    1074:	4b e1       	ldi	r20, 0x1B	; 27
    1076:	66 ea       	ldi	r22, 0xA6	; 166
    1078:	71 e0       	ldi	r23, 0x01	; 1
    107a:	fc 01       	movw	r30, r24
    107c:	80 81       	ld	r24, Z
    107e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    1082:	ce 01       	movw	r24, r28
    1084:	8f 57       	subi	r24, 0x7F	; 127
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	4e e3       	ldi	r20, 0x3E	; 62
    108a:	6c ea       	ldi	r22, 0xAC	; 172
    108c:	71 e0       	ldi	r23, 0x01	; 1
    108e:	fc 01       	movw	r30, r24
    1090:	80 81       	ld	r24, Z
    1092:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    1096:	ce 01       	movw	r24, r28
    1098:	8f 57       	subi	r24, 0x7F	; 127
    109a:	9f 4f       	sbci	r25, 0xFF	; 255
    109c:	4f e1       	ldi	r20, 0x1F	; 31
    109e:	67 ea       	ldi	r22, 0xA7	; 167
    10a0:	71 e0       	ldi	r23, 0x01	; 1
    10a2:	fc 01       	movw	r30, r24
    10a4:	80 81       	ld	r24, Z
    10a6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    10aa:	ce 01       	movw	r24, r28
    10ac:	8f 57       	subi	r24, 0x7F	; 127
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	60 e3       	ldi	r22, 0x30	; 48
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	fc 01       	movw	r30, r24
    10b8:	80 81       	ld	r24, Z
    10ba:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    10be:	ce 01       	movw	r24, r28
    10c0:	8f 57       	subi	r24, 0x7F	; 127
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	40 e3       	ldi	r20, 0x30	; 48
    10c6:	6a e0       	ldi	r22, 0x0A	; 10
    10c8:	71 e0       	ldi	r23, 0x01	; 1
    10ca:	fc 01       	movw	r30, r24
    10cc:	80 81       	ld	r24, Z
    10ce:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    10d2:	ce 01       	movw	r24, r28
    10d4:	8f 57       	subi	r24, 0x7F	; 127
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	4f ef       	ldi	r20, 0xFF	; 255
    10da:	61 e3       	ldi	r22, 0x31	; 49
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	fc 01       	movw	r30, r24
    10e0:	80 81       	ld	r24, Z
    10e2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    10e6:	ce 01       	movw	r24, r28
    10e8:	8f 57       	subi	r24, 0x7F	; 127
    10ea:	9f 4f       	sbci	r25, 0xFF	; 255
    10ec:	41 e0       	ldi	r20, 0x01	; 1
    10ee:	6e e2       	ldi	r22, 0x2E	; 46
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	fc 01       	movw	r30, r24
    10f4:	80 81       	ld	r24, Z
    10f6:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    10fa:	ce 01       	movw	r24, r28
    10fc:	8f 57       	subi	r24, 0x7F	; 127
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	49 e0       	ldi	r20, 0x09	; 9
    1102:	6b e1       	ldi	r22, 0x1B	; 27
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	fc 01       	movw	r30, r24
    1108:	80 81       	ld	r24, Z
    110a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    110e:	ce 01       	movw	r24, r28
    1110:	8f 57       	subi	r24, 0x7F	; 127
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	64 e1       	ldi	r22, 0x14	; 20
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	fc 01       	movw	r30, r24
    111c:	80 81       	ld	r24, Z
    111e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    1122:	ce 01       	movw	r24, r28
    1124:	8f 57       	subi	r24, 0x7F	; 127
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	41 e3       	ldi	r20, 0x31	; 49
    112a:	6c e1       	ldi	r22, 0x1C	; 28
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	fc 01       	movw	r30, r24
    1130:	80 81       	ld	r24, Z
    1132:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    1136:	ce 01       	movw	r24, r28
    1138:	8f 57       	subi	r24, 0x7F	; 127
    113a:	9f 4f       	sbci	r25, 0xFF	; 255
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	63 ea       	ldi	r22, 0xA3	; 163
    1140:	72 e0       	ldi	r23, 0x02	; 2
    1142:	fc 01       	movw	r30, r24
    1144:	80 81       	ld	r24, Z
    1146:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    114a:	ce 01       	movw	r24, r28
    114c:	8f 57       	subi	r24, 0x7F	; 127
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	40 e2       	ldi	r20, 0x20	; 32
    1152:	61 e1       	ldi	r22, 0x11	; 17
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	fc 01       	movw	r30, r24
    1158:	80 81       	ld	r24, Z
    115a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    115e:	ce 01       	movw	r24, r28
    1160:	8f 57       	subi	r24, 0x7F	; 127
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	66 e1       	ldi	r22, 0x16	; 22
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	fc 01       	movw	r30, r24
    116c:	80 81       	ld	r24, Z
    116e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <write8bit>
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	cf 57       	subi	r28, 0x7F	; 127
    1178:	df 4f       	sbci	r29, 0xFF	; 255
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	08 95       	ret

0000118a <reAddressDevice>:
/************************************************************************/
/* Local  Implementation                                                */
/************************************************************************/

void reAddressDevice(SEN0427_Device device)
{
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	00 d0       	rcall	.+0      	; 0x1190 <reAddressDevice+0x6>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t deviceAddr = getDeviceAddr(device);
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	0e 94 4a 09 	call	0x1294	; 0x1294 <getDeviceAddr>
    119c:	89 83       	std	Y+1, r24	; 0x01
	I2C_Start(SEN0427_Addr, I2C_WRITE);
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	89 e2       	ldi	r24, 0x29	; 41
    11a4:	0e 94 84 02 	call	0x508	; 0x508 <I2C_Start>
	// tell it which address to write
	I2C_Write8(0x212>>8, I2C_NOSTOP);
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	0e 94 69 03 	call	0x6d2	; 0x6d2 <I2C_Write8>
	I2C_Write8(0x212, I2C_NOSTOP); // implicitly truncated, but that's okay
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	82 e1       	ldi	r24, 0x12	; 18
    11b8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <I2C_Write8>
	// write the data, and we're done
	I2C_Write8(deviceAddr, I2C_STOP);
    11bc:	61 e0       	ldi	r22, 0x01	; 1
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <I2C_Write8>
}
    11c6:	00 00       	nop
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <write8bit>:

void write8bit(SEN0427_Device device, uint16_t registerAddr, uint8_t value)
{
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <write8bit+0x6>
    11d8:	00 d0       	rcall	.+0      	; 0x11da <write8bit+0x8>
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	7b 83       	std	Y+3, r23	; 0x03
    11e2:	6a 83       	std	Y+2, r22	; 0x02
    11e4:	4c 83       	std	Y+4, r20	; 0x04
    I2C_Start(getDeviceAddr(device), I2C_WRITE);
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	0e 94 4a 09 	call	0x1294	; 0x1294 <getDeviceAddr>
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	0e 94 84 02 	call	0x508	; 0x508 <I2C_Start>
    // tell it which address to write
    I2C_Write8(registerAddr>>8, I2C_NOSTOP);
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	9b 81       	ldd	r25, Y+3	; 0x03
    11f8:	89 2f       	mov	r24, r25
    11fa:	99 27       	eor	r25, r25
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	0e 94 69 03 	call	0x6d2	; 0x6d2 <I2C_Write8>
    I2C_Write8(registerAddr, I2C_NOSTOP);
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <I2C_Write8>
    // write the data, and we're done
    I2C_Write8(value, I2C_STOP);
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	0e 94 69 03 	call	0x6d2	; 0x6d2 <I2C_Write8>
}
    1218:	00 00       	nop
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	08 95       	ret

00001228 <read8bit>:

unsigned char read8bit(SEN0427_Device device, uint16_t registerAddr)
{
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	00 d0       	rcall	.+0      	; 0x122e <read8bit+0x6>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <read8bit+0x8>
    1230:	1f 92       	push	r1
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	7d 83       	std	Y+5, r23	; 0x05
    123a:	6c 83       	std	Y+4, r22	; 0x04
    unsigned char data;
    uint8_t deviceAddr = getDeviceAddr(device);
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	0e 94 4a 09 	call	0x1294	; 0x1294 <getDeviceAddr>
    1242:	89 83       	std	Y+1, r24	; 0x01
    // tell it which address we want to read
    I2C_Start(deviceAddr, I2C_WRITE);
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	0e 94 84 02 	call	0x508	; 0x508 <I2C_Start>
    I2C_Write8(registerAddr>>8, I2C_NOSTOP);
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	9d 81       	ldd	r25, Y+5	; 0x05
    1252:	89 2f       	mov	r24, r25
    1254:	99 27       	eor	r25, r25
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <I2C_Write8>
    I2C_Write8(registerAddr&0xFF, I2C_NOSTOP);
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	0e 94 69 03 	call	0x6d2	; 0x6d2 <I2C_Write8>
    // switch to read
    I2C_Start(deviceAddr, I2C_READ);
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	0e 94 84 02 	call	0x508	; 0x508 <I2C_Start>
    // grab the data, and we're done
    I2C_Read8(&data, I2C_ACK, I2C_STOP);
    1272:	ce 01       	movw	r24, r28
    1274:	02 96       	adiw	r24, 0x02	; 2
    1276:	41 e0       	ldi	r20, 0x01	; 1
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	61 e0       	ldi	r22, 0x01	; 1
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <I2C_Read8>
    return data;
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <getDeviceAddr>:

uint8_t getDeviceAddr(SEN0427_Device device)
{
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	00 d0       	rcall	.+0      	; 0x129a <getDeviceAddr+0x6>
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t deviceAddr = 0;
    12a0:	19 82       	std	Y+1, r1	; 0x01
    switch(device)
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	19 f0       	breq	.+6      	; 0x12b2 <getDeviceAddr+0x1e>
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	21 f0       	breq	.+8      	; 0x12b8 <getDeviceAddr+0x24>
            break;
        case SEN0427_R:
            deviceAddr = SEN0427_R_Addr;
            break;
		default:
			break;
    12b0:	06 c0       	rjmp	.+12     	; 0x12be <getDeviceAddr+0x2a>
{
    uint8_t deviceAddr = 0;
    switch(device)
    {
        case SEN0427_L:
            deviceAddr = SEN0427_L_Addr;
    12b2:	80 e3       	ldi	r24, 0x30	; 48
    12b4:	89 83       	std	Y+1, r24	; 0x01
            break;
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <getDeviceAddr+0x2a>
        case SEN0427_R:
            deviceAddr = SEN0427_R_Addr;
    12b8:	81 e3       	ldi	r24, 0x31	; 49
    12ba:	89 83       	std	Y+1, r24	; 0x01
            break;
    12bc:	00 00       	nop
		default:
			break;
	}
    return deviceAddr;
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <__subsf3>:
    12ca:	50 58       	subi	r21, 0x80	; 128

000012cc <__addsf3>:
    12cc:	bb 27       	eor	r27, r27
    12ce:	aa 27       	eor	r26, r26
    12d0:	0e 94 7d 09 	call	0x12fa	; 0x12fa <__addsf3x>
    12d4:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__fp_round>
    12d8:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__fp_pscA>
    12dc:	38 f0       	brcs	.+14     	; 0x12ec <__addsf3+0x20>
    12de:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_pscB>
    12e2:	20 f0       	brcs	.+8      	; 0x12ec <__addsf3+0x20>
    12e4:	39 f4       	brne	.+14     	; 0x12f4 <__addsf3+0x28>
    12e6:	9f 3f       	cpi	r25, 0xFF	; 255
    12e8:	19 f4       	brne	.+6      	; 0x12f0 <__addsf3+0x24>
    12ea:	26 f4       	brtc	.+8      	; 0x12f4 <__addsf3+0x28>
    12ec:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_nan>
    12f0:	0e f4       	brtc	.+2      	; 0x12f4 <__addsf3+0x28>
    12f2:	e0 95       	com	r30
    12f4:	e7 fb       	bst	r30, 7
    12f6:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__fp_inf>

000012fa <__addsf3x>:
    12fa:	e9 2f       	mov	r30, r25
    12fc:	0e 94 01 0b 	call	0x1602	; 0x1602 <__fp_split3>
    1300:	58 f3       	brcs	.-42     	; 0x12d8 <__addsf3+0xc>
    1302:	ba 17       	cp	r27, r26
    1304:	62 07       	cpc	r22, r18
    1306:	73 07       	cpc	r23, r19
    1308:	84 07       	cpc	r24, r20
    130a:	95 07       	cpc	r25, r21
    130c:	20 f0       	brcs	.+8      	; 0x1316 <__addsf3x+0x1c>
    130e:	79 f4       	brne	.+30     	; 0x132e <__addsf3x+0x34>
    1310:	a6 f5       	brtc	.+104    	; 0x137a <__addsf3x+0x80>
    1312:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_zero>
    1316:	0e f4       	brtc	.+2      	; 0x131a <__addsf3x+0x20>
    1318:	e0 95       	com	r30
    131a:	0b 2e       	mov	r0, r27
    131c:	ba 2f       	mov	r27, r26
    131e:	a0 2d       	mov	r26, r0
    1320:	0b 01       	movw	r0, r22
    1322:	b9 01       	movw	r22, r18
    1324:	90 01       	movw	r18, r0
    1326:	0c 01       	movw	r0, r24
    1328:	ca 01       	movw	r24, r20
    132a:	a0 01       	movw	r20, r0
    132c:	11 24       	eor	r1, r1
    132e:	ff 27       	eor	r31, r31
    1330:	59 1b       	sub	r21, r25
    1332:	99 f0       	breq	.+38     	; 0x135a <__addsf3x+0x60>
    1334:	59 3f       	cpi	r21, 0xF9	; 249
    1336:	50 f4       	brcc	.+20     	; 0x134c <__addsf3x+0x52>
    1338:	50 3e       	cpi	r21, 0xE0	; 224
    133a:	68 f1       	brcs	.+90     	; 0x1396 <__addsf3x+0x9c>
    133c:	1a 16       	cp	r1, r26
    133e:	f0 40       	sbci	r31, 0x00	; 0
    1340:	a2 2f       	mov	r26, r18
    1342:	23 2f       	mov	r18, r19
    1344:	34 2f       	mov	r19, r20
    1346:	44 27       	eor	r20, r20
    1348:	58 5f       	subi	r21, 0xF8	; 248
    134a:	f3 cf       	rjmp	.-26     	; 0x1332 <__addsf3x+0x38>
    134c:	46 95       	lsr	r20
    134e:	37 95       	ror	r19
    1350:	27 95       	ror	r18
    1352:	a7 95       	ror	r26
    1354:	f0 40       	sbci	r31, 0x00	; 0
    1356:	53 95       	inc	r21
    1358:	c9 f7       	brne	.-14     	; 0x134c <__addsf3x+0x52>
    135a:	7e f4       	brtc	.+30     	; 0x137a <__addsf3x+0x80>
    135c:	1f 16       	cp	r1, r31
    135e:	ba 0b       	sbc	r27, r26
    1360:	62 0b       	sbc	r22, r18
    1362:	73 0b       	sbc	r23, r19
    1364:	84 0b       	sbc	r24, r20
    1366:	ba f0       	brmi	.+46     	; 0x1396 <__addsf3x+0x9c>
    1368:	91 50       	subi	r25, 0x01	; 1
    136a:	a1 f0       	breq	.+40     	; 0x1394 <__addsf3x+0x9a>
    136c:	ff 0f       	add	r31, r31
    136e:	bb 1f       	adc	r27, r27
    1370:	66 1f       	adc	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	c2 f7       	brpl	.-16     	; 0x1368 <__addsf3x+0x6e>
    1378:	0e c0       	rjmp	.+28     	; 0x1396 <__addsf3x+0x9c>
    137a:	ba 0f       	add	r27, r26
    137c:	62 1f       	adc	r22, r18
    137e:	73 1f       	adc	r23, r19
    1380:	84 1f       	adc	r24, r20
    1382:	48 f4       	brcc	.+18     	; 0x1396 <__addsf3x+0x9c>
    1384:	87 95       	ror	r24
    1386:	77 95       	ror	r23
    1388:	67 95       	ror	r22
    138a:	b7 95       	ror	r27
    138c:	f7 95       	ror	r31
    138e:	9e 3f       	cpi	r25, 0xFE	; 254
    1390:	08 f0       	brcs	.+2      	; 0x1394 <__addsf3x+0x9a>
    1392:	b0 cf       	rjmp	.-160    	; 0x12f4 <__addsf3+0x28>
    1394:	93 95       	inc	r25
    1396:	88 0f       	add	r24, r24
    1398:	08 f0       	brcs	.+2      	; 0x139c <__addsf3x+0xa2>
    139a:	99 27       	eor	r25, r25
    139c:	ee 0f       	add	r30, r30
    139e:	97 95       	ror	r25
    13a0:	87 95       	ror	r24
    13a2:	08 95       	ret

000013a4 <__cmpsf2>:
    13a4:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fp_cmp>
    13a8:	08 f4       	brcc	.+2      	; 0x13ac <__cmpsf2+0x8>
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	08 95       	ret

000013ae <__divsf3>:
    13ae:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__divsf3x>
    13b2:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__fp_round>
    13b6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_pscB>
    13ba:	58 f0       	brcs	.+22     	; 0x13d2 <__divsf3+0x24>
    13bc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__fp_pscA>
    13c0:	40 f0       	brcs	.+16     	; 0x13d2 <__divsf3+0x24>
    13c2:	29 f4       	brne	.+10     	; 0x13ce <__divsf3+0x20>
    13c4:	5f 3f       	cpi	r21, 0xFF	; 255
    13c6:	29 f0       	breq	.+10     	; 0x13d2 <__divsf3+0x24>
    13c8:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__fp_inf>
    13cc:	51 11       	cpse	r21, r1
    13ce:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_szero>
    13d2:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_nan>

000013d6 <__divsf3x>:
    13d6:	0e 94 01 0b 	call	0x1602	; 0x1602 <__fp_split3>
    13da:	68 f3       	brcs	.-38     	; 0x13b6 <__divsf3+0x8>

000013dc <__divsf3_pse>:
    13dc:	99 23       	and	r25, r25
    13de:	b1 f3       	breq	.-20     	; 0x13cc <__divsf3+0x1e>
    13e0:	55 23       	and	r21, r21
    13e2:	91 f3       	breq	.-28     	; 0x13c8 <__divsf3+0x1a>
    13e4:	95 1b       	sub	r25, r21
    13e6:	55 0b       	sbc	r21, r21
    13e8:	bb 27       	eor	r27, r27
    13ea:	aa 27       	eor	r26, r26
    13ec:	62 17       	cp	r22, r18
    13ee:	73 07       	cpc	r23, r19
    13f0:	84 07       	cpc	r24, r20
    13f2:	38 f0       	brcs	.+14     	; 0x1402 <__divsf3_pse+0x26>
    13f4:	9f 5f       	subi	r25, 0xFF	; 255
    13f6:	5f 4f       	sbci	r21, 0xFF	; 255
    13f8:	22 0f       	add	r18, r18
    13fa:	33 1f       	adc	r19, r19
    13fc:	44 1f       	adc	r20, r20
    13fe:	aa 1f       	adc	r26, r26
    1400:	a9 f3       	breq	.-22     	; 0x13ec <__divsf3_pse+0x10>
    1402:	35 d0       	rcall	.+106    	; 0x146e <__divsf3_pse+0x92>
    1404:	0e 2e       	mov	r0, r30
    1406:	3a f0       	brmi	.+14     	; 0x1416 <__divsf3_pse+0x3a>
    1408:	e0 e8       	ldi	r30, 0x80	; 128
    140a:	32 d0       	rcall	.+100    	; 0x1470 <__divsf3_pse+0x94>
    140c:	91 50       	subi	r25, 0x01	; 1
    140e:	50 40       	sbci	r21, 0x00	; 0
    1410:	e6 95       	lsr	r30
    1412:	00 1c       	adc	r0, r0
    1414:	ca f7       	brpl	.-14     	; 0x1408 <__divsf3_pse+0x2c>
    1416:	2b d0       	rcall	.+86     	; 0x146e <__divsf3_pse+0x92>
    1418:	fe 2f       	mov	r31, r30
    141a:	29 d0       	rcall	.+82     	; 0x146e <__divsf3_pse+0x92>
    141c:	66 0f       	add	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	88 1f       	adc	r24, r24
    1422:	bb 1f       	adc	r27, r27
    1424:	26 17       	cp	r18, r22
    1426:	37 07       	cpc	r19, r23
    1428:	48 07       	cpc	r20, r24
    142a:	ab 07       	cpc	r26, r27
    142c:	b0 e8       	ldi	r27, 0x80	; 128
    142e:	09 f0       	breq	.+2      	; 0x1432 <__divsf3_pse+0x56>
    1430:	bb 0b       	sbc	r27, r27
    1432:	80 2d       	mov	r24, r0
    1434:	bf 01       	movw	r22, r30
    1436:	ff 27       	eor	r31, r31
    1438:	93 58       	subi	r25, 0x83	; 131
    143a:	5f 4f       	sbci	r21, 0xFF	; 255
    143c:	3a f0       	brmi	.+14     	; 0x144c <__divsf3_pse+0x70>
    143e:	9e 3f       	cpi	r25, 0xFE	; 254
    1440:	51 05       	cpc	r21, r1
    1442:	78 f0       	brcs	.+30     	; 0x1462 <__divsf3_pse+0x86>
    1444:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__fp_inf>
    1448:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_szero>
    144c:	5f 3f       	cpi	r21, 0xFF	; 255
    144e:	e4 f3       	brlt	.-8      	; 0x1448 <__divsf3_pse+0x6c>
    1450:	98 3e       	cpi	r25, 0xE8	; 232
    1452:	d4 f3       	brlt	.-12     	; 0x1448 <__divsf3_pse+0x6c>
    1454:	86 95       	lsr	r24
    1456:	77 95       	ror	r23
    1458:	67 95       	ror	r22
    145a:	b7 95       	ror	r27
    145c:	f7 95       	ror	r31
    145e:	9f 5f       	subi	r25, 0xFF	; 255
    1460:	c9 f7       	brne	.-14     	; 0x1454 <__divsf3_pse+0x78>
    1462:	88 0f       	add	r24, r24
    1464:	91 1d       	adc	r25, r1
    1466:	96 95       	lsr	r25
    1468:	87 95       	ror	r24
    146a:	97 f9       	bld	r25, 7
    146c:	08 95       	ret
    146e:	e1 e0       	ldi	r30, 0x01	; 1
    1470:	66 0f       	add	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	88 1f       	adc	r24, r24
    1476:	bb 1f       	adc	r27, r27
    1478:	62 17       	cp	r22, r18
    147a:	73 07       	cpc	r23, r19
    147c:	84 07       	cpc	r24, r20
    147e:	ba 07       	cpc	r27, r26
    1480:	20 f0       	brcs	.+8      	; 0x148a <__divsf3_pse+0xae>
    1482:	62 1b       	sub	r22, r18
    1484:	73 0b       	sbc	r23, r19
    1486:	84 0b       	sbc	r24, r20
    1488:	ba 0b       	sbc	r27, r26
    148a:	ee 1f       	adc	r30, r30
    148c:	88 f7       	brcc	.-30     	; 0x1470 <__divsf3_pse+0x94>
    148e:	e0 95       	com	r30
    1490:	08 95       	ret

00001492 <__fixunssfsi>:
    1492:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_splitA>
    1496:	88 f0       	brcs	.+34     	; 0x14ba <__fixunssfsi+0x28>
    1498:	9f 57       	subi	r25, 0x7F	; 127
    149a:	98 f0       	brcs	.+38     	; 0x14c2 <__fixunssfsi+0x30>
    149c:	b9 2f       	mov	r27, r25
    149e:	99 27       	eor	r25, r25
    14a0:	b7 51       	subi	r27, 0x17	; 23
    14a2:	b0 f0       	brcs	.+44     	; 0x14d0 <__fixunssfsi+0x3e>
    14a4:	e1 f0       	breq	.+56     	; 0x14de <__fixunssfsi+0x4c>
    14a6:	66 0f       	add	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	88 1f       	adc	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	1a f0       	brmi	.+6      	; 0x14b6 <__fixunssfsi+0x24>
    14b0:	ba 95       	dec	r27
    14b2:	c9 f7       	brne	.-14     	; 0x14a6 <__fixunssfsi+0x14>
    14b4:	14 c0       	rjmp	.+40     	; 0x14de <__fixunssfsi+0x4c>
    14b6:	b1 30       	cpi	r27, 0x01	; 1
    14b8:	91 f0       	breq	.+36     	; 0x14de <__fixunssfsi+0x4c>
    14ba:	0e 94 23 0b 	call	0x1646	; 0x1646 <__fp_zero>
    14be:	b1 e0       	ldi	r27, 0x01	; 1
    14c0:	08 95       	ret
    14c2:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_zero>
    14c6:	67 2f       	mov	r22, r23
    14c8:	78 2f       	mov	r23, r24
    14ca:	88 27       	eor	r24, r24
    14cc:	b8 5f       	subi	r27, 0xF8	; 248
    14ce:	39 f0       	breq	.+14     	; 0x14de <__fixunssfsi+0x4c>
    14d0:	b9 3f       	cpi	r27, 0xF9	; 249
    14d2:	cc f3       	brlt	.-14     	; 0x14c6 <__fixunssfsi+0x34>
    14d4:	86 95       	lsr	r24
    14d6:	77 95       	ror	r23
    14d8:	67 95       	ror	r22
    14da:	b3 95       	inc	r27
    14dc:	d9 f7       	brne	.-10     	; 0x14d4 <__fixunssfsi+0x42>
    14de:	3e f4       	brtc	.+14     	; 0x14ee <__fixunssfsi+0x5c>
    14e0:	90 95       	com	r25
    14e2:	80 95       	com	r24
    14e4:	70 95       	com	r23
    14e6:	61 95       	neg	r22
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	8f 4f       	sbci	r24, 0xFF	; 255
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255
    14ee:	08 95       	ret

000014f0 <__floatunsisf>:
    14f0:	e8 94       	clt
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <__floatsisf+0x12>

000014f4 <__floatsisf>:
    14f4:	97 fb       	bst	r25, 7
    14f6:	3e f4       	brtc	.+14     	; 0x1506 <__floatsisf+0x12>
    14f8:	90 95       	com	r25
    14fa:	80 95       	com	r24
    14fc:	70 95       	com	r23
    14fe:	61 95       	neg	r22
    1500:	7f 4f       	sbci	r23, 0xFF	; 255
    1502:	8f 4f       	sbci	r24, 0xFF	; 255
    1504:	9f 4f       	sbci	r25, 0xFF	; 255
    1506:	99 23       	and	r25, r25
    1508:	a9 f0       	breq	.+42     	; 0x1534 <__floatsisf+0x40>
    150a:	f9 2f       	mov	r31, r25
    150c:	96 e9       	ldi	r25, 0x96	; 150
    150e:	bb 27       	eor	r27, r27
    1510:	93 95       	inc	r25
    1512:	f6 95       	lsr	r31
    1514:	87 95       	ror	r24
    1516:	77 95       	ror	r23
    1518:	67 95       	ror	r22
    151a:	b7 95       	ror	r27
    151c:	f1 11       	cpse	r31, r1
    151e:	f8 cf       	rjmp	.-16     	; 0x1510 <__floatsisf+0x1c>
    1520:	fa f4       	brpl	.+62     	; 0x1560 <__floatsisf+0x6c>
    1522:	bb 0f       	add	r27, r27
    1524:	11 f4       	brne	.+4      	; 0x152a <__floatsisf+0x36>
    1526:	60 ff       	sbrs	r22, 0
    1528:	1b c0       	rjmp	.+54     	; 0x1560 <__floatsisf+0x6c>
    152a:	6f 5f       	subi	r22, 0xFF	; 255
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	8f 4f       	sbci	r24, 0xFF	; 255
    1530:	9f 4f       	sbci	r25, 0xFF	; 255
    1532:	16 c0       	rjmp	.+44     	; 0x1560 <__floatsisf+0x6c>
    1534:	88 23       	and	r24, r24
    1536:	11 f0       	breq	.+4      	; 0x153c <__floatsisf+0x48>
    1538:	96 e9       	ldi	r25, 0x96	; 150
    153a:	11 c0       	rjmp	.+34     	; 0x155e <__floatsisf+0x6a>
    153c:	77 23       	and	r23, r23
    153e:	21 f0       	breq	.+8      	; 0x1548 <__floatsisf+0x54>
    1540:	9e e8       	ldi	r25, 0x8E	; 142
    1542:	87 2f       	mov	r24, r23
    1544:	76 2f       	mov	r23, r22
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <__floatsisf+0x5e>
    1548:	66 23       	and	r22, r22
    154a:	71 f0       	breq	.+28     	; 0x1568 <__floatsisf+0x74>
    154c:	96 e8       	ldi	r25, 0x86	; 134
    154e:	86 2f       	mov	r24, r22
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	2a f0       	brmi	.+10     	; 0x1560 <__floatsisf+0x6c>
    1556:	9a 95       	dec	r25
    1558:	66 0f       	add	r22, r22
    155a:	77 1f       	adc	r23, r23
    155c:	88 1f       	adc	r24, r24
    155e:	da f7       	brpl	.-10     	; 0x1556 <__floatsisf+0x62>
    1560:	88 0f       	add	r24, r24
    1562:	96 95       	lsr	r25
    1564:	87 95       	ror	r24
    1566:	97 f9       	bld	r25, 7
    1568:	08 95       	ret

0000156a <__fp_cmp>:
    156a:	99 0f       	add	r25, r25
    156c:	00 08       	sbc	r0, r0
    156e:	55 0f       	add	r21, r21
    1570:	aa 0b       	sbc	r26, r26
    1572:	e0 e8       	ldi	r30, 0x80	; 128
    1574:	fe ef       	ldi	r31, 0xFE	; 254
    1576:	16 16       	cp	r1, r22
    1578:	17 06       	cpc	r1, r23
    157a:	e8 07       	cpc	r30, r24
    157c:	f9 07       	cpc	r31, r25
    157e:	c0 f0       	brcs	.+48     	; 0x15b0 <__fp_cmp+0x46>
    1580:	12 16       	cp	r1, r18
    1582:	13 06       	cpc	r1, r19
    1584:	e4 07       	cpc	r30, r20
    1586:	f5 07       	cpc	r31, r21
    1588:	98 f0       	brcs	.+38     	; 0x15b0 <__fp_cmp+0x46>
    158a:	62 1b       	sub	r22, r18
    158c:	73 0b       	sbc	r23, r19
    158e:	84 0b       	sbc	r24, r20
    1590:	95 0b       	sbc	r25, r21
    1592:	39 f4       	brne	.+14     	; 0x15a2 <__fp_cmp+0x38>
    1594:	0a 26       	eor	r0, r26
    1596:	61 f0       	breq	.+24     	; 0x15b0 <__fp_cmp+0x46>
    1598:	23 2b       	or	r18, r19
    159a:	24 2b       	or	r18, r20
    159c:	25 2b       	or	r18, r21
    159e:	21 f4       	brne	.+8      	; 0x15a8 <__fp_cmp+0x3e>
    15a0:	08 95       	ret
    15a2:	0a 26       	eor	r0, r26
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <__fp_cmp+0x3e>
    15a6:	a1 40       	sbci	r26, 0x01	; 1
    15a8:	a6 95       	lsr	r26
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
    15ac:	81 1d       	adc	r24, r1
    15ae:	81 1d       	adc	r24, r1
    15b0:	08 95       	ret

000015b2 <__fp_inf>:
    15b2:	97 f9       	bld	r25, 7
    15b4:	9f 67       	ori	r25, 0x7F	; 127
    15b6:	80 e8       	ldi	r24, 0x80	; 128
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	08 95       	ret

000015be <__fp_nan>:
    15be:	9f ef       	ldi	r25, 0xFF	; 255
    15c0:	80 ec       	ldi	r24, 0xC0	; 192
    15c2:	08 95       	ret

000015c4 <__fp_pscA>:
    15c4:	00 24       	eor	r0, r0
    15c6:	0a 94       	dec	r0
    15c8:	16 16       	cp	r1, r22
    15ca:	17 06       	cpc	r1, r23
    15cc:	18 06       	cpc	r1, r24
    15ce:	09 06       	cpc	r0, r25
    15d0:	08 95       	ret

000015d2 <__fp_pscB>:
    15d2:	00 24       	eor	r0, r0
    15d4:	0a 94       	dec	r0
    15d6:	12 16       	cp	r1, r18
    15d8:	13 06       	cpc	r1, r19
    15da:	14 06       	cpc	r1, r20
    15dc:	05 06       	cpc	r0, r21
    15de:	08 95       	ret

000015e0 <__fp_round>:
    15e0:	09 2e       	mov	r0, r25
    15e2:	03 94       	inc	r0
    15e4:	00 0c       	add	r0, r0
    15e6:	11 f4       	brne	.+4      	; 0x15ec <__fp_round+0xc>
    15e8:	88 23       	and	r24, r24
    15ea:	52 f0       	brmi	.+20     	; 0x1600 <__fp_round+0x20>
    15ec:	bb 0f       	add	r27, r27
    15ee:	40 f4       	brcc	.+16     	; 0x1600 <__fp_round+0x20>
    15f0:	bf 2b       	or	r27, r31
    15f2:	11 f4       	brne	.+4      	; 0x15f8 <__fp_round+0x18>
    15f4:	60 ff       	sbrs	r22, 0
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <__fp_round+0x20>
    15f8:	6f 5f       	subi	r22, 0xFF	; 255
    15fa:	7f 4f       	sbci	r23, 0xFF	; 255
    15fc:	8f 4f       	sbci	r24, 0xFF	; 255
    15fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1600:	08 95       	ret

00001602 <__fp_split3>:
    1602:	57 fd       	sbrc	r21, 7
    1604:	90 58       	subi	r25, 0x80	; 128
    1606:	44 0f       	add	r20, r20
    1608:	55 1f       	adc	r21, r21
    160a:	59 f0       	breq	.+22     	; 0x1622 <__fp_splitA+0x10>
    160c:	5f 3f       	cpi	r21, 0xFF	; 255
    160e:	71 f0       	breq	.+28     	; 0x162c <__fp_splitA+0x1a>
    1610:	47 95       	ror	r20

00001612 <__fp_splitA>:
    1612:	88 0f       	add	r24, r24
    1614:	97 fb       	bst	r25, 7
    1616:	99 1f       	adc	r25, r25
    1618:	61 f0       	breq	.+24     	; 0x1632 <__fp_splitA+0x20>
    161a:	9f 3f       	cpi	r25, 0xFF	; 255
    161c:	79 f0       	breq	.+30     	; 0x163c <__fp_splitA+0x2a>
    161e:	87 95       	ror	r24
    1620:	08 95       	ret
    1622:	12 16       	cp	r1, r18
    1624:	13 06       	cpc	r1, r19
    1626:	14 06       	cpc	r1, r20
    1628:	55 1f       	adc	r21, r21
    162a:	f2 cf       	rjmp	.-28     	; 0x1610 <__fp_split3+0xe>
    162c:	46 95       	lsr	r20
    162e:	f1 df       	rcall	.-30     	; 0x1612 <__fp_splitA>
    1630:	08 c0       	rjmp	.+16     	; 0x1642 <__fp_splitA+0x30>
    1632:	16 16       	cp	r1, r22
    1634:	17 06       	cpc	r1, r23
    1636:	18 06       	cpc	r1, r24
    1638:	99 1f       	adc	r25, r25
    163a:	f1 cf       	rjmp	.-30     	; 0x161e <__fp_splitA+0xc>
    163c:	86 95       	lsr	r24
    163e:	71 05       	cpc	r23, r1
    1640:	61 05       	cpc	r22, r1
    1642:	08 94       	sec
    1644:	08 95       	ret

00001646 <__fp_zero>:
    1646:	e8 94       	clt

00001648 <__fp_szero>:
    1648:	bb 27       	eor	r27, r27
    164a:	66 27       	eor	r22, r22
    164c:	77 27       	eor	r23, r23
    164e:	cb 01       	movw	r24, r22
    1650:	97 f9       	bld	r25, 7
    1652:	08 95       	ret

00001654 <__gesf2>:
    1654:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fp_cmp>
    1658:	08 f4       	brcc	.+2      	; 0x165c <__gesf2+0x8>
    165a:	8f ef       	ldi	r24, 0xFF	; 255
    165c:	08 95       	ret

0000165e <vfprintf>:
    165e:	a0 e1       	ldi	r26, 0x10	; 16
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e5 e3       	ldi	r30, 0x35	; 53
    1664:	fb e0       	ldi	r31, 0x0B	; 11
    1666:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__prologue_saves__>
    166a:	7c 01       	movw	r14, r24
    166c:	1b 01       	movw	r2, r22
    166e:	6a 01       	movw	r12, r20
    1670:	fc 01       	movw	r30, r24
    1672:	17 82       	std	Z+7, r1	; 0x07
    1674:	16 82       	std	Z+6, r1	; 0x06
    1676:	83 81       	ldd	r24, Z+3	; 0x03
    1678:	81 ff       	sbrs	r24, 1
    167a:	44 c3       	rjmp	.+1672   	; 0x1d04 <vfprintf+0x6a6>
    167c:	9e 01       	movw	r18, r28
    167e:	2f 5f       	subi	r18, 0xFF	; 255
    1680:	3f 4f       	sbci	r19, 0xFF	; 255
    1682:	39 01       	movw	r6, r18
    1684:	f7 01       	movw	r30, r14
    1686:	93 81       	ldd	r25, Z+3	; 0x03
    1688:	f1 01       	movw	r30, r2
    168a:	93 fd       	sbrc	r25, 3
    168c:	85 91       	lpm	r24, Z+
    168e:	93 ff       	sbrs	r25, 3
    1690:	81 91       	ld	r24, Z+
    1692:	1f 01       	movw	r2, r30
    1694:	88 23       	and	r24, r24
    1696:	09 f4       	brne	.+2      	; 0x169a <vfprintf+0x3c>
    1698:	31 c3       	rjmp	.+1634   	; 0x1cfc <vfprintf+0x69e>
    169a:	85 32       	cpi	r24, 0x25	; 37
    169c:	39 f4       	brne	.+14     	; 0x16ac <vfprintf+0x4e>
    169e:	93 fd       	sbrc	r25, 3
    16a0:	85 91       	lpm	r24, Z+
    16a2:	93 ff       	sbrs	r25, 3
    16a4:	81 91       	ld	r24, Z+
    16a6:	1f 01       	movw	r2, r30
    16a8:	85 32       	cpi	r24, 0x25	; 37
    16aa:	39 f4       	brne	.+14     	; 0x16ba <vfprintf+0x5c>
    16ac:	b7 01       	movw	r22, r14
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    16b4:	56 01       	movw	r10, r12
    16b6:	65 01       	movw	r12, r10
    16b8:	e5 cf       	rjmp	.-54     	; 0x1684 <vfprintf+0x26>
    16ba:	10 e0       	ldi	r17, 0x00	; 0
    16bc:	51 2c       	mov	r5, r1
    16be:	91 2c       	mov	r9, r1
    16c0:	ff e1       	ldi	r31, 0x1F	; 31
    16c2:	f9 15       	cp	r31, r9
    16c4:	d8 f0       	brcs	.+54     	; 0x16fc <vfprintf+0x9e>
    16c6:	8b 32       	cpi	r24, 0x2B	; 43
    16c8:	79 f0       	breq	.+30     	; 0x16e8 <vfprintf+0x8a>
    16ca:	38 f4       	brcc	.+14     	; 0x16da <vfprintf+0x7c>
    16cc:	80 32       	cpi	r24, 0x20	; 32
    16ce:	79 f0       	breq	.+30     	; 0x16ee <vfprintf+0x90>
    16d0:	83 32       	cpi	r24, 0x23	; 35
    16d2:	a1 f4       	brne	.+40     	; 0x16fc <vfprintf+0x9e>
    16d4:	f9 2d       	mov	r31, r9
    16d6:	f0 61       	ori	r31, 0x10	; 16
    16d8:	2e c0       	rjmp	.+92     	; 0x1736 <vfprintf+0xd8>
    16da:	8d 32       	cpi	r24, 0x2D	; 45
    16dc:	61 f0       	breq	.+24     	; 0x16f6 <vfprintf+0x98>
    16de:	80 33       	cpi	r24, 0x30	; 48
    16e0:	69 f4       	brne	.+26     	; 0x16fc <vfprintf+0x9e>
    16e2:	29 2d       	mov	r18, r9
    16e4:	21 60       	ori	r18, 0x01	; 1
    16e6:	2d c0       	rjmp	.+90     	; 0x1742 <vfprintf+0xe4>
    16e8:	39 2d       	mov	r19, r9
    16ea:	32 60       	ori	r19, 0x02	; 2
    16ec:	93 2e       	mov	r9, r19
    16ee:	89 2d       	mov	r24, r9
    16f0:	84 60       	ori	r24, 0x04	; 4
    16f2:	98 2e       	mov	r9, r24
    16f4:	2a c0       	rjmp	.+84     	; 0x174a <vfprintf+0xec>
    16f6:	e9 2d       	mov	r30, r9
    16f8:	e8 60       	ori	r30, 0x08	; 8
    16fa:	15 c0       	rjmp	.+42     	; 0x1726 <vfprintf+0xc8>
    16fc:	97 fc       	sbrc	r9, 7
    16fe:	2d c0       	rjmp	.+90     	; 0x175a <vfprintf+0xfc>
    1700:	20 ed       	ldi	r18, 0xD0	; 208
    1702:	28 0f       	add	r18, r24
    1704:	2a 30       	cpi	r18, 0x0A	; 10
    1706:	88 f4       	brcc	.+34     	; 0x172a <vfprintf+0xcc>
    1708:	96 fe       	sbrs	r9, 6
    170a:	06 c0       	rjmp	.+12     	; 0x1718 <vfprintf+0xba>
    170c:	3a e0       	ldi	r19, 0x0A	; 10
    170e:	13 9f       	mul	r17, r19
    1710:	20 0d       	add	r18, r0
    1712:	11 24       	eor	r1, r1
    1714:	12 2f       	mov	r17, r18
    1716:	19 c0       	rjmp	.+50     	; 0x174a <vfprintf+0xec>
    1718:	8a e0       	ldi	r24, 0x0A	; 10
    171a:	58 9e       	mul	r5, r24
    171c:	20 0d       	add	r18, r0
    171e:	11 24       	eor	r1, r1
    1720:	52 2e       	mov	r5, r18
    1722:	e9 2d       	mov	r30, r9
    1724:	e0 62       	ori	r30, 0x20	; 32
    1726:	9e 2e       	mov	r9, r30
    1728:	10 c0       	rjmp	.+32     	; 0x174a <vfprintf+0xec>
    172a:	8e 32       	cpi	r24, 0x2E	; 46
    172c:	31 f4       	brne	.+12     	; 0x173a <vfprintf+0xdc>
    172e:	96 fc       	sbrc	r9, 6
    1730:	e5 c2       	rjmp	.+1482   	; 0x1cfc <vfprintf+0x69e>
    1732:	f9 2d       	mov	r31, r9
    1734:	f0 64       	ori	r31, 0x40	; 64
    1736:	9f 2e       	mov	r9, r31
    1738:	08 c0       	rjmp	.+16     	; 0x174a <vfprintf+0xec>
    173a:	8c 36       	cpi	r24, 0x6C	; 108
    173c:	21 f4       	brne	.+8      	; 0x1746 <vfprintf+0xe8>
    173e:	29 2d       	mov	r18, r9
    1740:	20 68       	ori	r18, 0x80	; 128
    1742:	92 2e       	mov	r9, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <vfprintf+0xec>
    1746:	88 36       	cpi	r24, 0x68	; 104
    1748:	41 f4       	brne	.+16     	; 0x175a <vfprintf+0xfc>
    174a:	f1 01       	movw	r30, r2
    174c:	93 fd       	sbrc	r25, 3
    174e:	85 91       	lpm	r24, Z+
    1750:	93 ff       	sbrs	r25, 3
    1752:	81 91       	ld	r24, Z+
    1754:	1f 01       	movw	r2, r30
    1756:	81 11       	cpse	r24, r1
    1758:	b3 cf       	rjmp	.-154    	; 0x16c0 <vfprintf+0x62>
    175a:	9b eb       	ldi	r25, 0xBB	; 187
    175c:	98 0f       	add	r25, r24
    175e:	93 30       	cpi	r25, 0x03	; 3
    1760:	20 f4       	brcc	.+8      	; 0x176a <vfprintf+0x10c>
    1762:	99 2d       	mov	r25, r9
    1764:	90 61       	ori	r25, 0x10	; 16
    1766:	80 5e       	subi	r24, 0xE0	; 224
    1768:	07 c0       	rjmp	.+14     	; 0x1778 <vfprintf+0x11a>
    176a:	9b e9       	ldi	r25, 0x9B	; 155
    176c:	98 0f       	add	r25, r24
    176e:	93 30       	cpi	r25, 0x03	; 3
    1770:	08 f0       	brcs	.+2      	; 0x1774 <vfprintf+0x116>
    1772:	66 c1       	rjmp	.+716    	; 0x1a40 <vfprintf+0x3e2>
    1774:	99 2d       	mov	r25, r9
    1776:	9f 7e       	andi	r25, 0xEF	; 239
    1778:	96 ff       	sbrs	r25, 6
    177a:	16 e0       	ldi	r17, 0x06	; 6
    177c:	9f 73       	andi	r25, 0x3F	; 63
    177e:	99 2e       	mov	r9, r25
    1780:	85 36       	cpi	r24, 0x65	; 101
    1782:	19 f4       	brne	.+6      	; 0x178a <vfprintf+0x12c>
    1784:	90 64       	ori	r25, 0x40	; 64
    1786:	99 2e       	mov	r9, r25
    1788:	08 c0       	rjmp	.+16     	; 0x179a <vfprintf+0x13c>
    178a:	86 36       	cpi	r24, 0x66	; 102
    178c:	21 f4       	brne	.+8      	; 0x1796 <vfprintf+0x138>
    178e:	39 2f       	mov	r19, r25
    1790:	30 68       	ori	r19, 0x80	; 128
    1792:	93 2e       	mov	r9, r19
    1794:	02 c0       	rjmp	.+4      	; 0x179a <vfprintf+0x13c>
    1796:	11 11       	cpse	r17, r1
    1798:	11 50       	subi	r17, 0x01	; 1
    179a:	97 fe       	sbrs	r9, 7
    179c:	07 c0       	rjmp	.+14     	; 0x17ac <vfprintf+0x14e>
    179e:	1c 33       	cpi	r17, 0x3C	; 60
    17a0:	50 f4       	brcc	.+20     	; 0x17b6 <vfprintf+0x158>
    17a2:	44 24       	eor	r4, r4
    17a4:	43 94       	inc	r4
    17a6:	41 0e       	add	r4, r17
    17a8:	27 e0       	ldi	r18, 0x07	; 7
    17aa:	0b c0       	rjmp	.+22     	; 0x17c2 <vfprintf+0x164>
    17ac:	18 30       	cpi	r17, 0x08	; 8
    17ae:	38 f0       	brcs	.+14     	; 0x17be <vfprintf+0x160>
    17b0:	27 e0       	ldi	r18, 0x07	; 7
    17b2:	17 e0       	ldi	r17, 0x07	; 7
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <vfprintf+0x162>
    17b6:	27 e0       	ldi	r18, 0x07	; 7
    17b8:	9c e3       	ldi	r25, 0x3C	; 60
    17ba:	49 2e       	mov	r4, r25
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <vfprintf+0x164>
    17be:	21 2f       	mov	r18, r17
    17c0:	41 2c       	mov	r4, r1
    17c2:	56 01       	movw	r10, r12
    17c4:	84 e0       	ldi	r24, 0x04	; 4
    17c6:	a8 0e       	add	r10, r24
    17c8:	b1 1c       	adc	r11, r1
    17ca:	f6 01       	movw	r30, r12
    17cc:	60 81       	ld	r22, Z
    17ce:	71 81       	ldd	r23, Z+1	; 0x01
    17d0:	82 81       	ldd	r24, Z+2	; 0x02
    17d2:	93 81       	ldd	r25, Z+3	; 0x03
    17d4:	04 2d       	mov	r16, r4
    17d6:	a3 01       	movw	r20, r6
    17d8:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <__ftoa_engine>
    17dc:	6c 01       	movw	r12, r24
    17de:	f9 81       	ldd	r31, Y+1	; 0x01
    17e0:	fc 87       	std	Y+12, r31	; 0x0c
    17e2:	f0 ff       	sbrs	r31, 0
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <vfprintf+0x18c>
    17e6:	f3 ff       	sbrs	r31, 3
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <vfprintf+0x198>
    17ea:	91 fc       	sbrc	r9, 1
    17ec:	06 c0       	rjmp	.+12     	; 0x17fa <vfprintf+0x19c>
    17ee:	92 fe       	sbrs	r9, 2
    17f0:	06 c0       	rjmp	.+12     	; 0x17fe <vfprintf+0x1a0>
    17f2:	00 e2       	ldi	r16, 0x20	; 32
    17f4:	05 c0       	rjmp	.+10     	; 0x1800 <vfprintf+0x1a2>
    17f6:	0d e2       	ldi	r16, 0x2D	; 45
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <vfprintf+0x1a2>
    17fa:	0b e2       	ldi	r16, 0x2B	; 43
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <vfprintf+0x1a2>
    17fe:	00 e0       	ldi	r16, 0x00	; 0
    1800:	8c 85       	ldd	r24, Y+12	; 0x0c
    1802:	8c 70       	andi	r24, 0x0C	; 12
    1804:	19 f0       	breq	.+6      	; 0x180c <vfprintf+0x1ae>
    1806:	01 11       	cpse	r16, r1
    1808:	5a c2       	rjmp	.+1204   	; 0x1cbe <vfprintf+0x660>
    180a:	9b c2       	rjmp	.+1334   	; 0x1d42 <vfprintf+0x6e4>
    180c:	97 fe       	sbrs	r9, 7
    180e:	10 c0       	rjmp	.+32     	; 0x1830 <vfprintf+0x1d2>
    1810:	4c 0c       	add	r4, r12
    1812:	fc 85       	ldd	r31, Y+12	; 0x0c
    1814:	f4 ff       	sbrs	r31, 4
    1816:	04 c0       	rjmp	.+8      	; 0x1820 <vfprintf+0x1c2>
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	81 33       	cpi	r24, 0x31	; 49
    181c:	09 f4       	brne	.+2      	; 0x1820 <vfprintf+0x1c2>
    181e:	4a 94       	dec	r4
    1820:	14 14       	cp	r1, r4
    1822:	74 f5       	brge	.+92     	; 0x1880 <vfprintf+0x222>
    1824:	28 e0       	ldi	r18, 0x08	; 8
    1826:	24 15       	cp	r18, r4
    1828:	78 f5       	brcc	.+94     	; 0x1888 <vfprintf+0x22a>
    182a:	88 e0       	ldi	r24, 0x08	; 8
    182c:	48 2e       	mov	r4, r24
    182e:	2c c0       	rjmp	.+88     	; 0x1888 <vfprintf+0x22a>
    1830:	96 fc       	sbrc	r9, 6
    1832:	2a c0       	rjmp	.+84     	; 0x1888 <vfprintf+0x22a>
    1834:	81 2f       	mov	r24, r17
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	8c 15       	cp	r24, r12
    183a:	9d 05       	cpc	r25, r13
    183c:	9c f0       	brlt	.+38     	; 0x1864 <vfprintf+0x206>
    183e:	3c ef       	ldi	r19, 0xFC	; 252
    1840:	c3 16       	cp	r12, r19
    1842:	3f ef       	ldi	r19, 0xFF	; 255
    1844:	d3 06       	cpc	r13, r19
    1846:	74 f0       	brlt	.+28     	; 0x1864 <vfprintf+0x206>
    1848:	89 2d       	mov	r24, r9
    184a:	80 68       	ori	r24, 0x80	; 128
    184c:	98 2e       	mov	r9, r24
    184e:	0a c0       	rjmp	.+20     	; 0x1864 <vfprintf+0x206>
    1850:	e2 e0       	ldi	r30, 0x02	; 2
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	ec 0f       	add	r30, r28
    1856:	fd 1f       	adc	r31, r29
    1858:	e1 0f       	add	r30, r17
    185a:	f1 1d       	adc	r31, r1
    185c:	80 81       	ld	r24, Z
    185e:	80 33       	cpi	r24, 0x30	; 48
    1860:	19 f4       	brne	.+6      	; 0x1868 <vfprintf+0x20a>
    1862:	11 50       	subi	r17, 0x01	; 1
    1864:	11 11       	cpse	r17, r1
    1866:	f4 cf       	rjmp	.-24     	; 0x1850 <vfprintf+0x1f2>
    1868:	97 fe       	sbrs	r9, 7
    186a:	0e c0       	rjmp	.+28     	; 0x1888 <vfprintf+0x22a>
    186c:	44 24       	eor	r4, r4
    186e:	43 94       	inc	r4
    1870:	41 0e       	add	r4, r17
    1872:	81 2f       	mov	r24, r17
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	c8 16       	cp	r12, r24
    1878:	d9 06       	cpc	r13, r25
    187a:	2c f4       	brge	.+10     	; 0x1886 <vfprintf+0x228>
    187c:	1c 19       	sub	r17, r12
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <vfprintf+0x22a>
    1880:	44 24       	eor	r4, r4
    1882:	43 94       	inc	r4
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <vfprintf+0x22a>
    1886:	10 e0       	ldi	r17, 0x00	; 0
    1888:	97 fe       	sbrs	r9, 7
    188a:	06 c0       	rjmp	.+12     	; 0x1898 <vfprintf+0x23a>
    188c:	1c 14       	cp	r1, r12
    188e:	1d 04       	cpc	r1, r13
    1890:	34 f4       	brge	.+12     	; 0x189e <vfprintf+0x240>
    1892:	c6 01       	movw	r24, r12
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	05 c0       	rjmp	.+10     	; 0x18a2 <vfprintf+0x244>
    1898:	85 e0       	ldi	r24, 0x05	; 5
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <vfprintf+0x244>
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	01 11       	cpse	r16, r1
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	11 23       	and	r17, r17
    18a8:	31 f0       	breq	.+12     	; 0x18b6 <vfprintf+0x258>
    18aa:	21 2f       	mov	r18, r17
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	2f 5f       	subi	r18, 0xFF	; 255
    18b0:	3f 4f       	sbci	r19, 0xFF	; 255
    18b2:	82 0f       	add	r24, r18
    18b4:	93 1f       	adc	r25, r19
    18b6:	25 2d       	mov	r18, r5
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	82 17       	cp	r24, r18
    18bc:	93 07       	cpc	r25, r19
    18be:	14 f4       	brge	.+4      	; 0x18c4 <vfprintf+0x266>
    18c0:	58 1a       	sub	r5, r24
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <vfprintf+0x268>
    18c4:	51 2c       	mov	r5, r1
    18c6:	89 2d       	mov	r24, r9
    18c8:	89 70       	andi	r24, 0x09	; 9
    18ca:	49 f4       	brne	.+18     	; 0x18de <vfprintf+0x280>
    18cc:	55 20       	and	r5, r5
    18ce:	39 f0       	breq	.+14     	; 0x18de <vfprintf+0x280>
    18d0:	b7 01       	movw	r22, r14
    18d2:	80 e2       	ldi	r24, 0x20	; 32
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    18da:	5a 94       	dec	r5
    18dc:	f7 cf       	rjmp	.-18     	; 0x18cc <vfprintf+0x26e>
    18de:	00 23       	and	r16, r16
    18e0:	29 f0       	breq	.+10     	; 0x18ec <vfprintf+0x28e>
    18e2:	b7 01       	movw	r22, r14
    18e4:	80 2f       	mov	r24, r16
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    18ec:	93 fc       	sbrc	r9, 3
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <vfprintf+0x2a4>
    18f0:	55 20       	and	r5, r5
    18f2:	39 f0       	breq	.+14     	; 0x1902 <vfprintf+0x2a4>
    18f4:	b7 01       	movw	r22, r14
    18f6:	80 e3       	ldi	r24, 0x30	; 48
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    18fe:	5a 94       	dec	r5
    1900:	f7 cf       	rjmp	.-18     	; 0x18f0 <vfprintf+0x292>
    1902:	97 fe       	sbrs	r9, 7
    1904:	4c c0       	rjmp	.+152    	; 0x199e <vfprintf+0x340>
    1906:	46 01       	movw	r8, r12
    1908:	d7 fe       	sbrs	r13, 7
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <vfprintf+0x2b2>
    190c:	81 2c       	mov	r8, r1
    190e:	91 2c       	mov	r9, r1
    1910:	c6 01       	movw	r24, r12
    1912:	88 19       	sub	r24, r8
    1914:	99 09       	sbc	r25, r9
    1916:	f3 01       	movw	r30, r6
    1918:	e8 0f       	add	r30, r24
    191a:	f9 1f       	adc	r31, r25
    191c:	fe 87       	std	Y+14, r31	; 0x0e
    191e:	ed 87       	std	Y+13, r30	; 0x0d
    1920:	96 01       	movw	r18, r12
    1922:	24 19       	sub	r18, r4
    1924:	31 09       	sbc	r19, r1
    1926:	38 8b       	std	Y+16, r19	; 0x10
    1928:	2f 87       	std	Y+15, r18	; 0x0f
    192a:	01 2f       	mov	r16, r17
    192c:	10 e0       	ldi	r17, 0x00	; 0
    192e:	11 95       	neg	r17
    1930:	01 95       	neg	r16
    1932:	11 09       	sbc	r17, r1
    1934:	3f ef       	ldi	r19, 0xFF	; 255
    1936:	83 16       	cp	r8, r19
    1938:	93 06       	cpc	r9, r19
    193a:	29 f4       	brne	.+10     	; 0x1946 <vfprintf+0x2e8>
    193c:	b7 01       	movw	r22, r14
    193e:	8e e2       	ldi	r24, 0x2E	; 46
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1946:	c8 14       	cp	r12, r8
    1948:	d9 04       	cpc	r13, r9
    194a:	4c f0       	brlt	.+18     	; 0x195e <vfprintf+0x300>
    194c:	8f 85       	ldd	r24, Y+15	; 0x0f
    194e:	98 89       	ldd	r25, Y+16	; 0x10
    1950:	88 15       	cp	r24, r8
    1952:	99 05       	cpc	r25, r9
    1954:	24 f4       	brge	.+8      	; 0x195e <vfprintf+0x300>
    1956:	ed 85       	ldd	r30, Y+13	; 0x0d
    1958:	fe 85       	ldd	r31, Y+14	; 0x0e
    195a:	81 81       	ldd	r24, Z+1	; 0x01
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <vfprintf+0x302>
    195e:	80 e3       	ldi	r24, 0x30	; 48
    1960:	f1 e0       	ldi	r31, 0x01	; 1
    1962:	8f 1a       	sub	r8, r31
    1964:	91 08       	sbc	r9, r1
    1966:	2d 85       	ldd	r18, Y+13	; 0x0d
    1968:	3e 85       	ldd	r19, Y+14	; 0x0e
    196a:	2f 5f       	subi	r18, 0xFF	; 255
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
    196e:	3e 87       	std	Y+14, r19	; 0x0e
    1970:	2d 87       	std	Y+13, r18	; 0x0d
    1972:	80 16       	cp	r8, r16
    1974:	91 06       	cpc	r9, r17
    1976:	2c f0       	brlt	.+10     	; 0x1982 <vfprintf+0x324>
    1978:	b7 01       	movw	r22, r14
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1980:	d9 cf       	rjmp	.-78     	; 0x1934 <vfprintf+0x2d6>
    1982:	c8 14       	cp	r12, r8
    1984:	d9 04       	cpc	r13, r9
    1986:	41 f4       	brne	.+16     	; 0x1998 <vfprintf+0x33a>
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	96 33       	cpi	r25, 0x36	; 54
    198c:	20 f4       	brcc	.+8      	; 0x1996 <vfprintf+0x338>
    198e:	95 33       	cpi	r25, 0x35	; 53
    1990:	19 f4       	brne	.+6      	; 0x1998 <vfprintf+0x33a>
    1992:	3c 85       	ldd	r19, Y+12	; 0x0c
    1994:	34 ff       	sbrs	r19, 4
    1996:	81 e3       	ldi	r24, 0x31	; 49
    1998:	b7 01       	movw	r22, r14
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	4e c0       	rjmp	.+156    	; 0x1a3a <vfprintf+0x3dc>
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	81 33       	cpi	r24, 0x31	; 49
    19a2:	19 f0       	breq	.+6      	; 0x19aa <vfprintf+0x34c>
    19a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    19a6:	9f 7e       	andi	r25, 0xEF	; 239
    19a8:	9c 87       	std	Y+12, r25	; 0x0c
    19aa:	b7 01       	movw	r22, r14
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    19b2:	11 11       	cpse	r17, r1
    19b4:	05 c0       	rjmp	.+10     	; 0x19c0 <vfprintf+0x362>
    19b6:	94 fc       	sbrc	r9, 4
    19b8:	18 c0       	rjmp	.+48     	; 0x19ea <vfprintf+0x38c>
    19ba:	85 e6       	ldi	r24, 0x65	; 101
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	17 c0       	rjmp	.+46     	; 0x19ee <vfprintf+0x390>
    19c0:	b7 01       	movw	r22, r14
    19c2:	8e e2       	ldi	r24, 0x2E	; 46
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    19ca:	1e 5f       	subi	r17, 0xFE	; 254
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	01 e0       	ldi	r16, 0x01	; 1
    19d0:	08 0f       	add	r16, r24
    19d2:	f3 01       	movw	r30, r6
    19d4:	e8 0f       	add	r30, r24
    19d6:	f1 1d       	adc	r31, r1
    19d8:	80 81       	ld	r24, Z
    19da:	b7 01       	movw	r22, r14
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    19e2:	80 2f       	mov	r24, r16
    19e4:	01 13       	cpse	r16, r17
    19e6:	f3 cf       	rjmp	.-26     	; 0x19ce <vfprintf+0x370>
    19e8:	e6 cf       	rjmp	.-52     	; 0x19b6 <vfprintf+0x358>
    19ea:	85 e4       	ldi	r24, 0x45	; 69
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	b7 01       	movw	r22, r14
    19f0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    19f4:	d7 fc       	sbrc	r13, 7
    19f6:	06 c0       	rjmp	.+12     	; 0x1a04 <vfprintf+0x3a6>
    19f8:	c1 14       	cp	r12, r1
    19fa:	d1 04       	cpc	r13, r1
    19fc:	41 f4       	brne	.+16     	; 0x1a0e <vfprintf+0x3b0>
    19fe:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a00:	e4 ff       	sbrs	r30, 4
    1a02:	05 c0       	rjmp	.+10     	; 0x1a0e <vfprintf+0x3b0>
    1a04:	d1 94       	neg	r13
    1a06:	c1 94       	neg	r12
    1a08:	d1 08       	sbc	r13, r1
    1a0a:	8d e2       	ldi	r24, 0x2D	; 45
    1a0c:	01 c0       	rjmp	.+2      	; 0x1a10 <vfprintf+0x3b2>
    1a0e:	8b e2       	ldi	r24, 0x2B	; 43
    1a10:	b7 01       	movw	r22, r14
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1a18:	80 e3       	ldi	r24, 0x30	; 48
    1a1a:	2a e0       	ldi	r18, 0x0A	; 10
    1a1c:	c2 16       	cp	r12, r18
    1a1e:	d1 04       	cpc	r13, r1
    1a20:	2c f0       	brlt	.+10     	; 0x1a2c <vfprintf+0x3ce>
    1a22:	8f 5f       	subi	r24, 0xFF	; 255
    1a24:	fa e0       	ldi	r31, 0x0A	; 10
    1a26:	cf 1a       	sub	r12, r31
    1a28:	d1 08       	sbc	r13, r1
    1a2a:	f7 cf       	rjmp	.-18     	; 0x1a1a <vfprintf+0x3bc>
    1a2c:	b7 01       	movw	r22, r14
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1a34:	b7 01       	movw	r22, r14
    1a36:	c6 01       	movw	r24, r12
    1a38:	c0 96       	adiw	r24, 0x30	; 48
    1a3a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1a3e:	54 c1       	rjmp	.+680    	; 0x1ce8 <vfprintf+0x68a>
    1a40:	83 36       	cpi	r24, 0x63	; 99
    1a42:	31 f0       	breq	.+12     	; 0x1a50 <vfprintf+0x3f2>
    1a44:	83 37       	cpi	r24, 0x73	; 115
    1a46:	79 f0       	breq	.+30     	; 0x1a66 <vfprintf+0x408>
    1a48:	83 35       	cpi	r24, 0x53	; 83
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <vfprintf+0x3f0>
    1a4c:	56 c0       	rjmp	.+172    	; 0x1afa <vfprintf+0x49c>
    1a4e:	20 c0       	rjmp	.+64     	; 0x1a90 <vfprintf+0x432>
    1a50:	56 01       	movw	r10, r12
    1a52:	32 e0       	ldi	r19, 0x02	; 2
    1a54:	a3 0e       	add	r10, r19
    1a56:	b1 1c       	adc	r11, r1
    1a58:	f6 01       	movw	r30, r12
    1a5a:	80 81       	ld	r24, Z
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	01 e0       	ldi	r16, 0x01	; 1
    1a60:	10 e0       	ldi	r17, 0x00	; 0
    1a62:	63 01       	movw	r12, r6
    1a64:	12 c0       	rjmp	.+36     	; 0x1a8a <vfprintf+0x42c>
    1a66:	56 01       	movw	r10, r12
    1a68:	f2 e0       	ldi	r31, 0x02	; 2
    1a6a:	af 0e       	add	r10, r31
    1a6c:	b1 1c       	adc	r11, r1
    1a6e:	f6 01       	movw	r30, r12
    1a70:	c0 80       	ld	r12, Z
    1a72:	d1 80       	ldd	r13, Z+1	; 0x01
    1a74:	96 fe       	sbrs	r9, 6
    1a76:	03 c0       	rjmp	.+6      	; 0x1a7e <vfprintf+0x420>
    1a78:	61 2f       	mov	r22, r17
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <vfprintf+0x424>
    1a7e:	6f ef       	ldi	r22, 0xFF	; 255
    1a80:	7f ef       	ldi	r23, 0xFF	; 255
    1a82:	c6 01       	movw	r24, r12
    1a84:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <strnlen>
    1a88:	8c 01       	movw	r16, r24
    1a8a:	f9 2d       	mov	r31, r9
    1a8c:	ff 77       	andi	r31, 0x7F	; 127
    1a8e:	14 c0       	rjmp	.+40     	; 0x1ab8 <vfprintf+0x45a>
    1a90:	56 01       	movw	r10, r12
    1a92:	22 e0       	ldi	r18, 0x02	; 2
    1a94:	a2 0e       	add	r10, r18
    1a96:	b1 1c       	adc	r11, r1
    1a98:	f6 01       	movw	r30, r12
    1a9a:	c0 80       	ld	r12, Z
    1a9c:	d1 80       	ldd	r13, Z+1	; 0x01
    1a9e:	96 fe       	sbrs	r9, 6
    1aa0:	03 c0       	rjmp	.+6      	; 0x1aa8 <vfprintf+0x44a>
    1aa2:	61 2f       	mov	r22, r17
    1aa4:	70 e0       	ldi	r23, 0x00	; 0
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <vfprintf+0x44e>
    1aa8:	6f ef       	ldi	r22, 0xFF	; 255
    1aaa:	7f ef       	ldi	r23, 0xFF	; 255
    1aac:	c6 01       	movw	r24, r12
    1aae:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <strnlen_P>
    1ab2:	8c 01       	movw	r16, r24
    1ab4:	f9 2d       	mov	r31, r9
    1ab6:	f0 68       	ori	r31, 0x80	; 128
    1ab8:	9f 2e       	mov	r9, r31
    1aba:	f3 fd       	sbrc	r31, 3
    1abc:	1a c0       	rjmp	.+52     	; 0x1af2 <vfprintf+0x494>
    1abe:	85 2d       	mov	r24, r5
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	08 17       	cp	r16, r24
    1ac4:	19 07       	cpc	r17, r25
    1ac6:	a8 f4       	brcc	.+42     	; 0x1af2 <vfprintf+0x494>
    1ac8:	b7 01       	movw	r22, r14
    1aca:	80 e2       	ldi	r24, 0x20	; 32
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1ad2:	5a 94       	dec	r5
    1ad4:	f4 cf       	rjmp	.-24     	; 0x1abe <vfprintf+0x460>
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	97 fc       	sbrc	r9, 7
    1ada:	85 91       	lpm	r24, Z+
    1adc:	97 fe       	sbrs	r9, 7
    1ade:	81 91       	ld	r24, Z+
    1ae0:	6f 01       	movw	r12, r30
    1ae2:	b7 01       	movw	r22, r14
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1aea:	51 10       	cpse	r5, r1
    1aec:	5a 94       	dec	r5
    1aee:	01 50       	subi	r16, 0x01	; 1
    1af0:	11 09       	sbc	r17, r1
    1af2:	01 15       	cp	r16, r1
    1af4:	11 05       	cpc	r17, r1
    1af6:	79 f7       	brne	.-34     	; 0x1ad6 <vfprintf+0x478>
    1af8:	f7 c0       	rjmp	.+494    	; 0x1ce8 <vfprintf+0x68a>
    1afa:	84 36       	cpi	r24, 0x64	; 100
    1afc:	11 f0       	breq	.+4      	; 0x1b02 <vfprintf+0x4a4>
    1afe:	89 36       	cpi	r24, 0x69	; 105
    1b00:	61 f5       	brne	.+88     	; 0x1b5a <vfprintf+0x4fc>
    1b02:	56 01       	movw	r10, r12
    1b04:	97 fe       	sbrs	r9, 7
    1b06:	09 c0       	rjmp	.+18     	; 0x1b1a <vfprintf+0x4bc>
    1b08:	24 e0       	ldi	r18, 0x04	; 4
    1b0a:	a2 0e       	add	r10, r18
    1b0c:	b1 1c       	adc	r11, r1
    1b0e:	f6 01       	movw	r30, r12
    1b10:	60 81       	ld	r22, Z
    1b12:	71 81       	ldd	r23, Z+1	; 0x01
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	93 81       	ldd	r25, Z+3	; 0x03
    1b18:	0a c0       	rjmp	.+20     	; 0x1b2e <vfprintf+0x4d0>
    1b1a:	f2 e0       	ldi	r31, 0x02	; 2
    1b1c:	af 0e       	add	r10, r31
    1b1e:	b1 1c       	adc	r11, r1
    1b20:	f6 01       	movw	r30, r12
    1b22:	60 81       	ld	r22, Z
    1b24:	71 81       	ldd	r23, Z+1	; 0x01
    1b26:	07 2e       	mov	r0, r23
    1b28:	00 0c       	add	r0, r0
    1b2a:	88 0b       	sbc	r24, r24
    1b2c:	99 0b       	sbc	r25, r25
    1b2e:	f9 2d       	mov	r31, r9
    1b30:	ff 76       	andi	r31, 0x6F	; 111
    1b32:	9f 2e       	mov	r9, r31
    1b34:	97 ff       	sbrs	r25, 7
    1b36:	09 c0       	rjmp	.+18     	; 0x1b4a <vfprintf+0x4ec>
    1b38:	90 95       	com	r25
    1b3a:	80 95       	com	r24
    1b3c:	70 95       	com	r23
    1b3e:	61 95       	neg	r22
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255
    1b42:	8f 4f       	sbci	r24, 0xFF	; 255
    1b44:	9f 4f       	sbci	r25, 0xFF	; 255
    1b46:	f0 68       	ori	r31, 0x80	; 128
    1b48:	9f 2e       	mov	r9, r31
    1b4a:	2a e0       	ldi	r18, 0x0A	; 10
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	a3 01       	movw	r20, r6
    1b50:	0e 94 3e 10 	call	0x207c	; 0x207c <__ultoa_invert>
    1b54:	c8 2e       	mov	r12, r24
    1b56:	c6 18       	sub	r12, r6
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <vfprintf+0x57a>
    1b5a:	09 2d       	mov	r16, r9
    1b5c:	85 37       	cpi	r24, 0x75	; 117
    1b5e:	21 f4       	brne	.+8      	; 0x1b68 <vfprintf+0x50a>
    1b60:	0f 7e       	andi	r16, 0xEF	; 239
    1b62:	2a e0       	ldi	r18, 0x0A	; 10
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	1d c0       	rjmp	.+58     	; 0x1ba2 <vfprintf+0x544>
    1b68:	09 7f       	andi	r16, 0xF9	; 249
    1b6a:	8f 36       	cpi	r24, 0x6F	; 111
    1b6c:	91 f0       	breq	.+36     	; 0x1b92 <vfprintf+0x534>
    1b6e:	18 f4       	brcc	.+6      	; 0x1b76 <vfprintf+0x518>
    1b70:	88 35       	cpi	r24, 0x58	; 88
    1b72:	59 f0       	breq	.+22     	; 0x1b8a <vfprintf+0x52c>
    1b74:	c3 c0       	rjmp	.+390    	; 0x1cfc <vfprintf+0x69e>
    1b76:	80 37       	cpi	r24, 0x70	; 112
    1b78:	19 f0       	breq	.+6      	; 0x1b80 <vfprintf+0x522>
    1b7a:	88 37       	cpi	r24, 0x78	; 120
    1b7c:	11 f0       	breq	.+4      	; 0x1b82 <vfprintf+0x524>
    1b7e:	be c0       	rjmp	.+380    	; 0x1cfc <vfprintf+0x69e>
    1b80:	00 61       	ori	r16, 0x10	; 16
    1b82:	04 ff       	sbrs	r16, 4
    1b84:	09 c0       	rjmp	.+18     	; 0x1b98 <vfprintf+0x53a>
    1b86:	04 60       	ori	r16, 0x04	; 4
    1b88:	07 c0       	rjmp	.+14     	; 0x1b98 <vfprintf+0x53a>
    1b8a:	94 fe       	sbrs	r9, 4
    1b8c:	08 c0       	rjmp	.+16     	; 0x1b9e <vfprintf+0x540>
    1b8e:	06 60       	ori	r16, 0x06	; 6
    1b90:	06 c0       	rjmp	.+12     	; 0x1b9e <vfprintf+0x540>
    1b92:	28 e0       	ldi	r18, 0x08	; 8
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	05 c0       	rjmp	.+10     	; 0x1ba2 <vfprintf+0x544>
    1b98:	20 e1       	ldi	r18, 0x10	; 16
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <vfprintf+0x544>
    1b9e:	20 e1       	ldi	r18, 0x10	; 16
    1ba0:	32 e0       	ldi	r19, 0x02	; 2
    1ba2:	56 01       	movw	r10, r12
    1ba4:	07 ff       	sbrs	r16, 7
    1ba6:	09 c0       	rjmp	.+18     	; 0x1bba <vfprintf+0x55c>
    1ba8:	84 e0       	ldi	r24, 0x04	; 4
    1baa:	a8 0e       	add	r10, r24
    1bac:	b1 1c       	adc	r11, r1
    1bae:	f6 01       	movw	r30, r12
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	08 c0       	rjmp	.+16     	; 0x1bca <vfprintf+0x56c>
    1bba:	f2 e0       	ldi	r31, 0x02	; 2
    1bbc:	af 0e       	add	r10, r31
    1bbe:	b1 1c       	adc	r11, r1
    1bc0:	f6 01       	movw	r30, r12
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a3 01       	movw	r20, r6
    1bcc:	0e 94 3e 10 	call	0x207c	; 0x207c <__ultoa_invert>
    1bd0:	c8 2e       	mov	r12, r24
    1bd2:	c6 18       	sub	r12, r6
    1bd4:	0f 77       	andi	r16, 0x7F	; 127
    1bd6:	90 2e       	mov	r9, r16
    1bd8:	96 fe       	sbrs	r9, 6
    1bda:	0b c0       	rjmp	.+22     	; 0x1bf2 <vfprintf+0x594>
    1bdc:	09 2d       	mov	r16, r9
    1bde:	0e 7f       	andi	r16, 0xFE	; 254
    1be0:	c1 16       	cp	r12, r17
    1be2:	50 f4       	brcc	.+20     	; 0x1bf8 <vfprintf+0x59a>
    1be4:	94 fe       	sbrs	r9, 4
    1be6:	0a c0       	rjmp	.+20     	; 0x1bfc <vfprintf+0x59e>
    1be8:	92 fc       	sbrc	r9, 2
    1bea:	08 c0       	rjmp	.+16     	; 0x1bfc <vfprintf+0x59e>
    1bec:	09 2d       	mov	r16, r9
    1bee:	0e 7e       	andi	r16, 0xEE	; 238
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <vfprintf+0x59e>
    1bf2:	dc 2c       	mov	r13, r12
    1bf4:	09 2d       	mov	r16, r9
    1bf6:	03 c0       	rjmp	.+6      	; 0x1bfe <vfprintf+0x5a0>
    1bf8:	dc 2c       	mov	r13, r12
    1bfa:	01 c0       	rjmp	.+2      	; 0x1bfe <vfprintf+0x5a0>
    1bfc:	d1 2e       	mov	r13, r17
    1bfe:	04 ff       	sbrs	r16, 4
    1c00:	0d c0       	rjmp	.+26     	; 0x1c1c <vfprintf+0x5be>
    1c02:	fe 01       	movw	r30, r28
    1c04:	ec 0d       	add	r30, r12
    1c06:	f1 1d       	adc	r31, r1
    1c08:	80 81       	ld	r24, Z
    1c0a:	80 33       	cpi	r24, 0x30	; 48
    1c0c:	11 f4       	brne	.+4      	; 0x1c12 <vfprintf+0x5b4>
    1c0e:	09 7e       	andi	r16, 0xE9	; 233
    1c10:	09 c0       	rjmp	.+18     	; 0x1c24 <vfprintf+0x5c6>
    1c12:	02 ff       	sbrs	r16, 2
    1c14:	06 c0       	rjmp	.+12     	; 0x1c22 <vfprintf+0x5c4>
    1c16:	d3 94       	inc	r13
    1c18:	d3 94       	inc	r13
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <vfprintf+0x5c6>
    1c1c:	80 2f       	mov	r24, r16
    1c1e:	86 78       	andi	r24, 0x86	; 134
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <vfprintf+0x5c6>
    1c22:	d3 94       	inc	r13
    1c24:	03 fd       	sbrc	r16, 3
    1c26:	11 c0       	rjmp	.+34     	; 0x1c4a <vfprintf+0x5ec>
    1c28:	00 ff       	sbrs	r16, 0
    1c2a:	06 c0       	rjmp	.+12     	; 0x1c38 <vfprintf+0x5da>
    1c2c:	1c 2d       	mov	r17, r12
    1c2e:	d5 14       	cp	r13, r5
    1c30:	80 f4       	brcc	.+32     	; 0x1c52 <vfprintf+0x5f4>
    1c32:	15 0d       	add	r17, r5
    1c34:	1d 19       	sub	r17, r13
    1c36:	0d c0       	rjmp	.+26     	; 0x1c52 <vfprintf+0x5f4>
    1c38:	d5 14       	cp	r13, r5
    1c3a:	58 f4       	brcc	.+22     	; 0x1c52 <vfprintf+0x5f4>
    1c3c:	b7 01       	movw	r22, r14
    1c3e:	80 e2       	ldi	r24, 0x20	; 32
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1c46:	d3 94       	inc	r13
    1c48:	f7 cf       	rjmp	.-18     	; 0x1c38 <vfprintf+0x5da>
    1c4a:	d5 14       	cp	r13, r5
    1c4c:	10 f4       	brcc	.+4      	; 0x1c52 <vfprintf+0x5f4>
    1c4e:	5d 18       	sub	r5, r13
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <vfprintf+0x5f6>
    1c52:	51 2c       	mov	r5, r1
    1c54:	04 ff       	sbrs	r16, 4
    1c56:	10 c0       	rjmp	.+32     	; 0x1c78 <vfprintf+0x61a>
    1c58:	b7 01       	movw	r22, r14
    1c5a:	80 e3       	ldi	r24, 0x30	; 48
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1c62:	02 ff       	sbrs	r16, 2
    1c64:	17 c0       	rjmp	.+46     	; 0x1c94 <vfprintf+0x636>
    1c66:	01 fd       	sbrc	r16, 1
    1c68:	03 c0       	rjmp	.+6      	; 0x1c70 <vfprintf+0x612>
    1c6a:	88 e7       	ldi	r24, 0x78	; 120
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <vfprintf+0x616>
    1c70:	88 e5       	ldi	r24, 0x58	; 88
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	b7 01       	movw	r22, r14
    1c76:	0c c0       	rjmp	.+24     	; 0x1c90 <vfprintf+0x632>
    1c78:	80 2f       	mov	r24, r16
    1c7a:	86 78       	andi	r24, 0x86	; 134
    1c7c:	59 f0       	breq	.+22     	; 0x1c94 <vfprintf+0x636>
    1c7e:	01 ff       	sbrs	r16, 1
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <vfprintf+0x628>
    1c82:	8b e2       	ldi	r24, 0x2B	; 43
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <vfprintf+0x62a>
    1c86:	80 e2       	ldi	r24, 0x20	; 32
    1c88:	07 fd       	sbrc	r16, 7
    1c8a:	8d e2       	ldi	r24, 0x2D	; 45
    1c8c:	b7 01       	movw	r22, r14
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1c94:	c1 16       	cp	r12, r17
    1c96:	38 f4       	brcc	.+14     	; 0x1ca6 <vfprintf+0x648>
    1c98:	b7 01       	movw	r22, r14
    1c9a:	80 e3       	ldi	r24, 0x30	; 48
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1ca2:	11 50       	subi	r17, 0x01	; 1
    1ca4:	f7 cf       	rjmp	.-18     	; 0x1c94 <vfprintf+0x636>
    1ca6:	ca 94       	dec	r12
    1ca8:	f3 01       	movw	r30, r6
    1caa:	ec 0d       	add	r30, r12
    1cac:	f1 1d       	adc	r31, r1
    1cae:	80 81       	ld	r24, Z
    1cb0:	b7 01       	movw	r22, r14
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1cb8:	c1 10       	cpse	r12, r1
    1cba:	f5 cf       	rjmp	.-22     	; 0x1ca6 <vfprintf+0x648>
    1cbc:	15 c0       	rjmp	.+42     	; 0x1ce8 <vfprintf+0x68a>
    1cbe:	f4 e0       	ldi	r31, 0x04	; 4
    1cc0:	f5 15       	cp	r31, r5
    1cc2:	60 f5       	brcc	.+88     	; 0x1d1c <vfprintf+0x6be>
    1cc4:	84 e0       	ldi	r24, 0x04	; 4
    1cc6:	58 1a       	sub	r5, r24
    1cc8:	93 fe       	sbrs	r9, 3
    1cca:	1f c0       	rjmp	.+62     	; 0x1d0a <vfprintf+0x6ac>
    1ccc:	01 11       	cpse	r16, r1
    1cce:	27 c0       	rjmp	.+78     	; 0x1d1e <vfprintf+0x6c0>
    1cd0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cd2:	23 ff       	sbrs	r18, 3
    1cd4:	2a c0       	rjmp	.+84     	; 0x1d2a <vfprintf+0x6cc>
    1cd6:	08 e7       	ldi	r16, 0x78	; 120
    1cd8:	10 e0       	ldi	r17, 0x00	; 0
    1cda:	39 2d       	mov	r19, r9
    1cdc:	30 71       	andi	r19, 0x10	; 16
    1cde:	93 2e       	mov	r9, r19
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	84 91       	lpm	r24, Z
    1ce4:	81 11       	cpse	r24, r1
    1ce6:	24 c0       	rjmp	.+72     	; 0x1d30 <vfprintf+0x6d2>
    1ce8:	55 20       	and	r5, r5
    1cea:	09 f4       	brne	.+2      	; 0x1cee <vfprintf+0x690>
    1cec:	e4 cc       	rjmp	.-1592   	; 0x16b6 <vfprintf+0x58>
    1cee:	b7 01       	movw	r22, r14
    1cf0:	80 e2       	ldi	r24, 0x20	; 32
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1cf8:	5a 94       	dec	r5
    1cfa:	f6 cf       	rjmp	.-20     	; 0x1ce8 <vfprintf+0x68a>
    1cfc:	f7 01       	movw	r30, r14
    1cfe:	86 81       	ldd	r24, Z+6	; 0x06
    1d00:	97 81       	ldd	r25, Z+7	; 0x07
    1d02:	26 c0       	rjmp	.+76     	; 0x1d50 <vfprintf+0x6f2>
    1d04:	8f ef       	ldi	r24, 0xFF	; 255
    1d06:	9f ef       	ldi	r25, 0xFF	; 255
    1d08:	23 c0       	rjmp	.+70     	; 0x1d50 <vfprintf+0x6f2>
    1d0a:	b7 01       	movw	r22, r14
    1d0c:	80 e2       	ldi	r24, 0x20	; 32
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1d14:	5a 94       	dec	r5
    1d16:	51 10       	cpse	r5, r1
    1d18:	f8 cf       	rjmp	.-16     	; 0x1d0a <vfprintf+0x6ac>
    1d1a:	d8 cf       	rjmp	.-80     	; 0x1ccc <vfprintf+0x66e>
    1d1c:	51 2c       	mov	r5, r1
    1d1e:	b7 01       	movw	r22, r14
    1d20:	80 2f       	mov	r24, r16
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1d28:	d3 cf       	rjmp	.-90     	; 0x1cd0 <vfprintf+0x672>
    1d2a:	0c e7       	ldi	r16, 0x7C	; 124
    1d2c:	10 e0       	ldi	r17, 0x00	; 0
    1d2e:	d5 cf       	rjmp	.-86     	; 0x1cda <vfprintf+0x67c>
    1d30:	91 10       	cpse	r9, r1
    1d32:	80 52       	subi	r24, 0x20	; 32
    1d34:	b7 01       	movw	r22, r14
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1d3c:	0f 5f       	subi	r16, 0xFF	; 255
    1d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d40:	cf cf       	rjmp	.-98     	; 0x1ce0 <vfprintf+0x682>
    1d42:	23 e0       	ldi	r18, 0x03	; 3
    1d44:	25 15       	cp	r18, r5
    1d46:	10 f4       	brcc	.+4      	; 0x1d4c <vfprintf+0x6ee>
    1d48:	83 e0       	ldi	r24, 0x03	; 3
    1d4a:	bd cf       	rjmp	.-134    	; 0x1cc6 <vfprintf+0x668>
    1d4c:	51 2c       	mov	r5, r1
    1d4e:	c0 cf       	rjmp	.-128    	; 0x1cd0 <vfprintf+0x672>
    1d50:	60 96       	adiw	r28, 0x10	; 16
    1d52:	e2 e1       	ldi	r30, 0x12	; 18
    1d54:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <__epilogue_restores__>

00001d58 <__udivmodsi4>:
    1d58:	a1 e2       	ldi	r26, 0x21	; 33
    1d5a:	1a 2e       	mov	r1, r26
    1d5c:	aa 1b       	sub	r26, r26
    1d5e:	bb 1b       	sub	r27, r27
    1d60:	fd 01       	movw	r30, r26
    1d62:	0d c0       	rjmp	.+26     	; 0x1d7e <__udivmodsi4_ep>

00001d64 <__udivmodsi4_loop>:
    1d64:	aa 1f       	adc	r26, r26
    1d66:	bb 1f       	adc	r27, r27
    1d68:	ee 1f       	adc	r30, r30
    1d6a:	ff 1f       	adc	r31, r31
    1d6c:	a2 17       	cp	r26, r18
    1d6e:	b3 07       	cpc	r27, r19
    1d70:	e4 07       	cpc	r30, r20
    1d72:	f5 07       	cpc	r31, r21
    1d74:	20 f0       	brcs	.+8      	; 0x1d7e <__udivmodsi4_ep>
    1d76:	a2 1b       	sub	r26, r18
    1d78:	b3 0b       	sbc	r27, r19
    1d7a:	e4 0b       	sbc	r30, r20
    1d7c:	f5 0b       	sbc	r31, r21

00001d7e <__udivmodsi4_ep>:
    1d7e:	66 1f       	adc	r22, r22
    1d80:	77 1f       	adc	r23, r23
    1d82:	88 1f       	adc	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	1a 94       	dec	r1
    1d88:	69 f7       	brne	.-38     	; 0x1d64 <__udivmodsi4_loop>
    1d8a:	60 95       	com	r22
    1d8c:	70 95       	com	r23
    1d8e:	80 95       	com	r24
    1d90:	90 95       	com	r25
    1d92:	9b 01       	movw	r18, r22
    1d94:	ac 01       	movw	r20, r24
    1d96:	bd 01       	movw	r22, r26
    1d98:	cf 01       	movw	r24, r30
    1d9a:	08 95       	ret

00001d9c <__tablejump2__>:
    1d9c:	ee 0f       	add	r30, r30
    1d9e:	ff 1f       	adc	r31, r31
    1da0:	05 90       	lpm	r0, Z+
    1da2:	f4 91       	lpm	r31, Z
    1da4:	e0 2d       	mov	r30, r0
    1da6:	09 94       	ijmp

00001da8 <__prologue_saves__>:
    1da8:	2f 92       	push	r2
    1daa:	3f 92       	push	r3
    1dac:	4f 92       	push	r4
    1dae:	5f 92       	push	r5
    1db0:	6f 92       	push	r6
    1db2:	7f 92       	push	r7
    1db4:	8f 92       	push	r8
    1db6:	9f 92       	push	r9
    1db8:	af 92       	push	r10
    1dba:	bf 92       	push	r11
    1dbc:	cf 92       	push	r12
    1dbe:	df 92       	push	r13
    1dc0:	ef 92       	push	r14
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	ca 1b       	sub	r28, r26
    1dd2:	db 0b       	sbc	r29, r27
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	09 94       	ijmp

00001de0 <__epilogue_restores__>:
    1de0:	2a 88       	ldd	r2, Y+18	; 0x12
    1de2:	39 88       	ldd	r3, Y+17	; 0x11
    1de4:	48 88       	ldd	r4, Y+16	; 0x10
    1de6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1de8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dea:	7d 84       	ldd	r7, Y+13	; 0x0d
    1dec:	8c 84       	ldd	r8, Y+12	; 0x0c
    1dee:	9b 84       	ldd	r9, Y+11	; 0x0b
    1df0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1df2:	b9 84       	ldd	r11, Y+9	; 0x09
    1df4:	c8 84       	ldd	r12, Y+8	; 0x08
    1df6:	df 80       	ldd	r13, Y+7	; 0x07
    1df8:	ee 80       	ldd	r14, Y+6	; 0x06
    1dfa:	fd 80       	ldd	r15, Y+5	; 0x05
    1dfc:	0c 81       	ldd	r16, Y+4	; 0x04
    1dfe:	1b 81       	ldd	r17, Y+3	; 0x03
    1e00:	aa 81       	ldd	r26, Y+2	; 0x02
    1e02:	b9 81       	ldd	r27, Y+1	; 0x01
    1e04:	ce 0f       	add	r28, r30
    1e06:	d1 1d       	adc	r29, r1
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	ed 01       	movw	r28, r26
    1e14:	08 95       	ret

00001e16 <__ftoa_engine>:
    1e16:	28 30       	cpi	r18, 0x08	; 8
    1e18:	08 f0       	brcs	.+2      	; 0x1e1c <__ftoa_engine+0x6>
    1e1a:	27 e0       	ldi	r18, 0x07	; 7
    1e1c:	33 27       	eor	r19, r19
    1e1e:	da 01       	movw	r26, r20
    1e20:	99 0f       	add	r25, r25
    1e22:	31 1d       	adc	r19, r1
    1e24:	87 fd       	sbrc	r24, 7
    1e26:	91 60       	ori	r25, 0x01	; 1
    1e28:	00 96       	adiw	r24, 0x00	; 0
    1e2a:	61 05       	cpc	r22, r1
    1e2c:	71 05       	cpc	r23, r1
    1e2e:	39 f4       	brne	.+14     	; 0x1e3e <__ftoa_engine+0x28>
    1e30:	32 60       	ori	r19, 0x02	; 2
    1e32:	2e 5f       	subi	r18, 0xFE	; 254
    1e34:	3d 93       	st	X+, r19
    1e36:	30 e3       	ldi	r19, 0x30	; 48
    1e38:	2a 95       	dec	r18
    1e3a:	e1 f7       	brne	.-8      	; 0x1e34 <__ftoa_engine+0x1e>
    1e3c:	08 95       	ret
    1e3e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e40:	30 f0       	brcs	.+12     	; 0x1e4e <__ftoa_engine+0x38>
    1e42:	80 38       	cpi	r24, 0x80	; 128
    1e44:	71 05       	cpc	r23, r1
    1e46:	61 05       	cpc	r22, r1
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <__ftoa_engine+0x36>
    1e4a:	3c 5f       	subi	r19, 0xFC	; 252
    1e4c:	3c 5f       	subi	r19, 0xFC	; 252
    1e4e:	3d 93       	st	X+, r19
    1e50:	91 30       	cpi	r25, 0x01	; 1
    1e52:	08 f0       	brcs	.+2      	; 0x1e56 <__ftoa_engine+0x40>
    1e54:	80 68       	ori	r24, 0x80	; 128
    1e56:	91 1d       	adc	r25, r1
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	1f 93       	push	r17
    1e5e:	0f 93       	push	r16
    1e60:	ff 92       	push	r15
    1e62:	ef 92       	push	r14
    1e64:	19 2f       	mov	r17, r25
    1e66:	98 7f       	andi	r25, 0xF8	; 248
    1e68:	96 95       	lsr	r25
    1e6a:	e9 2f       	mov	r30, r25
    1e6c:	96 95       	lsr	r25
    1e6e:	96 95       	lsr	r25
    1e70:	e9 0f       	add	r30, r25
    1e72:	ff 27       	eor	r31, r31
    1e74:	e6 52       	subi	r30, 0x26	; 38
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	99 27       	eor	r25, r25
    1e7a:	33 27       	eor	r19, r19
    1e7c:	ee 24       	eor	r14, r14
    1e7e:	ff 24       	eor	r15, r15
    1e80:	a7 01       	movw	r20, r14
    1e82:	e7 01       	movw	r28, r14
    1e84:	05 90       	lpm	r0, Z+
    1e86:	08 94       	sec
    1e88:	07 94       	ror	r0
    1e8a:	28 f4       	brcc	.+10     	; 0x1e96 <__ftoa_engine+0x80>
    1e8c:	36 0f       	add	r19, r22
    1e8e:	e7 1e       	adc	r14, r23
    1e90:	f8 1e       	adc	r15, r24
    1e92:	49 1f       	adc	r20, r25
    1e94:	51 1d       	adc	r21, r1
    1e96:	66 0f       	add	r22, r22
    1e98:	77 1f       	adc	r23, r23
    1e9a:	88 1f       	adc	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	06 94       	lsr	r0
    1ea0:	a1 f7       	brne	.-24     	; 0x1e8a <__ftoa_engine+0x74>
    1ea2:	05 90       	lpm	r0, Z+
    1ea4:	07 94       	ror	r0
    1ea6:	28 f4       	brcc	.+10     	; 0x1eb2 <__ftoa_engine+0x9c>
    1ea8:	e7 0e       	add	r14, r23
    1eaa:	f8 1e       	adc	r15, r24
    1eac:	49 1f       	adc	r20, r25
    1eae:	56 1f       	adc	r21, r22
    1eb0:	c1 1d       	adc	r28, r1
    1eb2:	77 0f       	add	r23, r23
    1eb4:	88 1f       	adc	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	66 1f       	adc	r22, r22
    1eba:	06 94       	lsr	r0
    1ebc:	a1 f7       	brne	.-24     	; 0x1ea6 <__ftoa_engine+0x90>
    1ebe:	05 90       	lpm	r0, Z+
    1ec0:	07 94       	ror	r0
    1ec2:	28 f4       	brcc	.+10     	; 0x1ece <__ftoa_engine+0xb8>
    1ec4:	f8 0e       	add	r15, r24
    1ec6:	49 1f       	adc	r20, r25
    1ec8:	56 1f       	adc	r21, r22
    1eca:	c7 1f       	adc	r28, r23
    1ecc:	d1 1d       	adc	r29, r1
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	66 1f       	adc	r22, r22
    1ed4:	77 1f       	adc	r23, r23
    1ed6:	06 94       	lsr	r0
    1ed8:	a1 f7       	brne	.-24     	; 0x1ec2 <__ftoa_engine+0xac>
    1eda:	05 90       	lpm	r0, Z+
    1edc:	07 94       	ror	r0
    1ede:	20 f4       	brcc	.+8      	; 0x1ee8 <__ftoa_engine+0xd2>
    1ee0:	49 0f       	add	r20, r25
    1ee2:	56 1f       	adc	r21, r22
    1ee4:	c7 1f       	adc	r28, r23
    1ee6:	d8 1f       	adc	r29, r24
    1ee8:	99 0f       	add	r25, r25
    1eea:	66 1f       	adc	r22, r22
    1eec:	77 1f       	adc	r23, r23
    1eee:	88 1f       	adc	r24, r24
    1ef0:	06 94       	lsr	r0
    1ef2:	a9 f7       	brne	.-22     	; 0x1ede <__ftoa_engine+0xc8>
    1ef4:	84 91       	lpm	r24, Z
    1ef6:	10 95       	com	r17
    1ef8:	17 70       	andi	r17, 0x07	; 7
    1efa:	41 f0       	breq	.+16     	; 0x1f0c <__ftoa_engine+0xf6>
    1efc:	d6 95       	lsr	r29
    1efe:	c7 95       	ror	r28
    1f00:	57 95       	ror	r21
    1f02:	47 95       	ror	r20
    1f04:	f7 94       	ror	r15
    1f06:	e7 94       	ror	r14
    1f08:	1a 95       	dec	r17
    1f0a:	c1 f7       	brne	.-16     	; 0x1efc <__ftoa_engine+0xe6>
    1f0c:	e0 e8       	ldi	r30, 0x80	; 128
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	68 94       	set
    1f12:	15 90       	lpm	r1, Z+
    1f14:	15 91       	lpm	r17, Z+
    1f16:	35 91       	lpm	r19, Z+
    1f18:	65 91       	lpm	r22, Z+
    1f1a:	95 91       	lpm	r25, Z+
    1f1c:	05 90       	lpm	r0, Z+
    1f1e:	7f e2       	ldi	r23, 0x2F	; 47
    1f20:	73 95       	inc	r23
    1f22:	e1 18       	sub	r14, r1
    1f24:	f1 0a       	sbc	r15, r17
    1f26:	43 0b       	sbc	r20, r19
    1f28:	56 0b       	sbc	r21, r22
    1f2a:	c9 0b       	sbc	r28, r25
    1f2c:	d0 09       	sbc	r29, r0
    1f2e:	c0 f7       	brcc	.-16     	; 0x1f20 <__ftoa_engine+0x10a>
    1f30:	e1 0c       	add	r14, r1
    1f32:	f1 1e       	adc	r15, r17
    1f34:	43 1f       	adc	r20, r19
    1f36:	56 1f       	adc	r21, r22
    1f38:	c9 1f       	adc	r28, r25
    1f3a:	d0 1d       	adc	r29, r0
    1f3c:	7e f4       	brtc	.+30     	; 0x1f5c <__ftoa_engine+0x146>
    1f3e:	70 33       	cpi	r23, 0x30	; 48
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <__ftoa_engine+0x130>
    1f42:	8a 95       	dec	r24
    1f44:	e6 cf       	rjmp	.-52     	; 0x1f12 <__ftoa_engine+0xfc>
    1f46:	e8 94       	clt
    1f48:	01 50       	subi	r16, 0x01	; 1
    1f4a:	30 f0       	brcs	.+12     	; 0x1f58 <__ftoa_engine+0x142>
    1f4c:	08 0f       	add	r16, r24
    1f4e:	0a f4       	brpl	.+2      	; 0x1f52 <__ftoa_engine+0x13c>
    1f50:	00 27       	eor	r16, r16
    1f52:	02 17       	cp	r16, r18
    1f54:	08 f4       	brcc	.+2      	; 0x1f58 <__ftoa_engine+0x142>
    1f56:	20 2f       	mov	r18, r16
    1f58:	23 95       	inc	r18
    1f5a:	02 2f       	mov	r16, r18
    1f5c:	7a 33       	cpi	r23, 0x3A	; 58
    1f5e:	28 f0       	brcs	.+10     	; 0x1f6a <__ftoa_engine+0x154>
    1f60:	79 e3       	ldi	r23, 0x39	; 57
    1f62:	7d 93       	st	X+, r23
    1f64:	2a 95       	dec	r18
    1f66:	e9 f7       	brne	.-6      	; 0x1f62 <__ftoa_engine+0x14c>
    1f68:	10 c0       	rjmp	.+32     	; 0x1f8a <__ftoa_engine+0x174>
    1f6a:	7d 93       	st	X+, r23
    1f6c:	2a 95       	dec	r18
    1f6e:	89 f6       	brne	.-94     	; 0x1f12 <__ftoa_engine+0xfc>
    1f70:	06 94       	lsr	r0
    1f72:	97 95       	ror	r25
    1f74:	67 95       	ror	r22
    1f76:	37 95       	ror	r19
    1f78:	17 95       	ror	r17
    1f7a:	17 94       	ror	r1
    1f7c:	e1 18       	sub	r14, r1
    1f7e:	f1 0a       	sbc	r15, r17
    1f80:	43 0b       	sbc	r20, r19
    1f82:	56 0b       	sbc	r21, r22
    1f84:	c9 0b       	sbc	r28, r25
    1f86:	d0 09       	sbc	r29, r0
    1f88:	98 f0       	brcs	.+38     	; 0x1fb0 <__ftoa_engine+0x19a>
    1f8a:	23 95       	inc	r18
    1f8c:	7e 91       	ld	r23, -X
    1f8e:	73 95       	inc	r23
    1f90:	7a 33       	cpi	r23, 0x3A	; 58
    1f92:	08 f0       	brcs	.+2      	; 0x1f96 <__ftoa_engine+0x180>
    1f94:	70 e3       	ldi	r23, 0x30	; 48
    1f96:	7c 93       	st	X, r23
    1f98:	20 13       	cpse	r18, r16
    1f9a:	b8 f7       	brcc	.-18     	; 0x1f8a <__ftoa_engine+0x174>
    1f9c:	7e 91       	ld	r23, -X
    1f9e:	70 61       	ori	r23, 0x10	; 16
    1fa0:	7d 93       	st	X+, r23
    1fa2:	30 f0       	brcs	.+12     	; 0x1fb0 <__ftoa_engine+0x19a>
    1fa4:	83 95       	inc	r24
    1fa6:	71 e3       	ldi	r23, 0x31	; 49
    1fa8:	7d 93       	st	X+, r23
    1faa:	70 e3       	ldi	r23, 0x30	; 48
    1fac:	2a 95       	dec	r18
    1fae:	e1 f7       	brne	.-8      	; 0x1fa8 <__ftoa_engine+0x192>
    1fb0:	11 24       	eor	r1, r1
    1fb2:	ef 90       	pop	r14
    1fb4:	ff 90       	pop	r15
    1fb6:	0f 91       	pop	r16
    1fb8:	1f 91       	pop	r17
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	99 27       	eor	r25, r25
    1fc0:	87 fd       	sbrc	r24, 7
    1fc2:	90 95       	com	r25
    1fc4:	08 95       	ret

00001fc6 <strnlen_P>:
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	05 90       	lpm	r0, Z+
    1fca:	61 50       	subi	r22, 0x01	; 1
    1fcc:	70 40       	sbci	r23, 0x00	; 0
    1fce:	01 10       	cpse	r0, r1
    1fd0:	d8 f7       	brcc	.-10     	; 0x1fc8 <strnlen_P+0x2>
    1fd2:	80 95       	com	r24
    1fd4:	90 95       	com	r25
    1fd6:	8e 0f       	add	r24, r30
    1fd8:	9f 1f       	adc	r25, r31
    1fda:	08 95       	ret

00001fdc <strnlen>:
    1fdc:	fc 01       	movw	r30, r24
    1fde:	61 50       	subi	r22, 0x01	; 1
    1fe0:	70 40       	sbci	r23, 0x00	; 0
    1fe2:	01 90       	ld	r0, Z+
    1fe4:	01 10       	cpse	r0, r1
    1fe6:	d8 f7       	brcc	.-10     	; 0x1fde <strnlen+0x2>
    1fe8:	80 95       	com	r24
    1fea:	90 95       	com	r25
    1fec:	8e 0f       	add	r24, r30
    1fee:	9f 1f       	adc	r25, r31
    1ff0:	08 95       	ret

00001ff2 <fputc>:
    1ff2:	0f 93       	push	r16
    1ff4:	1f 93       	push	r17
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	fb 01       	movw	r30, r22
    1ffc:	23 81       	ldd	r18, Z+3	; 0x03
    1ffe:	21 fd       	sbrc	r18, 1
    2000:	03 c0       	rjmp	.+6      	; 0x2008 <fputc+0x16>
    2002:	8f ef       	ldi	r24, 0xFF	; 255
    2004:	9f ef       	ldi	r25, 0xFF	; 255
    2006:	2c c0       	rjmp	.+88     	; 0x2060 <fputc+0x6e>
    2008:	22 ff       	sbrs	r18, 2
    200a:	16 c0       	rjmp	.+44     	; 0x2038 <fputc+0x46>
    200c:	46 81       	ldd	r20, Z+6	; 0x06
    200e:	57 81       	ldd	r21, Z+7	; 0x07
    2010:	24 81       	ldd	r18, Z+4	; 0x04
    2012:	35 81       	ldd	r19, Z+5	; 0x05
    2014:	42 17       	cp	r20, r18
    2016:	53 07       	cpc	r21, r19
    2018:	44 f4       	brge	.+16     	; 0x202a <fputc+0x38>
    201a:	a0 81       	ld	r26, Z
    201c:	b1 81       	ldd	r27, Z+1	; 0x01
    201e:	9d 01       	movw	r18, r26
    2020:	2f 5f       	subi	r18, 0xFF	; 255
    2022:	3f 4f       	sbci	r19, 0xFF	; 255
    2024:	31 83       	std	Z+1, r19	; 0x01
    2026:	20 83       	st	Z, r18
    2028:	8c 93       	st	X, r24
    202a:	26 81       	ldd	r18, Z+6	; 0x06
    202c:	37 81       	ldd	r19, Z+7	; 0x07
    202e:	2f 5f       	subi	r18, 0xFF	; 255
    2030:	3f 4f       	sbci	r19, 0xFF	; 255
    2032:	37 83       	std	Z+7, r19	; 0x07
    2034:	26 83       	std	Z+6, r18	; 0x06
    2036:	14 c0       	rjmp	.+40     	; 0x2060 <fputc+0x6e>
    2038:	8b 01       	movw	r16, r22
    203a:	ec 01       	movw	r28, r24
    203c:	fb 01       	movw	r30, r22
    203e:	00 84       	ldd	r0, Z+8	; 0x08
    2040:	f1 85       	ldd	r31, Z+9	; 0x09
    2042:	e0 2d       	mov	r30, r0
    2044:	09 95       	icall
    2046:	89 2b       	or	r24, r25
    2048:	e1 f6       	brne	.-72     	; 0x2002 <fputc+0x10>
    204a:	d8 01       	movw	r26, r16
    204c:	16 96       	adiw	r26, 0x06	; 6
    204e:	8d 91       	ld	r24, X+
    2050:	9c 91       	ld	r25, X
    2052:	17 97       	sbiw	r26, 0x07	; 7
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	17 96       	adiw	r26, 0x07	; 7
    2058:	9c 93       	st	X, r25
    205a:	8e 93       	st	-X, r24
    205c:	16 97       	sbiw	r26, 0x06	; 6
    205e:	ce 01       	movw	r24, r28
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	08 95       	ret

0000206a <vprintf>:
    206a:	ab 01       	movw	r20, r22
    206c:	bc 01       	movw	r22, r24
    206e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__iob+0x2>
    2072:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__iob+0x3>
    2076:	0e 94 2f 0b 	call	0x165e	; 0x165e <vfprintf>
    207a:	08 95       	ret

0000207c <__ultoa_invert>:
    207c:	fa 01       	movw	r30, r20
    207e:	aa 27       	eor	r26, r26
    2080:	28 30       	cpi	r18, 0x08	; 8
    2082:	51 f1       	breq	.+84     	; 0x20d8 <__ultoa_invert+0x5c>
    2084:	20 31       	cpi	r18, 0x10	; 16
    2086:	81 f1       	breq	.+96     	; 0x20e8 <__ultoa_invert+0x6c>
    2088:	e8 94       	clt
    208a:	6f 93       	push	r22
    208c:	6e 7f       	andi	r22, 0xFE	; 254
    208e:	6e 5f       	subi	r22, 0xFE	; 254
    2090:	7f 4f       	sbci	r23, 0xFF	; 255
    2092:	8f 4f       	sbci	r24, 0xFF	; 255
    2094:	9f 4f       	sbci	r25, 0xFF	; 255
    2096:	af 4f       	sbci	r26, 0xFF	; 255
    2098:	b1 e0       	ldi	r27, 0x01	; 1
    209a:	3e d0       	rcall	.+124    	; 0x2118 <__ultoa_invert+0x9c>
    209c:	b4 e0       	ldi	r27, 0x04	; 4
    209e:	3c d0       	rcall	.+120    	; 0x2118 <__ultoa_invert+0x9c>
    20a0:	67 0f       	add	r22, r23
    20a2:	78 1f       	adc	r23, r24
    20a4:	89 1f       	adc	r24, r25
    20a6:	9a 1f       	adc	r25, r26
    20a8:	a1 1d       	adc	r26, r1
    20aa:	68 0f       	add	r22, r24
    20ac:	79 1f       	adc	r23, r25
    20ae:	8a 1f       	adc	r24, r26
    20b0:	91 1d       	adc	r25, r1
    20b2:	a1 1d       	adc	r26, r1
    20b4:	6a 0f       	add	r22, r26
    20b6:	71 1d       	adc	r23, r1
    20b8:	81 1d       	adc	r24, r1
    20ba:	91 1d       	adc	r25, r1
    20bc:	a1 1d       	adc	r26, r1
    20be:	20 d0       	rcall	.+64     	; 0x2100 <__ultoa_invert+0x84>
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <__ultoa_invert+0x48>
    20c2:	68 94       	set
    20c4:	3f 91       	pop	r19
    20c6:	2a e0       	ldi	r18, 0x0A	; 10
    20c8:	26 9f       	mul	r18, r22
    20ca:	11 24       	eor	r1, r1
    20cc:	30 19       	sub	r19, r0
    20ce:	30 5d       	subi	r19, 0xD0	; 208
    20d0:	31 93       	st	Z+, r19
    20d2:	de f6       	brtc	.-74     	; 0x208a <__ultoa_invert+0xe>
    20d4:	cf 01       	movw	r24, r30
    20d6:	08 95       	ret
    20d8:	46 2f       	mov	r20, r22
    20da:	47 70       	andi	r20, 0x07	; 7
    20dc:	40 5d       	subi	r20, 0xD0	; 208
    20de:	41 93       	st	Z+, r20
    20e0:	b3 e0       	ldi	r27, 0x03	; 3
    20e2:	0f d0       	rcall	.+30     	; 0x2102 <__ultoa_invert+0x86>
    20e4:	c9 f7       	brne	.-14     	; 0x20d8 <__ultoa_invert+0x5c>
    20e6:	f6 cf       	rjmp	.-20     	; 0x20d4 <__ultoa_invert+0x58>
    20e8:	46 2f       	mov	r20, r22
    20ea:	4f 70       	andi	r20, 0x0F	; 15
    20ec:	40 5d       	subi	r20, 0xD0	; 208
    20ee:	4a 33       	cpi	r20, 0x3A	; 58
    20f0:	18 f0       	brcs	.+6      	; 0x20f8 <__ultoa_invert+0x7c>
    20f2:	49 5d       	subi	r20, 0xD9	; 217
    20f4:	31 fd       	sbrc	r19, 1
    20f6:	40 52       	subi	r20, 0x20	; 32
    20f8:	41 93       	st	Z+, r20
    20fa:	02 d0       	rcall	.+4      	; 0x2100 <__ultoa_invert+0x84>
    20fc:	a9 f7       	brne	.-22     	; 0x20e8 <__ultoa_invert+0x6c>
    20fe:	ea cf       	rjmp	.-44     	; 0x20d4 <__ultoa_invert+0x58>
    2100:	b4 e0       	ldi	r27, 0x04	; 4
    2102:	a6 95       	lsr	r26
    2104:	97 95       	ror	r25
    2106:	87 95       	ror	r24
    2108:	77 95       	ror	r23
    210a:	67 95       	ror	r22
    210c:	ba 95       	dec	r27
    210e:	c9 f7       	brne	.-14     	; 0x2102 <__ultoa_invert+0x86>
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	61 05       	cpc	r22, r1
    2114:	71 05       	cpc	r23, r1
    2116:	08 95       	ret
    2118:	9b 01       	movw	r18, r22
    211a:	ac 01       	movw	r20, r24
    211c:	0a 2e       	mov	r0, r26
    211e:	06 94       	lsr	r0
    2120:	57 95       	ror	r21
    2122:	47 95       	ror	r20
    2124:	37 95       	ror	r19
    2126:	27 95       	ror	r18
    2128:	ba 95       	dec	r27
    212a:	c9 f7       	brne	.-14     	; 0x211e <__ultoa_invert+0xa2>
    212c:	62 0f       	add	r22, r18
    212e:	73 1f       	adc	r23, r19
    2130:	84 1f       	adc	r24, r20
    2132:	95 1f       	adc	r25, r21
    2134:	a0 1d       	adc	r26, r0
    2136:	08 95       	ret

00002138 <_exit>:
    2138:	f8 94       	cli

0000213a <__stop_program>:
    213a:	ff cf       	rjmp	.-2      	; 0x213a <__stop_program>
