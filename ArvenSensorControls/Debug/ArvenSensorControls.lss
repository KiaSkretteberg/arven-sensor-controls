
ArvenSensorControls.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001862  000018f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001862  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800124  00800124  0000191a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001372  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b2b  00000000  00000000  00002e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000caa  00000000  00000000  000039ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  00004658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097a  00000000  00000000  00004aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000886  00000000  00000000  0000541a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005ca0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
       4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
       c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      14:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__vector_5>
      18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      2c:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__vector_11>
      30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
      68:	9b 00       	.word	0x009b	; ????
      6a:	a5 00       	.word	0x00a5	; ????
      6c:	af 00       	.word	0x00af	; ????
      6e:	b9 00       	.word	0x00b9	; ????
      70:	c3 00       	.word	0x00c3	; ????
      72:	cd 00       	.word	0x00cd	; ????
      74:	d7 00       	.word	0x00d7	; ????
      76:	e1 00       	.word	0x00e1	; ????

00000078 <__ctors_end>:
      78:	11 24       	eor	r1, r1
      7a:	1f be       	out	0x3f, r1	; 63
      7c:	cf ef       	ldi	r28, 0xFF	; 255
      7e:	d8 e0       	ldi	r29, 0x08	; 8
      80:	de bf       	out	0x3e, r29	; 62
      82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	e2 e6       	ldi	r30, 0x62	; 98
      8c:	f8 e1       	ldi	r31, 0x18	; 24
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	a4 32       	cpi	r26, 0x24	; 36
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
      9a:	21 e0       	ldi	r18, 0x01	; 1
      9c:	a4 e2       	ldi	r26, 0x24	; 36
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
      a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
      a4:	ae 32       	cpi	r26, 0x2E	; 46
      a6:	b2 07       	cpc	r27, r18
      a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
      aa:	0e 94 79 06 	call	0xcf2	; 0xcf2 <main>
      ae:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <_exit>

000000b2 <__bad_interrupt>:
      b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <AtoD_Init>:
#include <avr/io.h>
#include <stdio.h>
#include "atd.h"

void AtoD_Init (AtoD_Channel chan)
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	1f 92       	push	r1
      bc:	cd b7       	in	r28, 0x3d	; 61
      be:	de b7       	in	r29, 0x3e	; 62
      c0:	89 83       	std	Y+1, r24	; 0x01
  PRR &= ~(1 << PRADC); // turn on A/D module in power reduction register
      c2:	84 e6       	ldi	r24, 0x64	; 100
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	24 e6       	ldi	r18, 0x64	; 100
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	f9 01       	movw	r30, r18
      cc:	20 81       	ld	r18, Z
      ce:	2e 7f       	andi	r18, 0xFE	; 254
      d0:	fc 01       	movw	r30, r24
      d2:	20 83       	st	Z, r18
  
  ADMUX = 0b00000000;   // Internal Vref off, right-aligned, ADC0 (28.9.1)  
      d4:	8c e7       	ldi	r24, 0x7C	; 124
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	fc 01       	movw	r30, r24
      da:	10 82       	st	Z, r1
  ADCSRB = 0b00000000;  // default, no comparator, free running mode    
      dc:	8b e7       	ldi	r24, 0x7B	; 123
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	fc 01       	movw	r30, r24
      e2:	10 82       	st	Z, r1
  
  // use support function to set channel
  AtoD_SetChannel(chan);
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	0e 94 7f 00 	call	0xfe	; 0xfe <AtoD_SetChannel>
  
  ADCSRA = 0b11100111;  // turn on AD, prescale 128, ADATE needs to be on? (28.9.2)
      ea:	8a e7       	ldi	r24, 0x7A	; 122
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	27 ee       	ldi	r18, 0xE7	; 231
      f0:	fc 01       	movw	r30, r24
      f2:	20 83       	st	Z, r18
}
      f4:	00 00       	nop
      f6:	0f 90       	pop	r0
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <AtoD_SetChannel>:

void AtoD_SetChannel (AtoD_Channel chan)
{
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
     102:	1f 92       	push	r1
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
     108:	89 83       	std	Y+1, r24	; 0x01
  switch (chan) 
     10a:	89 81       	ldd	r24, Y+1	; 0x01
     10c:	88 2f       	mov	r24, r24
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	09 2e       	mov	r0, r25
     112:	00 0c       	add	r0, r0
     114:	aa 0b       	sbc	r26, r26
     116:	bb 0b       	sbc	r27, r27
     118:	40 e0       	ldi	r20, 0x00	; 0
     11a:	50 e0       	ldi	r21, 0x00	; 0
     11c:	27 e0       	ldi	r18, 0x07	; 7
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	84 1b       	sub	r24, r20
     122:	95 0b       	sbc	r25, r21
     124:	28 17       	cp	r18, r24
     126:	39 07       	cpc	r19, r25
     128:	08 f4       	brcc	.+2      	; 0x12c <AtoD_SetChannel+0x2e>
     12a:	55 c0       	rjmp	.+170    	; 0x1d6 <AtoD_SetChannel+0xd8>
     12c:	8c 5c       	subi	r24, 0xCC	; 204
     12e:	9f 4f       	sbci	r25, 0xFF	; 255
     130:	fc 01       	movw	r30, r24
     132:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__tablejump2__>
  {
    case AtoD_Channel_0:
      DIDR0 |= 0b00000001;  // kill digital input for channel 0
     136:	8e e7       	ldi	r24, 0x7E	; 126
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	2e e7       	ldi	r18, 0x7E	; 126
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	f9 01       	movw	r30, r18
     140:	20 81       	ld	r18, Z
     142:	21 60       	ori	r18, 0x01	; 1
     144:	fc 01       	movw	r30, r24
     146:	20 83       	st	Z, r18
      break;
     148:	4a c0       	rjmp	.+148    	; 0x1de <AtoD_SetChannel+0xe0>
    case AtoD_Channel_1:
      DIDR0 |= 0b00000010;  // kill digital input for channel 0
     14a:	8e e7       	ldi	r24, 0x7E	; 126
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	2e e7       	ldi	r18, 0x7E	; 126
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	f9 01       	movw	r30, r18
     154:	20 81       	ld	r18, Z
     156:	22 60       	ori	r18, 0x02	; 2
     158:	fc 01       	movw	r30, r24
     15a:	20 83       	st	Z, r18
      break;
     15c:	40 c0       	rjmp	.+128    	; 0x1de <AtoD_SetChannel+0xe0>
    case AtoD_Channel_2:
      DIDR0 |= 0b00000100;  // kill digital input for channel 0
     15e:	8e e7       	ldi	r24, 0x7E	; 126
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	2e e7       	ldi	r18, 0x7E	; 126
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	f9 01       	movw	r30, r18
     168:	20 81       	ld	r18, Z
     16a:	24 60       	ori	r18, 0x04	; 4
     16c:	fc 01       	movw	r30, r24
     16e:	20 83       	st	Z, r18
      break;
     170:	36 c0       	rjmp	.+108    	; 0x1de <AtoD_SetChannel+0xe0>
    case AtoD_Channel_3:
      DIDR0 |= 0b00001000;  // kill digital input for channel 0
     172:	8e e7       	ldi	r24, 0x7E	; 126
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	2e e7       	ldi	r18, 0x7E	; 126
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	f9 01       	movw	r30, r18
     17c:	20 81       	ld	r18, Z
     17e:	28 60       	ori	r18, 0x08	; 8
     180:	fc 01       	movw	r30, r24
     182:	20 83       	st	Z, r18
      break;
     184:	2c c0       	rjmp	.+88     	; 0x1de <AtoD_SetChannel+0xe0>
    case AtoD_Channel_4:
      DIDR0 |= 0b00010000;  // kill digital input for channel 0
     186:	8e e7       	ldi	r24, 0x7E	; 126
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	2e e7       	ldi	r18, 0x7E	; 126
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	f9 01       	movw	r30, r18
     190:	20 81       	ld	r18, Z
     192:	20 61       	ori	r18, 0x10	; 16
     194:	fc 01       	movw	r30, r24
     196:	20 83       	st	Z, r18
      break;
     198:	22 c0       	rjmp	.+68     	; 0x1de <AtoD_SetChannel+0xe0>
    case AtoD_Channel_5:
      DIDR0 |= 0b00100000;  // kill digital input for channel 0
     19a:	8e e7       	ldi	r24, 0x7E	; 126
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	2e e7       	ldi	r18, 0x7E	; 126
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	f9 01       	movw	r30, r18
     1a4:	20 81       	ld	r18, Z
     1a6:	20 62       	ori	r18, 0x20	; 32
     1a8:	fc 01       	movw	r30, r24
     1aa:	20 83       	st	Z, r18
      break;
     1ac:	18 c0       	rjmp	.+48     	; 0x1de <AtoD_SetChannel+0xe0>
    case AtoD_Channel_6:
      DIDR0 |= 0b01000000;  // kill digital input for channel 0
     1ae:	8e e7       	ldi	r24, 0x7E	; 126
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	2e e7       	ldi	r18, 0x7E	; 126
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	f9 01       	movw	r30, r18
     1b8:	20 81       	ld	r18, Z
     1ba:	20 64       	ori	r18, 0x40	; 64
     1bc:	fc 01       	movw	r30, r24
     1be:	20 83       	st	Z, r18
      break;
     1c0:	0e c0       	rjmp	.+28     	; 0x1de <AtoD_SetChannel+0xe0>
    case AtoD_Channel_7:
      DIDR0 |= 0b10000000;  // kill digital input for channel 0
     1c2:	8e e7       	ldi	r24, 0x7E	; 126
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	2e e7       	ldi	r18, 0x7E	; 126
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	f9 01       	movw	r30, r18
     1cc:	20 81       	ld	r18, Z
     1ce:	20 68       	ori	r18, 0x80	; 128
     1d0:	fc 01       	movw	r30, r24
     1d2:	20 83       	st	Z, r18
      break;
     1d4:	04 c0       	rjmp	.+8      	; 0x1de <AtoD_SetChannel+0xe0>
    default:               // other cases don't require digital inputs 
      DIDR0 = 0b00000000;  // all A/D channels as digital inputs
     1d6:	8e e7       	ldi	r24, 0x7E	; 126
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	fc 01       	movw	r30, r24
     1dc:	10 82       	st	Z, r1
  }      
  
  // channel selection
  ADMUX &= 0b11110000;  // clear channel selection
     1de:	8c e7       	ldi	r24, 0x7C	; 124
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	2c e7       	ldi	r18, 0x7C	; 124
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	f9 01       	movw	r30, r18
     1e8:	20 81       	ld	r18, Z
     1ea:	20 7f       	andi	r18, 0xF0	; 240
     1ec:	fc 01       	movw	r30, r24
     1ee:	20 83       	st	Z, r18
  ADMUX |= chan;        // set back channel selection bits
     1f0:	8c e7       	ldi	r24, 0x7C	; 124
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	2c e7       	ldi	r18, 0x7C	; 124
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	f9 01       	movw	r30, r18
     1fa:	30 81       	ld	r19, Z
     1fc:	29 81       	ldd	r18, Y+1	; 0x01
     1fe:	23 2b       	or	r18, r19
     200:	fc 01       	movw	r30, r24
     202:	20 83       	st	Z, r18
     204:	00 00       	nop
     206:	0f 90       	pop	r0
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <SCI0_Init>:
  (void)sprintf(buff, "0x%4.4X", uiVal);
  SCI0_TxString (buff);

  if (tl)
    SCI0_TxString ("\r\n");
}
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	2c 97       	sbiw	r28, 0x0c	; 12
     21c:	0f b6       	in	r0, 0x3f	; 63
     21e:	f8 94       	cli
     220:	de bf       	out	0x3e, r29	; 62
     222:	0f be       	out	0x3f, r0	; 63
     224:	cd bf       	out	0x3d, r28	; 61
     226:	6b 83       	std	Y+3, r22	; 0x03
     228:	7c 83       	std	Y+4, r23	; 0x04
     22a:	8d 83       	std	Y+5, r24	; 0x05
     22c:	9e 83       	std	Y+6, r25	; 0x06
     22e:	2f 83       	std	Y+7, r18	; 0x07
     230:	38 87       	std	Y+8, r19	; 0x08
     232:	49 87       	std	Y+9, r20	; 0x09
     234:	5a 87       	std	Y+10, r21	; 0x0a
     236:	1c 87       	std	Y+12, r17	; 0x0c
     238:	0b 87       	std	Y+11, r16	; 0x0b
     23a:	8b 81       	ldd	r24, Y+3	; 0x03
     23c:	9c 81       	ldd	r25, Y+4	; 0x04
     23e:	ad 81       	ldd	r26, Y+5	; 0x05
     240:	be 81       	ldd	r27, Y+6	; 0x06
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	aa 1f       	adc	r26, r26
     248:	bb 1f       	adc	r27, r27
     24a:	9c 01       	movw	r18, r24
     24c:	ad 01       	movw	r20, r26
     24e:	22 0f       	add	r18, r18
     250:	33 1f       	adc	r19, r19
     252:	44 1f       	adc	r20, r20
     254:	55 1f       	adc	r21, r21
     256:	22 0f       	add	r18, r18
     258:	33 1f       	adc	r19, r19
     25a:	44 1f       	adc	r20, r20
     25c:	55 1f       	adc	r21, r21
     25e:	82 0f       	add	r24, r18
     260:	93 1f       	adc	r25, r19
     262:	a4 1f       	adc	r26, r20
     264:	b5 1f       	adc	r27, r21
     266:	68 94       	set
     268:	13 f8       	bld	r1, 3
     26a:	b6 95       	lsr	r27
     26c:	a7 95       	ror	r26
     26e:	97 95       	ror	r25
     270:	87 95       	ror	r24
     272:	16 94       	lsr	r1
     274:	d1 f7       	brne	.-12     	; 0x26a <SCI0_Init+0x5c>
     276:	2f 81       	ldd	r18, Y+7	; 0x07
     278:	38 85       	ldd	r19, Y+8	; 0x08
     27a:	49 85       	ldd	r20, Y+9	; 0x09
     27c:	5a 85       	ldd	r21, Y+10	; 0x0a
     27e:	bc 01       	movw	r22, r24
     280:	cd 01       	movw	r24, r26
     282:	0e 94 1d 09 	call	0x123a	; 0x123a <__udivmodsi4>
     286:	da 01       	movw	r26, r20
     288:	c9 01       	movw	r24, r18
     28a:	05 96       	adiw	r24, 0x05	; 5
     28c:	a1 1d       	adc	r26, r1
     28e:	b1 1d       	adc	r27, r1
     290:	2a e0       	ldi	r18, 0x0A	; 10
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	bc 01       	movw	r22, r24
     29a:	cd 01       	movw	r24, r26
     29c:	0e 94 1d 09 	call	0x123a	; 0x123a <__udivmodsi4>
     2a0:	da 01       	movw	r26, r20
     2a2:	c9 01       	movw	r24, r18
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	9a 83       	std	Y+2, r25	; 0x02
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	9a 81       	ldd	r25, Y+2	; 0x02
     2ae:	81 15       	cp	r24, r1
     2b0:	90 41       	sbci	r25, 0x10	; 16
     2b2:	18 f0       	brcs	.+6      	; 0x2ba <SCI0_Init+0xac>
     2b4:	8f ef       	ldi	r24, 0xFF	; 255
     2b6:	9f ef       	ldi	r25, 0xFF	; 255
     2b8:	2f c0       	rjmp	.+94     	; 0x318 <SCI0_Init+0x10a>
     2ba:	84 e6       	ldi	r24, 0x64	; 100
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	24 e6       	ldi	r18, 0x64	; 100
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	f9 01       	movw	r30, r18
     2c4:	20 81       	ld	r18, Z
     2c6:	2d 7f       	andi	r18, 0xFD	; 253
     2c8:	fc 01       	movw	r30, r24
     2ca:	20 83       	st	Z, r18
     2cc:	85 ec       	ldi	r24, 0xC5	; 197
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	29 81       	ldd	r18, Y+1	; 0x01
     2d2:	3a 81       	ldd	r19, Y+2	; 0x02
     2d4:	23 2f       	mov	r18, r19
     2d6:	33 27       	eor	r19, r19
     2d8:	fc 01       	movw	r30, r24
     2da:	20 83       	st	Z, r18
     2dc:	84 ec       	ldi	r24, 0xC4	; 196
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	29 81       	ldd	r18, Y+1	; 0x01
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 83       	st	Z, r18
     2e6:	81 ec       	ldi	r24, 0xC1	; 193
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	28 e1       	ldi	r18, 0x18	; 24
     2ec:	fc 01       	movw	r30, r24
     2ee:	20 83       	st	Z, r18
     2f0:	82 ec       	ldi	r24, 0xC2	; 194
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	26 e0       	ldi	r18, 0x06	; 6
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
     2fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     2fc:	9c 85       	ldd	r25, Y+12	; 0x0c
     2fe:	89 2b       	or	r24, r25
     300:	49 f0       	breq	.+18     	; 0x314 <SCI0_Init+0x106>
     302:	81 ec       	ldi	r24, 0xC1	; 193
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	21 ec       	ldi	r18, 0xC1	; 193
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	f9 01       	movw	r30, r18
     30c:	20 81       	ld	r18, Z
     30e:	20 68       	ori	r18, 0x80	; 128
     310:	fc 01       	movw	r30, r24
     312:	20 83       	st	Z, r18
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	2c 96       	adiw	r28, 0x0c	; 12
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	de bf       	out	0x3e, r29	; 62
     320:	0f be       	out	0x3f, r0	; 63
     322:	cd bf       	out	0x3d, r28	; 61
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
     32c:	08 95       	ret

0000032e <SCI0_BSend>:
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	1f 92       	push	r1
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	89 83       	std	Y+1, r24	; 0x01
     33a:	00 00       	nop
     33c:	80 ec       	ldi	r24, 0xC0	; 192
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	fc 01       	movw	r30, r24
     342:	80 81       	ld	r24, Z
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	80 72       	andi	r24, 0x20	; 32
     34a:	99 27       	eor	r25, r25
     34c:	89 2b       	or	r24, r25
     34e:	b1 f3       	breq	.-20     	; 0x33c <SCI0_BSend+0xe>
     350:	80 ec       	ldi	r24, 0xC0	; 192
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	fc 01       	movw	r30, r24
     356:	80 81       	ld	r24, Z
     358:	88 2f       	mov	r24, r24
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	80 74       	andi	r24, 0x40	; 64
     35e:	99 27       	eor	r25, r25
     360:	89 2b       	or	r24, r25
     362:	29 f0       	breq	.+10     	; 0x36e <SCI0_BSend+0x40>
     364:	80 ec       	ldi	r24, 0xC0	; 192
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	20 e4       	ldi	r18, 0x40	; 64
     36a:	fc 01       	movw	r30, r24
     36c:	20 83       	st	Z, r18
     36e:	86 ec       	ldi	r24, 0xC6	; 198
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	29 81       	ldd	r18, Y+1	; 0x01
     374:	fc 01       	movw	r30, r24
     376:	20 83       	st	Z, r18
     378:	00 00       	nop
     37a:	0f 90       	pop	r0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <SCI0_TxString>:

void SCI0_TxString (char * buff)
{
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	00 d0       	rcall	.+0      	; 0x388 <SCI0_TxString+0x6>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	9a 83       	std	Y+2, r25	; 0x02
     38e:	89 83       	std	Y+1, r24	; 0x01
  while (*buff)
     390:	0b c0       	rjmp	.+22     	; 0x3a8 <SCI0_TxString+0x26>
  {
    SCI0_BSend(*buff);
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	9a 81       	ldd	r25, Y+2	; 0x02
     396:	fc 01       	movw	r30, r24
     398:	80 81       	ld	r24, Z
     39a:	0e 94 97 01 	call	0x32e	; 0x32e <SCI0_BSend>
    ++buff;
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	9a 81       	ldd	r25, Y+2	; 0x02
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	9a 83       	std	Y+2, r25	; 0x02
     3a6:	89 83       	std	Y+1, r24	; 0x01
    SCI0_TxString ("\r\n");
}

void SCI0_TxString (char * buff)
{
  while (*buff)
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	9a 81       	ldd	r25, Y+2	; 0x02
     3ac:	fc 01       	movw	r30, r24
     3ae:	80 81       	ld	r24, Z
     3b0:	88 23       	and	r24, r24
     3b2:	79 f7       	brne	.-34     	; 0x392 <SCI0_TxString+0x10>
  {
    SCI0_BSend(*buff);
    ++buff;
  }
}
     3b4:	00 00       	nop
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <Timer_Init>:

#include <avr/io.h>
#include "timer.h"

void Timer_Init (Timer_Prescale pre, unsigned int uiInitialOffset)
{
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <Timer_Init+0x6>
     3c6:	1f 92       	push	r1
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	89 83       	std	Y+1, r24	; 0x01
     3ce:	7b 83       	std	Y+3, r23	; 0x03
     3d0:	6a 83       	std	Y+2, r22	; 0x02
	// start code will power off all modules...
	// ensure power is on : Timer 1
	// PRR on 328P, PRR0 on 328PB
	PRR &= ~(1 << PRTIM1);
     3d2:	84 e6       	ldi	r24, 0x64	; 100
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	24 e6       	ldi	r18, 0x64	; 100
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	f9 01       	movw	r30, r18
     3dc:	20 81       	ld	r18, Z
     3de:	27 7f       	andi	r18, 0xF7	; 247
     3e0:	fc 01       	movw	r30, r24
     3e2:	20 83       	st	Z, r18

	// set prescale to requested rate
	TCCR1B = 0;		// noise canceler disabled, waveform generator normal
     3e4:	81 e8       	ldi	r24, 0x81	; 129
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	fc 01       	movw	r30, r24
     3ea:	10 82       	st	Z, r1
	TCCR1B |= pre;	// put back requested prescale bits
     3ec:	81 e8       	ldi	r24, 0x81	; 129
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	21 e8       	ldi	r18, 0x81	; 129
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	f9 01       	movw	r30, r18
     3f6:	30 81       	ld	r19, Z
     3f8:	29 81       	ldd	r18, Y+1	; 0x01
     3fa:	23 2b       	or	r18, r19
     3fc:	fc 01       	movw	r30, r24
     3fe:	20 83       	st	Z, r18
	
	// setup initial event for output compare 1 A
	OCR1A = TCNT1 + uiInitialOffset;
     400:	88 e8       	ldi	r24, 0x88	; 136
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	24 e8       	ldi	r18, 0x84	; 132
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	f9 01       	movw	r30, r18
     40a:	40 81       	ld	r20, Z
     40c:	51 81       	ldd	r21, Z+1	; 0x01
     40e:	2a 81       	ldd	r18, Y+2	; 0x02
     410:	3b 81       	ldd	r19, Y+3	; 0x03
     412:	24 0f       	add	r18, r20
     414:	35 1f       	adc	r19, r21
     416:	fc 01       	movw	r30, r24
     418:	31 83       	std	Z+1, r19	; 0x01
     41a:	20 83       	st	Z, r18

	// setup interrupt for output compare
	// timer/counter 1, output compare A match interrupt enable
	TIMSK1 = 0b00000010;
     41c:	8f e6       	ldi	r24, 0x6F	; 111
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	22 e0       	ldi	r18, 0x02	; 2
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
}
     426:	00 00       	nop
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <GD03_Init>:
/************************************************************************/
/* Header Implementation                                                */
/************************************************************************/

void GD03_Init(void)
{
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
	AtoD_Init(AtoD_Channel_0); // pin 23
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 5b 00 	call	0xb6	; 0xb6 <AtoD_Init>
}
     442:	00 00       	nop
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <HCSR04_InitDevice>:
	 HCSR04_InitDevice(HCSR04_C);
	 HCSR04_InitDevice(HCSR04_R);
 }

 void HCSR04_InitDevice(HCSR04_Device device)
 {
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	1f 92       	push	r1
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	89 83       	std	Y+1, r24	; 0x01
	 switch(device)
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	88 2f       	mov	r24, r24
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	91 05       	cpc	r25, r1
     460:	61 f1       	breq	.+88     	; 0x4ba <HCSR04_InitDevice+0x70>
     462:	82 30       	cpi	r24, 0x02	; 2
     464:	91 05       	cpc	r25, r1
     466:	09 f4       	brne	.+2      	; 0x46a <HCSR04_InitDevice+0x20>
     468:	4c c0       	rjmp	.+152    	; 0x502 <HCSR04_InitDevice+0xb8>
     46a:	89 2b       	or	r24, r25
     46c:	09 f0       	breq	.+2      	; 0x470 <HCSR04_InitDevice+0x26>
			DDRD &= ~(0b01000000) //6 is input
			DDRB |= 0b0000010; // 1 is output
			DDRB &= ~(0b01000101) //0 and 2 are input
			break;*/
	 }
 }
     46e:	6e c0       	rjmp	.+220    	; 0x54c <HCSR04_InitDevice+0x102>
 void HCSR04_InitDevice(HCSR04_Device device)
 {
	 switch(device)
	 {
		case HCSR04_L:
			DDRD |= 0b00100000; //output
     470:	8a e2       	ldi	r24, 0x2A	; 42
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	2a e2       	ldi	r18, 0x2A	; 42
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	f9 01       	movw	r30, r18
     47a:	20 81       	ld	r18, Z
     47c:	20 62       	ori	r18, 0x20	; 32
     47e:	fc 01       	movw	r30, r24
     480:	20 83       	st	Z, r18
			DDRD &= ~(0b01000000); //input
     482:	8a e2       	ldi	r24, 0x2A	; 42
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	2a e2       	ldi	r18, 0x2A	; 42
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	f9 01       	movw	r30, r18
     48c:	20 81       	ld	r18, Z
     48e:	2f 7b       	andi	r18, 0xBF	; 191
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
			
			PCMSK2 |= 0b01000000; // turn on PCINT22 pin mask (enable interrupts) (12.2.6)
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	2d e6       	ldi	r18, 0x6D	; 109
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	f9 01       	movw	r30, r18
     49e:	20 81       	ld	r18, Z
     4a0:	20 64       	ori	r18, 0x40	; 64
     4a2:	fc 01       	movw	r30, r24
     4a4:	20 83       	st	Z, r18
			PCICR |= 0b00000100; // turn on interrupts for group 2 (12.2.4)
     4a6:	88 e6       	ldi	r24, 0x68	; 104
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	28 e6       	ldi	r18, 0x68	; 104
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	f9 01       	movw	r30, r18
     4b0:	20 81       	ld	r18, Z
     4b2:	24 60       	ori	r18, 0x04	; 4
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
			break;
     4b8:	49 c0       	rjmp	.+146    	; 0x54c <HCSR04_InitDevice+0x102>
		case HCSR04_C:
			DDRD |= DDD7; //output
     4ba:	8a e2       	ldi	r24, 0x2A	; 42
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	2a e2       	ldi	r18, 0x2A	; 42
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	f9 01       	movw	r30, r18
     4c4:	20 81       	ld	r18, Z
     4c6:	27 60       	ori	r18, 0x07	; 7
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18
			DDRB &= ~DDB0; //input
     4cc:	84 e2       	ldi	r24, 0x24	; 36
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	24 e2       	ldi	r18, 0x24	; 36
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	f9 01       	movw	r30, r18
     4d6:	20 81       	ld	r18, Z
     4d8:	fc 01       	movw	r30, r24
     4da:	20 83       	st	Z, r18
			PCMSK0 |= 0b00000001; // turn on PCINT0 pin mask (enable interrupts) (12.2.8)
     4dc:	8b e6       	ldi	r24, 0x6B	; 107
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	2b e6       	ldi	r18, 0x6B	; 107
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	f9 01       	movw	r30, r18
     4e6:	20 81       	ld	r18, Z
     4e8:	21 60       	ori	r18, 0x01	; 1
     4ea:	fc 01       	movw	r30, r24
     4ec:	20 83       	st	Z, r18
			PCICR |= 0b00000001; // turn on interrupts for group 0 (12.2.4)
     4ee:	88 e6       	ldi	r24, 0x68	; 104
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	28 e6       	ldi	r18, 0x68	; 104
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	f9 01       	movw	r30, r18
     4f8:	20 81       	ld	r18, Z
     4fa:	21 60       	ori	r18, 0x01	; 1
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18
			break;
     500:	25 c0       	rjmp	.+74     	; 0x54c <HCSR04_InitDevice+0x102>
		case HCSR04_R:
			DDRB |= DDB1; //output
     502:	84 e2       	ldi	r24, 0x24	; 36
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	24 e2       	ldi	r18, 0x24	; 36
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	f9 01       	movw	r30, r18
     50c:	20 81       	ld	r18, Z
     50e:	21 60       	ori	r18, 0x01	; 1
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
			DDRB &= ~DDB2; //input
     514:	84 e2       	ldi	r24, 0x24	; 36
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	24 e2       	ldi	r18, 0x24	; 36
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	f9 01       	movw	r30, r18
     51e:	20 81       	ld	r18, Z
     520:	2d 7f       	andi	r18, 0xFD	; 253
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
			PCMSK0 |= 0b00000100; // turn on PCINT2 pin mask (enable interrupts) (12.2.8)
     526:	8b e6       	ldi	r24, 0x6B	; 107
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	2b e6       	ldi	r18, 0x6B	; 107
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	f9 01       	movw	r30, r18
     530:	20 81       	ld	r18, Z
     532:	24 60       	ori	r18, 0x04	; 4
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
			PCICR |= 0b00000001; // turn on interrupts for group 0 (12.2.4)
     538:	88 e6       	ldi	r24, 0x68	; 104
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	28 e6       	ldi	r18, 0x68	; 104
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	f9 01       	movw	r30, r18
     542:	20 81       	ld	r18, Z
     544:	21 60       	ori	r18, 0x01	; 1
     546:	fc 01       	movw	r30, r24
     548:	20 83       	st	Z, r18
			break; 
     54a:	00 00       	nop
			DDRD &= ~(0b01000000) //6 is input
			DDRB |= 0b0000010; // 1 is output
			DDRB &= ~(0b01000101) //0 and 2 are input
			break;*/
	 }
 }
     54c:	00 00       	nop
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <HCSR04_CheckForObstacle>:
 
int HCSR04_CheckForObstacle(HCSR04_Device device, float distance)
{
     556:	1f 93       	push	r17
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	29 97       	sbiw	r28, 0x09	; 9
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	de bf       	out	0x3e, r29	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	8d 83       	std	Y+5, r24	; 0x05
     56e:	4e 83       	std	Y+6, r20	; 0x06
     570:	5f 83       	std	Y+7, r21	; 0x07
     572:	68 87       	std	Y+8, r22	; 0x08
     574:	79 87       	std	Y+9, r23	; 0x09
	float dDistance = HCSR04_GetEchoDistance(device);
     576:	8d 81       	ldd	r24, Y+5	; 0x05
     578:	0e 94 de 02 	call	0x5bc	; 0x5bc <HCSR04_GetEchoDistance>
     57c:	dc 01       	movw	r26, r24
     57e:	cb 01       	movw	r24, r22
     580:	89 83       	std	Y+1, r24	; 0x01
     582:	9a 83       	std	Y+2, r25	; 0x02
     584:	ab 83       	std	Y+3, r26	; 0x03
     586:	bc 83       	std	Y+4, r27	; 0x04
	 
	return dDistance < distance ? 1 : 0;
     588:	11 e0       	ldi	r17, 0x01	; 1
     58a:	2e 81       	ldd	r18, Y+6	; 0x06
     58c:	3f 81       	ldd	r19, Y+7	; 0x07
     58e:	48 85       	ldd	r20, Y+8	; 0x08
     590:	59 85       	ldd	r21, Y+9	; 0x09
     592:	69 81       	ldd	r22, Y+1	; 0x01
     594:	7a 81       	ldd	r23, Y+2	; 0x02
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	9c 81       	ldd	r25, Y+4	; 0x04
     59a:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     59e:	88 23       	and	r24, r24
     5a0:	0c f0       	brlt	.+2      	; 0x5a4 <HCSR04_CheckForObstacle+0x4e>
     5a2:	10 e0       	ldi	r17, 0x00	; 0
     5a4:	81 2f       	mov	r24, r17
     5a6:	90 e0       	ldi	r25, 0x00	; 0
}
     5a8:	29 96       	adiw	r28, 0x09	; 9
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	1f 91       	pop	r17
     5ba:	08 95       	ret

000005bc <HCSR04_GetEchoDistance>:


 float HCSR04_GetEchoDistance(HCSR04_Device device)
 {char buff[20];
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
     5c4:	6d 97       	sbiw	r28, 0x1d	; 29
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	8d 8f       	std	Y+29, r24	; 0x1d
	 long duration = 0;
     5d2:	1d 82       	std	Y+5, r1	; 0x05
     5d4:	1e 82       	std	Y+6, r1	; 0x06
     5d6:	1f 82       	std	Y+7, r1	; 0x07
     5d8:	18 86       	std	Y+8, r1	; 0x08
	 float distance = 0.0;
     5da:	19 82       	std	Y+1, r1	; 0x01
     5dc:	1a 82       	std	Y+2, r1	; 0x02
     5de:	1b 82       	std	Y+3, r1	; 0x03
     5e0:	1c 82       	std	Y+4, r1	; 0x04
	 
	 echoTimeStart = 0;
     5e2:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <echoTimeStart>
     5e6:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <echoTimeStart+0x1>
     5ea:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <echoTimeStart+0x2>
     5ee:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <echoTimeStart+0x3>
	 echoTimeEnd = 0;
     5f2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <echoTimeEnd>
     5f6:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <echoTimeEnd+0x1>
     5fa:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <echoTimeEnd+0x2>
     5fe:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <echoTimeEnd+0x3>
	 
	 switch(device)
     602:	8d 8d       	ldd	r24, Y+29	; 0x1d
     604:	88 2f       	mov	r24, r24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	81 30       	cpi	r24, 0x01	; 1
     60a:	91 05       	cpc	r25, r1
     60c:	09 f4       	brne	.+2      	; 0x610 <HCSR04_GetEchoDistance+0x54>
     60e:	46 c0       	rjmp	.+140    	; 0x69c <HCSR04_GetEchoDistance+0xe0>
     610:	82 30       	cpi	r24, 0x02	; 2
     612:	91 05       	cpc	r25, r1
     614:	09 f4       	brne	.+2      	; 0x618 <HCSR04_GetEchoDistance+0x5c>
     616:	5f c0       	rjmp	.+190    	; 0x6d6 <HCSR04_GetEchoDistance+0x11a>
     618:	89 2b       	or	r24, r25
     61a:	09 f0       	breq	.+2      	; 0x61e <HCSR04_GetEchoDistance+0x62>
     61c:	79 c0       	rjmp	.+242    	; 0x710 <HCSR04_GetEchoDistance+0x154>
	 {
		case HCSR04_L:
			trigger(HCSR04_L_Trig);
     61e:	85 e0       	ldi	r24, 0x05	; 5
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 cf 03 	call	0x79e	; 0x79e <trigger>
			duration = waitForEcho(HCSR04_L_Echo);
     626:	86 e0       	ldi	r24, 0x06	; 6
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <waitForEcho>
     62e:	dc 01       	movw	r26, r24
     630:	cb 01       	movw	r24, r22
     632:	8d 83       	std	Y+5, r24	; 0x05
     634:	9e 83       	std	Y+6, r25	; 0x06
     636:	af 83       	std	Y+7, r26	; 0x07
     638:	b8 87       	std	Y+8, r27	; 0x08
			distance = calculateDistance(duration);
     63a:	8d 81       	ldd	r24, Y+5	; 0x05
     63c:	9e 81       	ldd	r25, Y+6	; 0x06
     63e:	af 81       	ldd	r26, Y+7	; 0x07
     640:	b8 85       	ldd	r27, Y+8	; 0x08
     642:	bc 01       	movw	r22, r24
     644:	cd 01       	movw	r24, r26
     646:	0e 94 3c 06 	call	0xc78	; 0xc78 <calculateDistance>
     64a:	dc 01       	movw	r26, r24
     64c:	cb 01       	movw	r24, r22
     64e:	89 83       	std	Y+1, r24	; 0x01
     650:	9a 83       	std	Y+2, r25	; 0x02
     652:	ab 83       	std	Y+3, r26	; 0x03
     654:	bc 83       	std	Y+4, r27	; 0x04
			sprintf(buff, "%f", distance);
     656:	8c 81       	ldd	r24, Y+4	; 0x04
     658:	8f 93       	push	r24
     65a:	8b 81       	ldd	r24, Y+3	; 0x03
     65c:	8f 93       	push	r24
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	8f 93       	push	r24
     662:	89 81       	ldd	r24, Y+1	; 0x01
     664:	8f 93       	push	r24
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	89 2f       	mov	r24, r25
     66c:	8f 93       	push	r24
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	8f 93       	push	r24
     674:	ce 01       	movw	r24, r28
     676:	09 96       	adiw	r24, 0x09	; 9
     678:	29 2f       	mov	r18, r25
     67a:	2f 93       	push	r18
     67c:	8f 93       	push	r24
     67e:	0e 94 45 09 	call	0x128a	; 0x128a <sprintf>
     682:	8d b7       	in	r24, 0x3d	; 61
     684:	9e b7       	in	r25, 0x3e	; 62
     686:	08 96       	adiw	r24, 0x08	; 8
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
			SCI0_TxString(buff);
     692:	ce 01       	movw	r24, r28
     694:	09 96       	adiw	r24, 0x09	; 9
     696:	0e 94 c1 01 	call	0x382	; 0x382 <SCI0_TxString>
			break;
     69a:	3a c0       	rjmp	.+116    	; 0x710 <HCSR04_GetEchoDistance+0x154>
		case HCSR04_C:
			trigger(HCSR04_C_Trig);
     69c:	87 e0       	ldi	r24, 0x07	; 7
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 cf 03 	call	0x79e	; 0x79e <trigger>
			duration = waitForEcho(HCSR04_C_Echo);
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <waitForEcho>
     6ac:	dc 01       	movw	r26, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	8d 83       	std	Y+5, r24	; 0x05
     6b2:	9e 83       	std	Y+6, r25	; 0x06
     6b4:	af 83       	std	Y+7, r26	; 0x07
     6b6:	b8 87       	std	Y+8, r27	; 0x08
			distance = calculateDistance(duration);
     6b8:	8d 81       	ldd	r24, Y+5	; 0x05
     6ba:	9e 81       	ldd	r25, Y+6	; 0x06
     6bc:	af 81       	ldd	r26, Y+7	; 0x07
     6be:	b8 85       	ldd	r27, Y+8	; 0x08
     6c0:	bc 01       	movw	r22, r24
     6c2:	cd 01       	movw	r24, r26
     6c4:	0e 94 3c 06 	call	0xc78	; 0xc78 <calculateDistance>
     6c8:	dc 01       	movw	r26, r24
     6ca:	cb 01       	movw	r24, r22
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	9a 83       	std	Y+2, r25	; 0x02
     6d0:	ab 83       	std	Y+3, r26	; 0x03
     6d2:	bc 83       	std	Y+4, r27	; 0x04
			break;
     6d4:	1d c0       	rjmp	.+58     	; 0x710 <HCSR04_GetEchoDistance+0x154>
		case HCSR04_R:
			trigger(HCSR04_R_Trig);
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 cf 03 	call	0x79e	; 0x79e <trigger>
			duration = waitForEcho(HCSR04_R_Echo);
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <waitForEcho>
     6e6:	dc 01       	movw	r26, r24
     6e8:	cb 01       	movw	r24, r22
     6ea:	8d 83       	std	Y+5, r24	; 0x05
     6ec:	9e 83       	std	Y+6, r25	; 0x06
     6ee:	af 83       	std	Y+7, r26	; 0x07
     6f0:	b8 87       	std	Y+8, r27	; 0x08
			distance = calculateDistance(duration);
     6f2:	8d 81       	ldd	r24, Y+5	; 0x05
     6f4:	9e 81       	ldd	r25, Y+6	; 0x06
     6f6:	af 81       	ldd	r26, Y+7	; 0x07
     6f8:	b8 85       	ldd	r27, Y+8	; 0x08
     6fa:	bc 01       	movw	r22, r24
     6fc:	cd 01       	movw	r24, r26
     6fe:	0e 94 3c 06 	call	0xc78	; 0xc78 <calculateDistance>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	89 83       	std	Y+1, r24	; 0x01
     708:	9a 83       	std	Y+2, r25	; 0x02
     70a:	ab 83       	std	Y+3, r26	; 0x03
     70c:	bc 83       	std	Y+4, r27	; 0x04
			break;
     70e:	00 00       	nop
	 }
	 return distance;
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	9a 81       	ldd	r25, Y+2	; 0x02
     714:	ab 81       	ldd	r26, Y+3	; 0x03
     716:	bc 81       	ldd	r27, Y+4	; 0x04
 }
     718:	bc 01       	movw	r22, r24
     71a:	cd 01       	movw	r24, r26
     71c:	6d 96       	adiw	r28, 0x1d	; 29
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <HCSR04_ISR>:

 void HCSR04_ISR(int pin)
 {
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	00 d0       	rcall	.+0      	; 0x734 <HCSR04_ISR+0x6>
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	9a 83       	std	Y+2, r25	; 0x02
     73a:	89 83       	std	Y+1, r24	; 0x01
	 //TODO: use pin instead of 0b01000000
	 if(PIND & 0b01000000)
     73c:	89 e2       	ldi	r24, 0x29	; 41
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	fc 01       	movw	r30, r24
     742:	80 81       	ld	r24, Z
     744:	88 2f       	mov	r24, r24
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	80 74       	andi	r24, 0x40	; 64
     74a:	99 27       	eor	r25, r25
     74c:	89 2b       	or	r24, r25
     74e:	89 f0       	breq	.+34     	; 0x772 <HCSR04_ISR+0x44>
		echoTimeStart = TCNT0;
     750:	86 e4       	ldi	r24, 0x46	; 70
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	fc 01       	movw	r30, r24
     756:	80 81       	ld	r24, Z
     758:	88 2f       	mov	r24, r24
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	a0 e0       	ldi	r26, 0x00	; 0
     75e:	b0 e0       	ldi	r27, 0x00	; 0
     760:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <echoTimeStart>
     764:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <echoTimeStart+0x1>
     768:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <echoTimeStart+0x2>
     76c:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <echoTimeStart+0x3>
	 else
		echoTimeEnd = TCNT0;
 }
     770:	10 c0       	rjmp	.+32     	; 0x792 <HCSR04_ISR+0x64>
 {
	 //TODO: use pin instead of 0b01000000
	 if(PIND & 0b01000000)
		echoTimeStart = TCNT0;
	 else
		echoTimeEnd = TCNT0;
     772:	86 e4       	ldi	r24, 0x46	; 70
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	fc 01       	movw	r30, r24
     778:	80 81       	ld	r24, Z
     77a:	88 2f       	mov	r24, r24
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	a0 e0       	ldi	r26, 0x00	; 0
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <echoTimeEnd>
     786:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <echoTimeEnd+0x1>
     78a:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <echoTimeEnd+0x2>
     78e:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <echoTimeEnd+0x3>
 }
     792:	00 00       	nop
     794:	0f 90       	pop	r0
     796:	0f 90       	pop	r0
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <trigger>:
/************************************************************************/
/* Local  Implementation                                                */
/************************************************************************/

void trigger(int pin)
{
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	c2 54       	subi	r28, 0x42	; 66
     7a8:	d1 09       	sbc	r29, r1
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	9e 01       	movw	r18, r28
     7b6:	2f 5b       	subi	r18, 0xBF	; 191
     7b8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ba:	f9 01       	movw	r30, r18
     7bc:	91 83       	std	Z+1, r25	; 0x01
     7be:	80 83       	st	Z, r24
	//TODO: use pin instead of 0b01000000
	PORTD &= ~(0b00100000);
     7c0:	8b e2       	ldi	r24, 0x2B	; 43
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	2b e2       	ldi	r18, 0x2B	; 43
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	f9 01       	movw	r30, r18
     7ca:	20 81       	ld	r18, Z
     7cc:	2f 7d       	andi	r18, 0xDF	; 223
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 83       	st	Z, r18
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	a0 e0       	ldi	r26, 0x00	; 0
     7d8:	b0 e4       	ldi	r27, 0x40	; 64
     7da:	89 83       	std	Y+1, r24	; 0x01
     7dc:	9a 83       	std	Y+2, r25	; 0x02
     7de:	ab 83       	std	Y+3, r26	; 0x03
     7e0:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     7e2:	2b ea       	ldi	r18, 0xAB	; 171
     7e4:	3a ea       	ldi	r19, 0xAA	; 170
     7e6:	4a e2       	ldi	r20, 0x2A	; 42
     7e8:	5f e3       	ldi	r21, 0x3F	; 63
     7ea:	69 81       	ldd	r22, Y+1	; 0x01
     7ec:	7a 81       	ldd	r23, Y+2	; 0x02
     7ee:	8b 81       	ldd	r24, Y+3	; 0x03
     7f0:	9c 81       	ldd	r25, Y+4	; 0x04
     7f2:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     7f6:	dc 01       	movw	r26, r24
     7f8:	cb 01       	movw	r24, r22
     7fa:	8d a3       	std	Y+37, r24	; 0x25
     7fc:	9e a3       	std	Y+38, r25	; 0x26
     7fe:	af a3       	std	Y+39, r26	; 0x27
     800:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	5f e3       	ldi	r21, 0x3F	; 63
     80a:	69 81       	ldd	r22, Y+1	; 0x01
     80c:	7a 81       	ldd	r23, Y+2	; 0x02
     80e:	8b 81       	ldd	r24, Y+3	; 0x03
     810:	9c 81       	ldd	r25, Y+4	; 0x04
     812:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     816:	dc 01       	movw	r26, r24
     818:	cb 01       	movw	r24, r22
     81a:	89 a7       	std	Y+41, r24	; 0x29
     81c:	9a a7       	std	Y+42, r25	; 0x2a
     81e:	ab a7       	std	Y+43, r26	; 0x2b
     820:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e8       	ldi	r20, 0x80	; 128
     828:	5f e3       	ldi	r21, 0x3F	; 63
     82a:	6d a1       	ldd	r22, Y+37	; 0x25
     82c:	7e a1       	ldd	r23, Y+38	; 0x26
     82e:	8f a1       	ldd	r24, Y+39	; 0x27
     830:	98 a5       	ldd	r25, Y+40	; 0x28
     832:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     836:	88 23       	and	r24, r24
     838:	1c f4       	brge	.+6      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		__ticks = 1;
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	8d a7       	std	Y+45, r24	; 0x2d
     83e:	b2 c0       	rjmp	.+356    	; 0x9a4 <__stack+0xa5>
	else if (__tmp2 > 65535)
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	3f ef       	ldi	r19, 0xFF	; 255
     844:	4f e7       	ldi	r20, 0x7F	; 127
     846:	57 e4       	ldi	r21, 0x47	; 71
     848:	69 a5       	ldd	r22, Y+41	; 0x29
     84a:	7a a5       	ldd	r23, Y+42	; 0x2a
     84c:	8b a5       	ldd	r24, Y+43	; 0x2b
     84e:	9c a5       	ldd	r25, Y+44	; 0x2c
     850:	0e 94 ab 08 	call	0x1156	; 0x1156 <__gesf2>
     854:	18 16       	cp	r1, r24
     856:	0c f0       	brlt	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	7b c0       	rjmp	.+246    	; 0x950 <__stack+0x51>
	{
		_delay_ms(__us / 1000.0);
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	4a e7       	ldi	r20, 0x7A	; 122
     860:	54 e4       	ldi	r21, 0x44	; 68
     862:	69 81       	ldd	r22, Y+1	; 0x01
     864:	7a 81       	ldd	r23, Y+2	; 0x02
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__divsf3>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	8e a7       	std	Y+46, r24	; 0x2e
     874:	9f a7       	std	Y+47, r25	; 0x2f
     876:	a8 ab       	std	Y+48, r26	; 0x30
     878:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	4a ef       	ldi	r20, 0xFA	; 250
     880:	53 e4       	ldi	r21, 0x43	; 67
     882:	6e a5       	ldd	r22, Y+46	; 0x2e
     884:	7f a5       	ldd	r23, Y+47	; 0x2f
     886:	88 a9       	ldd	r24, Y+48	; 0x30
     888:	99 a9       	ldd	r25, Y+49	; 0x31
     88a:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     88e:	dc 01       	movw	r26, r24
     890:	cb 01       	movw	r24, r22
     892:	8a ab       	std	Y+50, r24	; 0x32
     894:	9b ab       	std	Y+51, r25	; 0x33
     896:	ac ab       	std	Y+52, r26	; 0x34
     898:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e8       	ldi	r20, 0x80	; 128
     8a0:	5f e3       	ldi	r21, 0x3F	; 63
     8a2:	6a a9       	ldd	r22, Y+50	; 0x32
     8a4:	7b a9       	ldd	r23, Y+51	; 0x33
     8a6:	8c a9       	ldd	r24, Y+52	; 0x34
     8a8:	9d a9       	ldd	r25, Y+53	; 0x35
     8aa:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     8ae:	88 23       	and	r24, r24
     8b0:	2c f4       	brge	.+10     	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
		__ticks = 1;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	9f ab       	std	Y+55, r25	; 0x37
     8b8:	8e ab       	std	Y+54, r24	; 0x36
     8ba:	3f c0       	rjmp	.+126    	; 0x93a <__stack+0x3b>
	else if (__tmp > 65535)
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	3f ef       	ldi	r19, 0xFF	; 255
     8c0:	4f e7       	ldi	r20, 0x7F	; 127
     8c2:	57 e4       	ldi	r21, 0x47	; 71
     8c4:	6a a9       	ldd	r22, Y+50	; 0x32
     8c6:	7b a9       	ldd	r23, Y+51	; 0x33
     8c8:	8c a9       	ldd	r24, Y+52	; 0x34
     8ca:	9d a9       	ldd	r25, Y+53	; 0x35
     8cc:	0e 94 ab 08 	call	0x1156	; 0x1156 <__gesf2>
     8d0:	18 16       	cp	r1, r24
     8d2:	4c f5       	brge	.+82     	; 0x926 <__stack+0x27>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e2       	ldi	r20, 0x20	; 32
     8da:	51 e4       	ldi	r21, 0x41	; 65
     8dc:	6e a5       	ldd	r22, Y+46	; 0x2e
     8de:	7f a5       	ldd	r23, Y+47	; 0x2f
     8e0:	88 a9       	ldd	r24, Y+48	; 0x30
     8e2:	99 a9       	ldd	r25, Y+49	; 0x31
     8e4:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	bc 01       	movw	r22, r24
     8ee:	cd 01       	movw	r24, r26
     8f0:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fixunssfsi>
     8f4:	dc 01       	movw	r26, r24
     8f6:	cb 01       	movw	r24, r22
     8f8:	9f ab       	std	Y+55, r25	; 0x37
     8fa:	8e ab       	std	Y+54, r24	; 0x36
     8fc:	0f c0       	rjmp	.+30     	; 0x91c <__stack+0x1d>
     8fe:	82 e3       	ldi	r24, 0x32	; 50
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	99 af       	std	Y+57, r25	; 0x39
     904:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     906:	88 ad       	ldd	r24, Y+56	; 0x38
     908:	99 ad       	ldd	r25, Y+57	; 0x39
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <__stack+0xb>
     90e:	99 af       	std	Y+57, r25	; 0x39
     910:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     912:	8e a9       	ldd	r24, Y+54	; 0x36
     914:	9f a9       	ldd	r25, Y+55	; 0x37
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	9f ab       	std	Y+55, r25	; 0x37
     91a:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91c:	8e a9       	ldd	r24, Y+54	; 0x36
     91e:	9f a9       	ldd	r25, Y+55	; 0x37
     920:	89 2b       	or	r24, r25
     922:	69 f7       	brne	.-38     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
     924:	3f c0       	rjmp	.+126    	; 0x9a4 <__stack+0xa5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     926:	6a a9       	ldd	r22, Y+50	; 0x32
     928:	7b a9       	ldd	r23, Y+51	; 0x33
     92a:	8c a9       	ldd	r24, Y+52	; 0x34
     92c:	9d a9       	ldd	r25, Y+53	; 0x35
     92e:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fixunssfsi>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	9f ab       	std	Y+55, r25	; 0x37
     938:	8e ab       	std	Y+54, r24	; 0x36
     93a:	8e a9       	ldd	r24, Y+54	; 0x36
     93c:	9f a9       	ldd	r25, Y+55	; 0x37
     93e:	9b af       	std	Y+59, r25	; 0x3b
     940:	8a af       	std	Y+58, r24	; 0x3a
     942:	8a ad       	ldd	r24, Y+58	; 0x3a
     944:	9b ad       	ldd	r25, Y+59	; 0x3b
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <__stack+0x47>
     94a:	9b af       	std	Y+59, r25	; 0x3b
     94c:	8a af       	std	Y+58, r24	; 0x3a
     94e:	2a c0       	rjmp	.+84     	; 0x9a4 <__stack+0xa5>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	4f e7       	ldi	r20, 0x7F	; 127
     956:	53 e4       	ldi	r21, 0x43	; 67
     958:	6d a1       	ldd	r22, Y+37	; 0x25
     95a:	7e a1       	ldd	r23, Y+38	; 0x26
     95c:	8f a1       	ldd	r24, Y+39	; 0x27
     95e:	98 a5       	ldd	r25, Y+40	; 0x28
     960:	0e 94 ab 08 	call	0x1156	; 0x1156 <__gesf2>
     964:	18 16       	cp	r1, r24
     966:	ac f4       	brge	.+42     	; 0x992 <__stack+0x93>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     968:	69 a5       	ldd	r22, Y+41	; 0x29
     96a:	7a a5       	ldd	r23, Y+42	; 0x2a
     96c:	8b a5       	ldd	r24, Y+43	; 0x2b
     96e:	9c a5       	ldd	r25, Y+44	; 0x2c
     970:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fixunssfsi>
     974:	dc 01       	movw	r26, r24
     976:	cb 01       	movw	r24, r22
     978:	9d af       	std	Y+61, r25	; 0x3d
     97a:	8c af       	std	Y+60, r24	; 0x3c
     97c:	8c ad       	ldd	r24, Y+60	; 0x3c
     97e:	9d ad       	ldd	r25, Y+61	; 0x3d
     980:	9f af       	std	Y+63, r25	; 0x3f
     982:	8e af       	std	Y+62, r24	; 0x3e
     984:	8e ad       	ldd	r24, Y+62	; 0x3e
     986:	9f ad       	ldd	r25, Y+63	; 0x3f
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <__stack+0x89>
     98c:	9f af       	std	Y+63, r25	; 0x3f
     98e:	8e af       	std	Y+62, r24	; 0x3e
     990:	1c c0       	rjmp	.+56     	; 0x9ca <__stack+0xcb>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     992:	6d a1       	ldd	r22, Y+37	; 0x25
     994:	7e a1       	ldd	r23, Y+38	; 0x26
     996:	8f a1       	ldd	r24, Y+39	; 0x27
     998:	98 a5       	ldd	r25, Y+40	; 0x28
     99a:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fixunssfsi>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	8d a7       	std	Y+45, r24	; 0x2d
     9a4:	2d a5       	ldd	r18, Y+45	; 0x2d
     9a6:	ce 01       	movw	r24, r28
     9a8:	80 5c       	subi	r24, 0xC0	; 192
     9aa:	9f 4f       	sbci	r25, 0xFF	; 255
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9b0:	ce 01       	movw	r24, r28
     9b2:	80 5c       	subi	r24, 0xC0	; 192
     9b4:	9f 4f       	sbci	r25, 0xFF	; 255
     9b6:	fc 01       	movw	r30, r24
     9b8:	80 81       	ld	r24, Z
     9ba:	28 2f       	mov	r18, r24
     9bc:	2a 95       	dec	r18
     9be:	f1 f7       	brne	.-4      	; 0x9bc <__stack+0xbd>
     9c0:	ce 01       	movw	r24, r28
     9c2:	80 5c       	subi	r24, 0xC0	; 192
     9c4:	9f 4f       	sbci	r25, 0xFF	; 255
     9c6:	fc 01       	movw	r30, r24
     9c8:	20 83       	st	Z, r18
	_delay_us(2); //just to ensure we're starting a fresh pulse
	//pin = 1;
	PORTD |= 0b00100000;
     9ca:	8b e2       	ldi	r24, 0x2B	; 43
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	2b e2       	ldi	r18, 0x2B	; 43
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	f9 01       	movw	r30, r18
     9d4:	20 81       	ld	r18, Z
     9d6:	20 62       	ori	r18, 0x20	; 32
     9d8:	fc 01       	movw	r30, r24
     9da:	20 83       	st	Z, r18
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e2       	ldi	r26, 0x20	; 32
     9e2:	b1 e4       	ldi	r27, 0x41	; 65
     9e4:	8d 83       	std	Y+5, r24	; 0x05
     9e6:	9e 83       	std	Y+6, r25	; 0x06
     9e8:	af 83       	std	Y+7, r26	; 0x07
     9ea:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     9ec:	2b ea       	ldi	r18, 0xAB	; 171
     9ee:	3a ea       	ldi	r19, 0xAA	; 170
     9f0:	4a e2       	ldi	r20, 0x2A	; 42
     9f2:	5f e3       	ldi	r21, 0x3F	; 63
     9f4:	6d 81       	ldd	r22, Y+5	; 0x05
     9f6:	7e 81       	ldd	r23, Y+6	; 0x06
     9f8:	8f 81       	ldd	r24, Y+7	; 0x07
     9fa:	98 85       	ldd	r25, Y+8	; 0x08
     9fc:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     a00:	dc 01       	movw	r26, r24
     a02:	cb 01       	movw	r24, r22
     a04:	89 87       	std	Y+9, r24	; 0x09
     a06:	9a 87       	std	Y+10, r25	; 0x0a
     a08:	ab 87       	std	Y+11, r26	; 0x0b
     a0a:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	5f e3       	ldi	r21, 0x3F	; 63
     a14:	6d 81       	ldd	r22, Y+5	; 0x05
     a16:	7e 81       	ldd	r23, Y+6	; 0x06
     a18:	8f 81       	ldd	r24, Y+7	; 0x07
     a1a:	98 85       	ldd	r25, Y+8	; 0x08
     a1c:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	8d 87       	std	Y+13, r24	; 0x0d
     a26:	9e 87       	std	Y+14, r25	; 0x0e
     a28:	af 87       	std	Y+15, r26	; 0x0f
     a2a:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e8       	ldi	r20, 0x80	; 128
     a32:	5f e3       	ldi	r21, 0x3F	; 63
     a34:	69 85       	ldd	r22, Y+9	; 0x09
     a36:	7a 85       	ldd	r23, Y+10	; 0x0a
     a38:	8b 85       	ldd	r24, Y+11	; 0x0b
     a3a:	9c 85       	ldd	r25, Y+12	; 0x0c
     a3c:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     a40:	88 23       	and	r24, r24
     a42:	1c f4       	brge	.+6      	; 0xa4a <__stack+0x14b>
		__ticks = 1;
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	89 8b       	std	Y+17, r24	; 0x11
     a48:	b2 c0       	rjmp	.+356    	; 0xbae <__stack+0x2af>
	else if (__tmp2 > 65535)
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	3f ef       	ldi	r19, 0xFF	; 255
     a4e:	4f e7       	ldi	r20, 0x7F	; 127
     a50:	57 e4       	ldi	r21, 0x47	; 71
     a52:	6d 85       	ldd	r22, Y+13	; 0x0d
     a54:	7e 85       	ldd	r23, Y+14	; 0x0e
     a56:	8f 85       	ldd	r24, Y+15	; 0x0f
     a58:	98 89       	ldd	r25, Y+16	; 0x10
     a5a:	0e 94 ab 08 	call	0x1156	; 0x1156 <__gesf2>
     a5e:	18 16       	cp	r1, r24
     a60:	0c f0       	brlt	.+2      	; 0xa64 <__stack+0x165>
     a62:	7b c0       	rjmp	.+246    	; 0xb5a <__stack+0x25b>
	{
		_delay_ms(__us / 1000.0);
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	4a e7       	ldi	r20, 0x7A	; 122
     a6a:	54 e4       	ldi	r21, 0x44	; 68
     a6c:	6d 81       	ldd	r22, Y+5	; 0x05
     a6e:	7e 81       	ldd	r23, Y+6	; 0x06
     a70:	8f 81       	ldd	r24, Y+7	; 0x07
     a72:	98 85       	ldd	r25, Y+8	; 0x08
     a74:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__divsf3>
     a78:	dc 01       	movw	r26, r24
     a7a:	cb 01       	movw	r24, r22
     a7c:	8a 8b       	std	Y+18, r24	; 0x12
     a7e:	9b 8b       	std	Y+19, r25	; 0x13
     a80:	ac 8b       	std	Y+20, r26	; 0x14
     a82:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	4a ef       	ldi	r20, 0xFA	; 250
     a8a:	53 e4       	ldi	r21, 0x43	; 67
     a8c:	6a 89       	ldd	r22, Y+18	; 0x12
     a8e:	7b 89       	ldd	r23, Y+19	; 0x13
     a90:	8c 89       	ldd	r24, Y+20	; 0x14
     a92:	9d 89       	ldd	r25, Y+21	; 0x15
     a94:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	8e 8b       	std	Y+22, r24	; 0x16
     a9e:	9f 8b       	std	Y+23, r25	; 0x17
     aa0:	a8 8f       	std	Y+24, r26	; 0x18
     aa2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e8       	ldi	r20, 0x80	; 128
     aaa:	5f e3       	ldi	r21, 0x3F	; 63
     aac:	6e 89       	ldd	r22, Y+22	; 0x16
     aae:	7f 89       	ldd	r23, Y+23	; 0x17
     ab0:	88 8d       	ldd	r24, Y+24	; 0x18
     ab2:	99 8d       	ldd	r25, Y+25	; 0x19
     ab4:	0e 94 53 07 	call	0xea6	; 0xea6 <__cmpsf2>
     ab8:	88 23       	and	r24, r24
     aba:	2c f4       	brge	.+10     	; 0xac6 <__stack+0x1c7>
		__ticks = 1;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	9b 8f       	std	Y+27, r25	; 0x1b
     ac2:	8a 8f       	std	Y+26, r24	; 0x1a
     ac4:	3f c0       	rjmp	.+126    	; 0xb44 <__stack+0x245>
	else if (__tmp > 65535)
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	3f ef       	ldi	r19, 0xFF	; 255
     aca:	4f e7       	ldi	r20, 0x7F	; 127
     acc:	57 e4       	ldi	r21, 0x47	; 71
     ace:	6e 89       	ldd	r22, Y+22	; 0x16
     ad0:	7f 89       	ldd	r23, Y+23	; 0x17
     ad2:	88 8d       	ldd	r24, Y+24	; 0x18
     ad4:	99 8d       	ldd	r25, Y+25	; 0x19
     ad6:	0e 94 ab 08 	call	0x1156	; 0x1156 <__gesf2>
     ada:	18 16       	cp	r1, r24
     adc:	4c f5       	brge	.+82     	; 0xb30 <__stack+0x231>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e2       	ldi	r20, 0x20	; 32
     ae4:	51 e4       	ldi	r21, 0x41	; 65
     ae6:	6a 89       	ldd	r22, Y+18	; 0x12
     ae8:	7b 89       	ldd	r23, Y+19	; 0x13
     aea:	8c 89       	ldd	r24, Y+20	; 0x14
     aec:	9d 89       	ldd	r25, Y+21	; 0x15
     aee:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	bc 01       	movw	r22, r24
     af8:	cd 01       	movw	r24, r26
     afa:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fixunssfsi>
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	9b 8f       	std	Y+27, r25	; 0x1b
     b04:	8a 8f       	std	Y+26, r24	; 0x1a
     b06:	0f c0       	rjmp	.+30     	; 0xb26 <__stack+0x227>
     b08:	82 e3       	ldi	r24, 0x32	; 50
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	9d 8f       	std	Y+29, r25	; 0x1d
     b0e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b10:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b12:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <__stack+0x215>
     b18:	9d 8f       	std	Y+29, r25	; 0x1d
     b1a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b1c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b1e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b20:	01 97       	sbiw	r24, 0x01	; 1
     b22:	9b 8f       	std	Y+27, r25	; 0x1b
     b24:	8a 8f       	std	Y+26, r24	; 0x1a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b26:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b28:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b2a:	89 2b       	or	r24, r25
     b2c:	69 f7       	brne	.-38     	; 0xb08 <__stack+0x209>
     b2e:	3f c0       	rjmp	.+126    	; 0xbae <__stack+0x2af>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b30:	6e 89       	ldd	r22, Y+22	; 0x16
     b32:	7f 89       	ldd	r23, Y+23	; 0x17
     b34:	88 8d       	ldd	r24, Y+24	; 0x18
     b36:	99 8d       	ldd	r25, Y+25	; 0x19
     b38:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fixunssfsi>
     b3c:	dc 01       	movw	r26, r24
     b3e:	cb 01       	movw	r24, r22
     b40:	9b 8f       	std	Y+27, r25	; 0x1b
     b42:	8a 8f       	std	Y+26, r24	; 0x1a
     b44:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b46:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b48:	9f 8f       	std	Y+31, r25	; 0x1f
     b4a:	8e 8f       	std	Y+30, r24	; 0x1e
     b4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b4e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	f1 f7       	brne	.-4      	; 0xb50 <__stack+0x251>
     b54:	9f 8f       	std	Y+31, r25	; 0x1f
     b56:	8e 8f       	std	Y+30, r24	; 0x1e
     b58:	2a c0       	rjmp	.+84     	; 0xbae <__stack+0x2af>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	4f e7       	ldi	r20, 0x7F	; 127
     b60:	53 e4       	ldi	r21, 0x43	; 67
     b62:	69 85       	ldd	r22, Y+9	; 0x09
     b64:	7a 85       	ldd	r23, Y+10	; 0x0a
     b66:	8b 85       	ldd	r24, Y+11	; 0x0b
     b68:	9c 85       	ldd	r25, Y+12	; 0x0c
     b6a:	0e 94 ab 08 	call	0x1156	; 0x1156 <__gesf2>
     b6e:	18 16       	cp	r1, r24
     b70:	ac f4       	brge	.+42     	; 0xb9c <__stack+0x29d>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     b72:	6d 85       	ldd	r22, Y+13	; 0x0d
     b74:	7e 85       	ldd	r23, Y+14	; 0x0e
     b76:	8f 85       	ldd	r24, Y+15	; 0x0f
     b78:	98 89       	ldd	r25, Y+16	; 0x10
     b7a:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fixunssfsi>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	99 a3       	std	Y+33, r25	; 0x21
     b84:	88 a3       	std	Y+32, r24	; 0x20
     b86:	88 a1       	ldd	r24, Y+32	; 0x20
     b88:	99 a1       	ldd	r25, Y+33	; 0x21
     b8a:	9b a3       	std	Y+35, r25	; 0x23
     b8c:	8a a3       	std	Y+34, r24	; 0x22
     b8e:	8a a1       	ldd	r24, Y+34	; 0x22
     b90:	9b a1       	ldd	r25, Y+35	; 0x23
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	f1 f7       	brne	.-4      	; 0xb92 <__stack+0x293>
     b96:	9b a3       	std	Y+35, r25	; 0x23
     b98:	8a a3       	std	Y+34, r24	; 0x22
     b9a:	0f c0       	rjmp	.+30     	; 0xbba <__stack+0x2bb>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b9c:	69 85       	ldd	r22, Y+9	; 0x09
     b9e:	7a 85       	ldd	r23, Y+10	; 0x0a
     ba0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ba2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ba4:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fixunssfsi>
     ba8:	dc 01       	movw	r26, r24
     baa:	cb 01       	movw	r24, r22
     bac:	89 8b       	std	Y+17, r24	; 0x11
     bae:	89 89       	ldd	r24, Y+17	; 0x11
     bb0:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     bb2:	8c a1       	ldd	r24, Y+36	; 0x24
     bb4:	8a 95       	dec	r24
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <__stack+0x2b5>
     bb8:	8c a3       	std	Y+36, r24	; 0x24
	_delay_us(10); //need to wait a minimum of 10us for the 8 pulses to be sent, according to the datasheet (see header file)
	//pin = 0;
	PORTD &= ~(0b00100000);
     bba:	8b e2       	ldi	r24, 0x2B	; 43
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	2b e2       	ldi	r18, 0x2B	; 43
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	f9 01       	movw	r30, r18
     bc4:	20 81       	ld	r18, Z
     bc6:	2f 7d       	andi	r18, 0xDF	; 223
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18
}
     bcc:	00 00       	nop
     bce:	ce 5b       	subi	r28, 0xBE	; 190
     bd0:	df 4f       	sbci	r29, 0xFF	; 255
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	08 95       	ret

00000be2 <waitForEcho>:

long waitForEcho(int pin)
{
     be2:	ef 92       	push	r14
     be4:	ff 92       	push	r15
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <waitForEcho+0xe>
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <waitForEcho+0x10>
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <waitForEcho+0x12>
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	9e 83       	std	Y+6, r25	; 0x06
     bfa:	8d 83       	std	Y+5, r24	; 0x05
	//TODO: use pin instead of 0b01000000
	long duration = 0;
     bfc:	19 82       	std	Y+1, r1	; 0x01
     bfe:	1a 82       	std	Y+2, r1	; 0x02
     c00:	1b 82       	std	Y+3, r1	; 0x03
     c02:	1c 82       	std	Y+4, r1	; 0x04
		
	// wait for the pin to go low
	while(PIND & 0b01000000);
     c04:	00 00       	nop
     c06:	89 e2       	ldi	r24, 0x29	; 41
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	fc 01       	movw	r30, r24
     c0c:	80 81       	ld	r24, Z
     c0e:	88 2f       	mov	r24, r24
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	80 74       	andi	r24, 0x40	; 64
     c14:	99 27       	eor	r25, r25
     c16:	89 2b       	or	r24, r25
     c18:	b1 f7       	brne	.-20     	; 0xc06 <waitForEcho+0x24>
	
	duration = echoTimeEnd - echoTimeStart;
     c1a:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <echoTimeEnd>
     c1e:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <echoTimeEnd+0x1>
     c22:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <echoTimeEnd+0x2>
     c26:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <echoTimeEnd+0x3>
     c2a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <echoTimeStart>
     c2e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <echoTimeStart+0x1>
     c32:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <echoTimeStart+0x2>
     c36:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <echoTimeStart+0x3>
     c3a:	79 01       	movw	r14, r18
     c3c:	8a 01       	movw	r16, r20
     c3e:	e8 1a       	sub	r14, r24
     c40:	f9 0a       	sbc	r15, r25
     c42:	0a 0b       	sbc	r16, r26
     c44:	1b 0b       	sbc	r17, r27
     c46:	d8 01       	movw	r26, r16
     c48:	c7 01       	movw	r24, r14
     c4a:	89 83       	std	Y+1, r24	; 0x01
     c4c:	9a 83       	std	Y+2, r25	; 0x02
     c4e:	ab 83       	std	Y+3, r26	; 0x03
     c50:	bc 83       	std	Y+4, r27	; 0x04
		
	return duration;
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	ab 81       	ldd	r26, Y+3	; 0x03
     c58:	bc 81       	ldd	r27, Y+4	; 0x04
}
     c5a:	bc 01       	movw	r22, r24
     c5c:	cd 01       	movw	r24, r26
     c5e:	26 96       	adiw	r28, 0x06	; 6
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	08 95       	ret

00000c78 <calculateDistance>:

float calculateDistance(long duration)
{
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	28 97       	sbiw	r28, 0x08	; 8
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	6d 83       	std	Y+5, r22	; 0x05
     c8e:	7e 83       	std	Y+6, r23	; 0x06
     c90:	8f 83       	std	Y+7, r24	; 0x07
     c92:	98 87       	std	Y+8, r25	; 0x08
	float speed = 0.0343; // speed of sound in cm/us -- speed pulled from google as 343m/s in dry air at 20C on Feb 24th, 2023
     c94:	88 e2       	ldi	r24, 0x28	; 40
     c96:	9e e7       	ldi	r25, 0x7E	; 126
     c98:	ac e0       	ldi	r26, 0x0C	; 12
     c9a:	bd e3       	ldi	r27, 0x3D	; 61
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	ab 83       	std	Y+3, r26	; 0x03
     ca2:	bc 83       	std	Y+4, r27	; 0x04
	return (duration * speed) / 2; //calculation retrieved from datasheet (see header file)
     ca4:	6d 81       	ldd	r22, Y+5	; 0x05
     ca6:	7e 81       	ldd	r23, Y+6	; 0x06
     ca8:	8f 81       	ldd	r24, Y+7	; 0x07
     caa:	98 85       	ldd	r25, Y+8	; 0x08
     cac:	0e 94 fb 07 	call	0xff6	; 0xff6 <__floatsisf>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	29 81       	ldd	r18, Y+1	; 0x01
     cb6:	3a 81       	ldd	r19, Y+2	; 0x02
     cb8:	4b 81       	ldd	r20, Y+3	; 0x03
     cba:	5c 81       	ldd	r21, Y+4	; 0x04
     cbc:	bc 01       	movw	r22, r24
     cbe:	cd 01       	movw	r24, r26
     cc0:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e4       	ldi	r21, 0x40	; 64
     cd0:	bc 01       	movw	r22, r24
     cd2:	cd 01       	movw	r24, r26
     cd4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__divsf3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
}
     cdc:	bc 01       	movw	r22, r24
     cde:	cd 01       	movw	r24, r26
     ce0:	28 96       	adiw	r28, 0x08	; 8
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <main>:
// constant for timer output compare offset, init and ISR rearm
const unsigned int _Timer_OC_Offset = 250; // 1 / (2000000 / 8 / 250) = 1ms (prescale 8)
// global counter for timer ISR, used as reference to coordinate activities
volatile unsigned int _Ticks = 0;
int main(void)
{
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <main+0xa>
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <main+0xc>
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
	// variable for managing the A/D update
	const unsigned int cuiAtoDEventCount = 500; // every 1/2 second
     d02:	84 ef       	ldi	r24, 0xF4	; 244
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	9c 83       	std	Y+4, r25	; 0x04
     d08:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int uiAtoDEventNext = cuiAtoDEventCount;
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	9a 83       	std	Y+2, r25	; 0x02
     d10:	89 83       	std	Y+1, r24	; 0x01
	// one-time initialization section
	// bring up the timer, requires ISR!
	Timer_Init(Timer_Prescale_8, _Timer_OC_Offset); // 1ms intervals
     d12:	8a ef       	ldi	r24, 0xFA	; 250
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	bc 01       	movw	r22, r24
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Timer_Init>
	// enable sleep mode, for idle, sort of similar to WAI on 9S12X (13.2)
	sleep_enable();
     d1e:	83 e5       	ldi	r24, 0x53	; 83
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	23 e5       	ldi	r18, 0x53	; 83
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	f9 01       	movw	r30, r18
     d28:	20 81       	ld	r18, Z
     d2a:	21 60       	ori	r18, 0x01	; 1
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 83       	st	Z, r18
	SCI0_Init(F_CPU, 9600, 1); // 16Mhz clock, 9600 baud
     d30:	01 e0       	ldi	r16, 0x01	; 1
     d32:	10 e0       	ldi	r17, 0x00	; 0
     d34:	20 e8       	ldi	r18, 0x80	; 128
     d36:	35 e2       	ldi	r19, 0x25	; 37
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	60 e8       	ldi	r22, 0x80	; 128
     d3e:	74 e8       	ldi	r23, 0x84	; 132
     d40:	8e e1       	ldi	r24, 0x1E	; 30
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 07 01 	call	0x20e	; 0x20e <SCI0_Init>

	// welcome message, so we know it booted OK
	SCI0_TxString("\n328 Up! Characters will echo.\n");
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0e 94 c1 01 	call	0x382	; 0x382 <SCI0_TxString>
	GD03_Init();
     d50:	0e 94 1a 02 	call	0x434	; 0x434 <GD03_Init>
	HCSR04_InitDevice(HCSR04_L);
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	0e 94 25 02 	call	0x44a	; 0x44a <HCSR04_InitDevice>


	// set the global interrupt flag (enable interrupts)
	// this is backwards from the 9S12
	sei();
     d5a:	78 94       	sei
	// make portc2 (pin 25) an output (PC7)
	DDRC |= 0b00000100;
     d5c:	87 e2       	ldi	r24, 0x27	; 39
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	27 e2       	ldi	r18, 0x27	; 39
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	f9 01       	movw	r30, r18
     d66:	20 81       	ld	r18, Z
     d68:	24 60       	ori	r18, 0x04	; 4
     d6a:	fc 01       	movw	r30, r24
     d6c:	20 83       	st	Z, r18


	// main program loop - don't exit
	while(1)
	{
		if(HCSR04_CheckForObstacle(HCSR04_L, 10))
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	60 e2       	ldi	r22, 0x20	; 32
     d74:	71 e4       	ldi	r23, 0x41	; 65
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	0e 94 ab 02 	call	0x556	; 0x556 <HCSR04_CheckForObstacle>
     d7c:	89 2b       	or	r24, r25
     d7e:	51 f0       	breq	.+20     	; 0xd94 <main+0xa2>
		{
			PORTC |= 0b00000100; // turn on LED
     d80:	88 e2       	ldi	r24, 0x28	; 40
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	28 e2       	ldi	r18, 0x28	; 40
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	f9 01       	movw	r30, r18
     d8a:	20 81       	ld	r18, Z
     d8c:	24 60       	ori	r18, 0x04	; 4
     d8e:	fc 01       	movw	r30, r24
     d90:	20 83       	st	Z, r18
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <main+0xb4>
		}
		else
		{
			PORTC &= ~(0b00000100); // turn off LED
     d94:	88 e2       	ldi	r24, 0x28	; 40
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	28 e2       	ldi	r18, 0x28	; 40
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	f9 01       	movw	r30, r18
     d9e:	20 81       	ld	r18, Z
     da0:	2b 7f       	andi	r18, 0xFB	; 251
     da2:	fc 01       	movw	r30, r24
     da4:	20 83       	st	Z, r18
		}
		// go idle!
		sleep_cpu();
     da6:	88 95       	sleep

		//// are we past the scheduled event?
		if (uiAtoDEventNext - _Ticks > cuiAtoDEventCount)
     da8:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     dac:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
     db0:	29 81       	ldd	r18, Y+1	; 0x01
     db2:	3a 81       	ldd	r19, Y+2	; 0x02
     db4:	28 1b       	sub	r18, r24
     db6:	39 0b       	sbc	r19, r25
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	82 17       	cp	r24, r18
     dbe:	93 07       	cpc	r25, r19
     dc0:	b0 f6       	brcc	.-84     	; 0xd6e <main+0x7c>
		{
			uiAtoDEventNext += cuiAtoDEventCount; // rearm
     dc2:	29 81       	ldd	r18, Y+1	; 0x01
     dc4:	3a 81       	ldd	r19, Y+2	; 0x02
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	9c 81       	ldd	r25, Y+4	; 0x04
     dca:	82 0f       	add	r24, r18
     dcc:	93 1f       	adc	r25, r19
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	89 83       	std	Y+1, r24	; 0x01
			}*/
			
			
		}

	}
     dd2:	cd cf       	rjmp	.-102    	; 0xd6e <main+0x7c>

00000dd4 <__vector_11>:
}
// output compare A interrupt
ISR(TIMER1_COMPA_vect)
{
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	ef 93       	push	r30
     dee:	ff 93       	push	r31
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	// rearm the output compare operation
	OCR1A += _Timer_OC_Offset; // 1ms intervals
     df8:	88 e8       	ldi	r24, 0x88	; 136
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	28 e8       	ldi	r18, 0x88	; 136
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	f9 01       	movw	r30, r18
     e02:	40 81       	ld	r20, Z
     e04:	51 81       	ldd	r21, Z+1	; 0x01
     e06:	2a ef       	ldi	r18, 0xFA	; 250
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	24 0f       	add	r18, r20
     e0c:	35 1f       	adc	r19, r21
     e0e:	fc 01       	movw	r30, r24
     e10:	31 83       	std	Z+1, r19	; 0x01
     e12:	20 83       	st	Z, r18

	// up the global tick count
	++_Ticks;
     e14:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     e18:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
     e22:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
}
     e26:	00 00       	nop
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	5f 91       	pop	r21
     e36:	4f 91       	pop	r20
     e38:	3f 91       	pop	r19
     e3a:	2f 91       	pop	r18
     e3c:	0f 90       	pop	r0
     e3e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     e42:	0f 90       	pop	r0
     e44:	1f 90       	pop	r1
     e46:	18 95       	reti

00000e48 <__vector_5>:

ISR (PCINT2_vect)
{
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	2f 93       	push	r18
     e56:	3f 93       	push	r19
     e58:	4f 93       	push	r20
     e5a:	5f 93       	push	r21
     e5c:	6f 93       	push	r22
     e5e:	7f 93       	push	r23
     e60:	8f 93       	push	r24
     e62:	9f 93       	push	r25
     e64:	af 93       	push	r26
     e66:	bf 93       	push	r27
     e68:	ef 93       	push	r30
     e6a:	ff 93       	push	r31
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
	HCSR04_ISR(PIND7);
     e74:	87 e0       	ldi	r24, 0x07	; 7
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 97 03 	call	0x72e	; 0x72e <HCSR04_ISR>
	//else
		//PORTC &= ~(0b00000100); // turn off LED
		
	//PINC |= 0b00000100;
	//PORTC ^= 0b00000100;
}
     e7c:	00 00       	nop
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	bf 91       	pop	r27
     e88:	af 91       	pop	r26
     e8a:	9f 91       	pop	r25
     e8c:	8f 91       	pop	r24
     e8e:	7f 91       	pop	r23
     e90:	6f 91       	pop	r22
     e92:	5f 91       	pop	r21
     e94:	4f 91       	pop	r20
     e96:	3f 91       	pop	r19
     e98:	2f 91       	pop	r18
     e9a:	0f 90       	pop	r0
     e9c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <__cmpsf2>:
     ea6:	0e 94 36 08 	call	0x106c	; 0x106c <__fp_cmp>
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__cmpsf2+0x8>
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	08 95       	ret

00000eb0 <__divsf3>:
     eb0:	0e 94 6c 07 	call	0xed8	; 0xed8 <__divsf3x>
     eb4:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__fp_round>
     eb8:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_pscB>
     ebc:	58 f0       	brcs	.+22     	; 0xed4 <__divsf3+0x24>
     ebe:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__fp_pscA>
     ec2:	40 f0       	brcs	.+16     	; 0xed4 <__divsf3+0x24>
     ec4:	29 f4       	brne	.+10     	; 0xed0 <__divsf3+0x20>
     ec6:	5f 3f       	cpi	r21, 0xFF	; 255
     ec8:	29 f0       	breq	.+10     	; 0xed4 <__divsf3+0x24>
     eca:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>
     ece:	51 11       	cpse	r21, r1
     ed0:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>
     ed4:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_nan>

00000ed8 <__divsf3x>:
     ed8:	0e 94 82 08 	call	0x1104	; 0x1104 <__fp_split3>
     edc:	68 f3       	brcs	.-38     	; 0xeb8 <__divsf3+0x8>

00000ede <__divsf3_pse>:
     ede:	99 23       	and	r25, r25
     ee0:	b1 f3       	breq	.-20     	; 0xece <__divsf3+0x1e>
     ee2:	55 23       	and	r21, r21
     ee4:	91 f3       	breq	.-28     	; 0xeca <__divsf3+0x1a>
     ee6:	95 1b       	sub	r25, r21
     ee8:	55 0b       	sbc	r21, r21
     eea:	bb 27       	eor	r27, r27
     eec:	aa 27       	eor	r26, r26
     eee:	62 17       	cp	r22, r18
     ef0:	73 07       	cpc	r23, r19
     ef2:	84 07       	cpc	r24, r20
     ef4:	38 f0       	brcs	.+14     	; 0xf04 <__divsf3_pse+0x26>
     ef6:	9f 5f       	subi	r25, 0xFF	; 255
     ef8:	5f 4f       	sbci	r21, 0xFF	; 255
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	44 1f       	adc	r20, r20
     f00:	aa 1f       	adc	r26, r26
     f02:	a9 f3       	breq	.-22     	; 0xeee <__divsf3_pse+0x10>
     f04:	35 d0       	rcall	.+106    	; 0xf70 <__divsf3_pse+0x92>
     f06:	0e 2e       	mov	r0, r30
     f08:	3a f0       	brmi	.+14     	; 0xf18 <__divsf3_pse+0x3a>
     f0a:	e0 e8       	ldi	r30, 0x80	; 128
     f0c:	32 d0       	rcall	.+100    	; 0xf72 <__divsf3_pse+0x94>
     f0e:	91 50       	subi	r25, 0x01	; 1
     f10:	50 40       	sbci	r21, 0x00	; 0
     f12:	e6 95       	lsr	r30
     f14:	00 1c       	adc	r0, r0
     f16:	ca f7       	brpl	.-14     	; 0xf0a <__divsf3_pse+0x2c>
     f18:	2b d0       	rcall	.+86     	; 0xf70 <__divsf3_pse+0x92>
     f1a:	fe 2f       	mov	r31, r30
     f1c:	29 d0       	rcall	.+82     	; 0xf70 <__divsf3_pse+0x92>
     f1e:	66 0f       	add	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	88 1f       	adc	r24, r24
     f24:	bb 1f       	adc	r27, r27
     f26:	26 17       	cp	r18, r22
     f28:	37 07       	cpc	r19, r23
     f2a:	48 07       	cpc	r20, r24
     f2c:	ab 07       	cpc	r26, r27
     f2e:	b0 e8       	ldi	r27, 0x80	; 128
     f30:	09 f0       	breq	.+2      	; 0xf34 <__divsf3_pse+0x56>
     f32:	bb 0b       	sbc	r27, r27
     f34:	80 2d       	mov	r24, r0
     f36:	bf 01       	movw	r22, r30
     f38:	ff 27       	eor	r31, r31
     f3a:	93 58       	subi	r25, 0x83	; 131
     f3c:	5f 4f       	sbci	r21, 0xFF	; 255
     f3e:	3a f0       	brmi	.+14     	; 0xf4e <__divsf3_pse+0x70>
     f40:	9e 3f       	cpi	r25, 0xFE	; 254
     f42:	51 05       	cpc	r21, r1
     f44:	78 f0       	brcs	.+30     	; 0xf64 <__divsf3_pse+0x86>
     f46:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>
     f4a:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>
     f4e:	5f 3f       	cpi	r21, 0xFF	; 255
     f50:	e4 f3       	brlt	.-8      	; 0xf4a <__divsf3_pse+0x6c>
     f52:	98 3e       	cpi	r25, 0xE8	; 232
     f54:	d4 f3       	brlt	.-12     	; 0xf4a <__divsf3_pse+0x6c>
     f56:	86 95       	lsr	r24
     f58:	77 95       	ror	r23
     f5a:	67 95       	ror	r22
     f5c:	b7 95       	ror	r27
     f5e:	f7 95       	ror	r31
     f60:	9f 5f       	subi	r25, 0xFF	; 255
     f62:	c9 f7       	brne	.-14     	; 0xf56 <__divsf3_pse+0x78>
     f64:	88 0f       	add	r24, r24
     f66:	91 1d       	adc	r25, r1
     f68:	96 95       	lsr	r25
     f6a:	87 95       	ror	r24
     f6c:	97 f9       	bld	r25, 7
     f6e:	08 95       	ret
     f70:	e1 e0       	ldi	r30, 0x01	; 1
     f72:	66 0f       	add	r22, r22
     f74:	77 1f       	adc	r23, r23
     f76:	88 1f       	adc	r24, r24
     f78:	bb 1f       	adc	r27, r27
     f7a:	62 17       	cp	r22, r18
     f7c:	73 07       	cpc	r23, r19
     f7e:	84 07       	cpc	r24, r20
     f80:	ba 07       	cpc	r27, r26
     f82:	20 f0       	brcs	.+8      	; 0xf8c <__divsf3_pse+0xae>
     f84:	62 1b       	sub	r22, r18
     f86:	73 0b       	sbc	r23, r19
     f88:	84 0b       	sbc	r24, r20
     f8a:	ba 0b       	sbc	r27, r26
     f8c:	ee 1f       	adc	r30, r30
     f8e:	88 f7       	brcc	.-30     	; 0xf72 <__divsf3_pse+0x94>
     f90:	e0 95       	com	r30
     f92:	08 95       	ret

00000f94 <__fixunssfsi>:
     f94:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fp_splitA>
     f98:	88 f0       	brcs	.+34     	; 0xfbc <__fixunssfsi+0x28>
     f9a:	9f 57       	subi	r25, 0x7F	; 127
     f9c:	98 f0       	brcs	.+38     	; 0xfc4 <__fixunssfsi+0x30>
     f9e:	b9 2f       	mov	r27, r25
     fa0:	99 27       	eor	r25, r25
     fa2:	b7 51       	subi	r27, 0x17	; 23
     fa4:	b0 f0       	brcs	.+44     	; 0xfd2 <__fixunssfsi+0x3e>
     fa6:	e1 f0       	breq	.+56     	; 0xfe0 <__fixunssfsi+0x4c>
     fa8:	66 0f       	add	r22, r22
     faa:	77 1f       	adc	r23, r23
     fac:	88 1f       	adc	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	1a f0       	brmi	.+6      	; 0xfb8 <__fixunssfsi+0x24>
     fb2:	ba 95       	dec	r27
     fb4:	c9 f7       	brne	.-14     	; 0xfa8 <__fixunssfsi+0x14>
     fb6:	14 c0       	rjmp	.+40     	; 0xfe0 <__fixunssfsi+0x4c>
     fb8:	b1 30       	cpi	r27, 0x01	; 1
     fba:	91 f0       	breq	.+36     	; 0xfe0 <__fixunssfsi+0x4c>
     fbc:	0e 94 a4 08 	call	0x1148	; 0x1148 <__fp_zero>
     fc0:	b1 e0       	ldi	r27, 0x01	; 1
     fc2:	08 95       	ret
     fc4:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_zero>
     fc8:	67 2f       	mov	r22, r23
     fca:	78 2f       	mov	r23, r24
     fcc:	88 27       	eor	r24, r24
     fce:	b8 5f       	subi	r27, 0xF8	; 248
     fd0:	39 f0       	breq	.+14     	; 0xfe0 <__fixunssfsi+0x4c>
     fd2:	b9 3f       	cpi	r27, 0xF9	; 249
     fd4:	cc f3       	brlt	.-14     	; 0xfc8 <__fixunssfsi+0x34>
     fd6:	86 95       	lsr	r24
     fd8:	77 95       	ror	r23
     fda:	67 95       	ror	r22
     fdc:	b3 95       	inc	r27
     fde:	d9 f7       	brne	.-10     	; 0xfd6 <__fixunssfsi+0x42>
     fe0:	3e f4       	brtc	.+14     	; 0xff0 <__fixunssfsi+0x5c>
     fe2:	90 95       	com	r25
     fe4:	80 95       	com	r24
     fe6:	70 95       	com	r23
     fe8:	61 95       	neg	r22
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__floatunsisf>:
     ff2:	e8 94       	clt
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <__floatsisf+0x12>

00000ff6 <__floatsisf>:
     ff6:	97 fb       	bst	r25, 7
     ff8:	3e f4       	brtc	.+14     	; 0x1008 <__floatsisf+0x12>
     ffa:	90 95       	com	r25
     ffc:	80 95       	com	r24
     ffe:	70 95       	com	r23
    1000:	61 95       	neg	r22
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	8f 4f       	sbci	r24, 0xFF	; 255
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	99 23       	and	r25, r25
    100a:	a9 f0       	breq	.+42     	; 0x1036 <__floatsisf+0x40>
    100c:	f9 2f       	mov	r31, r25
    100e:	96 e9       	ldi	r25, 0x96	; 150
    1010:	bb 27       	eor	r27, r27
    1012:	93 95       	inc	r25
    1014:	f6 95       	lsr	r31
    1016:	87 95       	ror	r24
    1018:	77 95       	ror	r23
    101a:	67 95       	ror	r22
    101c:	b7 95       	ror	r27
    101e:	f1 11       	cpse	r31, r1
    1020:	f8 cf       	rjmp	.-16     	; 0x1012 <__floatsisf+0x1c>
    1022:	fa f4       	brpl	.+62     	; 0x1062 <__floatsisf+0x6c>
    1024:	bb 0f       	add	r27, r27
    1026:	11 f4       	brne	.+4      	; 0x102c <__floatsisf+0x36>
    1028:	60 ff       	sbrs	r22, 0
    102a:	1b c0       	rjmp	.+54     	; 0x1062 <__floatsisf+0x6c>
    102c:	6f 5f       	subi	r22, 0xFF	; 255
    102e:	7f 4f       	sbci	r23, 0xFF	; 255
    1030:	8f 4f       	sbci	r24, 0xFF	; 255
    1032:	9f 4f       	sbci	r25, 0xFF	; 255
    1034:	16 c0       	rjmp	.+44     	; 0x1062 <__floatsisf+0x6c>
    1036:	88 23       	and	r24, r24
    1038:	11 f0       	breq	.+4      	; 0x103e <__floatsisf+0x48>
    103a:	96 e9       	ldi	r25, 0x96	; 150
    103c:	11 c0       	rjmp	.+34     	; 0x1060 <__floatsisf+0x6a>
    103e:	77 23       	and	r23, r23
    1040:	21 f0       	breq	.+8      	; 0x104a <__floatsisf+0x54>
    1042:	9e e8       	ldi	r25, 0x8E	; 142
    1044:	87 2f       	mov	r24, r23
    1046:	76 2f       	mov	r23, r22
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <__floatsisf+0x5e>
    104a:	66 23       	and	r22, r22
    104c:	71 f0       	breq	.+28     	; 0x106a <__floatsisf+0x74>
    104e:	96 e8       	ldi	r25, 0x86	; 134
    1050:	86 2f       	mov	r24, r22
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	2a f0       	brmi	.+10     	; 0x1062 <__floatsisf+0x6c>
    1058:	9a 95       	dec	r25
    105a:	66 0f       	add	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	88 1f       	adc	r24, r24
    1060:	da f7       	brpl	.-10     	; 0x1058 <__floatsisf+0x62>
    1062:	88 0f       	add	r24, r24
    1064:	96 95       	lsr	r25
    1066:	87 95       	ror	r24
    1068:	97 f9       	bld	r25, 7
    106a:	08 95       	ret

0000106c <__fp_cmp>:
    106c:	99 0f       	add	r25, r25
    106e:	00 08       	sbc	r0, r0
    1070:	55 0f       	add	r21, r21
    1072:	aa 0b       	sbc	r26, r26
    1074:	e0 e8       	ldi	r30, 0x80	; 128
    1076:	fe ef       	ldi	r31, 0xFE	; 254
    1078:	16 16       	cp	r1, r22
    107a:	17 06       	cpc	r1, r23
    107c:	e8 07       	cpc	r30, r24
    107e:	f9 07       	cpc	r31, r25
    1080:	c0 f0       	brcs	.+48     	; 0x10b2 <__fp_cmp+0x46>
    1082:	12 16       	cp	r1, r18
    1084:	13 06       	cpc	r1, r19
    1086:	e4 07       	cpc	r30, r20
    1088:	f5 07       	cpc	r31, r21
    108a:	98 f0       	brcs	.+38     	; 0x10b2 <__fp_cmp+0x46>
    108c:	62 1b       	sub	r22, r18
    108e:	73 0b       	sbc	r23, r19
    1090:	84 0b       	sbc	r24, r20
    1092:	95 0b       	sbc	r25, r21
    1094:	39 f4       	brne	.+14     	; 0x10a4 <__fp_cmp+0x38>
    1096:	0a 26       	eor	r0, r26
    1098:	61 f0       	breq	.+24     	; 0x10b2 <__fp_cmp+0x46>
    109a:	23 2b       	or	r18, r19
    109c:	24 2b       	or	r18, r20
    109e:	25 2b       	or	r18, r21
    10a0:	21 f4       	brne	.+8      	; 0x10aa <__fp_cmp+0x3e>
    10a2:	08 95       	ret
    10a4:	0a 26       	eor	r0, r26
    10a6:	09 f4       	brne	.+2      	; 0x10aa <__fp_cmp+0x3e>
    10a8:	a1 40       	sbci	r26, 0x01	; 1
    10aa:	a6 95       	lsr	r26
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	81 1d       	adc	r24, r1
    10b0:	81 1d       	adc	r24, r1
    10b2:	08 95       	ret

000010b4 <__fp_inf>:
    10b4:	97 f9       	bld	r25, 7
    10b6:	9f 67       	ori	r25, 0x7F	; 127
    10b8:	80 e8       	ldi	r24, 0x80	; 128
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	08 95       	ret

000010c0 <__fp_nan>:
    10c0:	9f ef       	ldi	r25, 0xFF	; 255
    10c2:	80 ec       	ldi	r24, 0xC0	; 192
    10c4:	08 95       	ret

000010c6 <__fp_pscA>:
    10c6:	00 24       	eor	r0, r0
    10c8:	0a 94       	dec	r0
    10ca:	16 16       	cp	r1, r22
    10cc:	17 06       	cpc	r1, r23
    10ce:	18 06       	cpc	r1, r24
    10d0:	09 06       	cpc	r0, r25
    10d2:	08 95       	ret

000010d4 <__fp_pscB>:
    10d4:	00 24       	eor	r0, r0
    10d6:	0a 94       	dec	r0
    10d8:	12 16       	cp	r1, r18
    10da:	13 06       	cpc	r1, r19
    10dc:	14 06       	cpc	r1, r20
    10de:	05 06       	cpc	r0, r21
    10e0:	08 95       	ret

000010e2 <__fp_round>:
    10e2:	09 2e       	mov	r0, r25
    10e4:	03 94       	inc	r0
    10e6:	00 0c       	add	r0, r0
    10e8:	11 f4       	brne	.+4      	; 0x10ee <__fp_round+0xc>
    10ea:	88 23       	and	r24, r24
    10ec:	52 f0       	brmi	.+20     	; 0x1102 <__fp_round+0x20>
    10ee:	bb 0f       	add	r27, r27
    10f0:	40 f4       	brcc	.+16     	; 0x1102 <__fp_round+0x20>
    10f2:	bf 2b       	or	r27, r31
    10f4:	11 f4       	brne	.+4      	; 0x10fa <__fp_round+0x18>
    10f6:	60 ff       	sbrs	r22, 0
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <__fp_round+0x20>
    10fa:	6f 5f       	subi	r22, 0xFF	; 255
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1100:	9f 4f       	sbci	r25, 0xFF	; 255
    1102:	08 95       	ret

00001104 <__fp_split3>:
    1104:	57 fd       	sbrc	r21, 7
    1106:	90 58       	subi	r25, 0x80	; 128
    1108:	44 0f       	add	r20, r20
    110a:	55 1f       	adc	r21, r21
    110c:	59 f0       	breq	.+22     	; 0x1124 <__fp_splitA+0x10>
    110e:	5f 3f       	cpi	r21, 0xFF	; 255
    1110:	71 f0       	breq	.+28     	; 0x112e <__fp_splitA+0x1a>
    1112:	47 95       	ror	r20

00001114 <__fp_splitA>:
    1114:	88 0f       	add	r24, r24
    1116:	97 fb       	bst	r25, 7
    1118:	99 1f       	adc	r25, r25
    111a:	61 f0       	breq	.+24     	; 0x1134 <__fp_splitA+0x20>
    111c:	9f 3f       	cpi	r25, 0xFF	; 255
    111e:	79 f0       	breq	.+30     	; 0x113e <__fp_splitA+0x2a>
    1120:	87 95       	ror	r24
    1122:	08 95       	ret
    1124:	12 16       	cp	r1, r18
    1126:	13 06       	cpc	r1, r19
    1128:	14 06       	cpc	r1, r20
    112a:	55 1f       	adc	r21, r21
    112c:	f2 cf       	rjmp	.-28     	; 0x1112 <__fp_split3+0xe>
    112e:	46 95       	lsr	r20
    1130:	f1 df       	rcall	.-30     	; 0x1114 <__fp_splitA>
    1132:	08 c0       	rjmp	.+16     	; 0x1144 <__fp_splitA+0x30>
    1134:	16 16       	cp	r1, r22
    1136:	17 06       	cpc	r1, r23
    1138:	18 06       	cpc	r1, r24
    113a:	99 1f       	adc	r25, r25
    113c:	f1 cf       	rjmp	.-30     	; 0x1120 <__fp_splitA+0xc>
    113e:	86 95       	lsr	r24
    1140:	71 05       	cpc	r23, r1
    1142:	61 05       	cpc	r22, r1
    1144:	08 94       	sec
    1146:	08 95       	ret

00001148 <__fp_zero>:
    1148:	e8 94       	clt

0000114a <__fp_szero>:
    114a:	bb 27       	eor	r27, r27
    114c:	66 27       	eor	r22, r22
    114e:	77 27       	eor	r23, r23
    1150:	cb 01       	movw	r24, r22
    1152:	97 f9       	bld	r25, 7
    1154:	08 95       	ret

00001156 <__gesf2>:
    1156:	0e 94 36 08 	call	0x106c	; 0x106c <__fp_cmp>
    115a:	08 f4       	brcc	.+2      	; 0x115e <__gesf2+0x8>
    115c:	8f ef       	ldi	r24, 0xFF	; 255
    115e:	08 95       	ret

00001160 <__mulsf3>:
    1160:	0e 94 c3 08 	call	0x1186	; 0x1186 <__mulsf3x>
    1164:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__fp_round>
    1168:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__fp_pscA>
    116c:	38 f0       	brcs	.+14     	; 0x117c <__mulsf3+0x1c>
    116e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_pscB>
    1172:	20 f0       	brcs	.+8      	; 0x117c <__mulsf3+0x1c>
    1174:	95 23       	and	r25, r21
    1176:	11 f0       	breq	.+4      	; 0x117c <__mulsf3+0x1c>
    1178:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>
    117c:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_nan>
    1180:	11 24       	eor	r1, r1
    1182:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>

00001186 <__mulsf3x>:
    1186:	0e 94 82 08 	call	0x1104	; 0x1104 <__fp_split3>
    118a:	70 f3       	brcs	.-36     	; 0x1168 <__mulsf3+0x8>

0000118c <__mulsf3_pse>:
    118c:	95 9f       	mul	r25, r21
    118e:	c1 f3       	breq	.-16     	; 0x1180 <__mulsf3+0x20>
    1190:	95 0f       	add	r25, r21
    1192:	50 e0       	ldi	r21, 0x00	; 0
    1194:	55 1f       	adc	r21, r21
    1196:	62 9f       	mul	r22, r18
    1198:	f0 01       	movw	r30, r0
    119a:	72 9f       	mul	r23, r18
    119c:	bb 27       	eor	r27, r27
    119e:	f0 0d       	add	r31, r0
    11a0:	b1 1d       	adc	r27, r1
    11a2:	63 9f       	mul	r22, r19
    11a4:	aa 27       	eor	r26, r26
    11a6:	f0 0d       	add	r31, r0
    11a8:	b1 1d       	adc	r27, r1
    11aa:	aa 1f       	adc	r26, r26
    11ac:	64 9f       	mul	r22, r20
    11ae:	66 27       	eor	r22, r22
    11b0:	b0 0d       	add	r27, r0
    11b2:	a1 1d       	adc	r26, r1
    11b4:	66 1f       	adc	r22, r22
    11b6:	82 9f       	mul	r24, r18
    11b8:	22 27       	eor	r18, r18
    11ba:	b0 0d       	add	r27, r0
    11bc:	a1 1d       	adc	r26, r1
    11be:	62 1f       	adc	r22, r18
    11c0:	73 9f       	mul	r23, r19
    11c2:	b0 0d       	add	r27, r0
    11c4:	a1 1d       	adc	r26, r1
    11c6:	62 1f       	adc	r22, r18
    11c8:	83 9f       	mul	r24, r19
    11ca:	a0 0d       	add	r26, r0
    11cc:	61 1d       	adc	r22, r1
    11ce:	22 1f       	adc	r18, r18
    11d0:	74 9f       	mul	r23, r20
    11d2:	33 27       	eor	r19, r19
    11d4:	a0 0d       	add	r26, r0
    11d6:	61 1d       	adc	r22, r1
    11d8:	23 1f       	adc	r18, r19
    11da:	84 9f       	mul	r24, r20
    11dc:	60 0d       	add	r22, r0
    11de:	21 1d       	adc	r18, r1
    11e0:	82 2f       	mov	r24, r18
    11e2:	76 2f       	mov	r23, r22
    11e4:	6a 2f       	mov	r22, r26
    11e6:	11 24       	eor	r1, r1
    11e8:	9f 57       	subi	r25, 0x7F	; 127
    11ea:	50 40       	sbci	r21, 0x00	; 0
    11ec:	9a f0       	brmi	.+38     	; 0x1214 <__mulsf3_pse+0x88>
    11ee:	f1 f0       	breq	.+60     	; 0x122c <__mulsf3_pse+0xa0>
    11f0:	88 23       	and	r24, r24
    11f2:	4a f0       	brmi	.+18     	; 0x1206 <__mulsf3_pse+0x7a>
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	bb 1f       	adc	r27, r27
    11fa:	66 1f       	adc	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	88 1f       	adc	r24, r24
    1200:	91 50       	subi	r25, 0x01	; 1
    1202:	50 40       	sbci	r21, 0x00	; 0
    1204:	a9 f7       	brne	.-22     	; 0x11f0 <__mulsf3_pse+0x64>
    1206:	9e 3f       	cpi	r25, 0xFE	; 254
    1208:	51 05       	cpc	r21, r1
    120a:	80 f0       	brcs	.+32     	; 0x122c <__mulsf3_pse+0xa0>
    120c:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>
    1210:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>
    1214:	5f 3f       	cpi	r21, 0xFF	; 255
    1216:	e4 f3       	brlt	.-8      	; 0x1210 <__mulsf3_pse+0x84>
    1218:	98 3e       	cpi	r25, 0xE8	; 232
    121a:	d4 f3       	brlt	.-12     	; 0x1210 <__mulsf3_pse+0x84>
    121c:	86 95       	lsr	r24
    121e:	77 95       	ror	r23
    1220:	67 95       	ror	r22
    1222:	b7 95       	ror	r27
    1224:	f7 95       	ror	r31
    1226:	e7 95       	ror	r30
    1228:	9f 5f       	subi	r25, 0xFF	; 255
    122a:	c1 f7       	brne	.-16     	; 0x121c <__mulsf3_pse+0x90>
    122c:	fe 2b       	or	r31, r30
    122e:	88 0f       	add	r24, r24
    1230:	91 1d       	adc	r25, r1
    1232:	96 95       	lsr	r25
    1234:	87 95       	ror	r24
    1236:	97 f9       	bld	r25, 7
    1238:	08 95       	ret

0000123a <__udivmodsi4>:
    123a:	a1 e2       	ldi	r26, 0x21	; 33
    123c:	1a 2e       	mov	r1, r26
    123e:	aa 1b       	sub	r26, r26
    1240:	bb 1b       	sub	r27, r27
    1242:	fd 01       	movw	r30, r26
    1244:	0d c0       	rjmp	.+26     	; 0x1260 <__udivmodsi4_ep>

00001246 <__udivmodsi4_loop>:
    1246:	aa 1f       	adc	r26, r26
    1248:	bb 1f       	adc	r27, r27
    124a:	ee 1f       	adc	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	a2 17       	cp	r26, r18
    1250:	b3 07       	cpc	r27, r19
    1252:	e4 07       	cpc	r30, r20
    1254:	f5 07       	cpc	r31, r21
    1256:	20 f0       	brcs	.+8      	; 0x1260 <__udivmodsi4_ep>
    1258:	a2 1b       	sub	r26, r18
    125a:	b3 0b       	sbc	r27, r19
    125c:	e4 0b       	sbc	r30, r20
    125e:	f5 0b       	sbc	r31, r21

00001260 <__udivmodsi4_ep>:
    1260:	66 1f       	adc	r22, r22
    1262:	77 1f       	adc	r23, r23
    1264:	88 1f       	adc	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	1a 94       	dec	r1
    126a:	69 f7       	brne	.-38     	; 0x1246 <__udivmodsi4_loop>
    126c:	60 95       	com	r22
    126e:	70 95       	com	r23
    1270:	80 95       	com	r24
    1272:	90 95       	com	r25
    1274:	9b 01       	movw	r18, r22
    1276:	ac 01       	movw	r20, r24
    1278:	bd 01       	movw	r22, r26
    127a:	cf 01       	movw	r24, r30
    127c:	08 95       	ret

0000127e <__tablejump2__>:
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	05 90       	lpm	r0, Z+
    1284:	f4 91       	lpm	r31, Z
    1286:	e0 2d       	mov	r30, r0
    1288:	09 94       	ijmp

0000128a <sprintf>:
    128a:	ae e0       	ldi	r26, 0x0E	; 14
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	eb e4       	ldi	r30, 0x4B	; 75
    1290:	f9 e0       	ldi	r31, 0x09	; 9
    1292:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__prologue_saves__+0x1c>
    1296:	0d 89       	ldd	r16, Y+21	; 0x15
    1298:	1e 89       	ldd	r17, Y+22	; 0x16
    129a:	86 e0       	ldi	r24, 0x06	; 6
    129c:	8c 83       	std	Y+4, r24	; 0x04
    129e:	1a 83       	std	Y+2, r17	; 0x02
    12a0:	09 83       	std	Y+1, r16	; 0x01
    12a2:	8f ef       	ldi	r24, 0xFF	; 255
    12a4:	9f e7       	ldi	r25, 0x7F	; 127
    12a6:	9e 83       	std	Y+6, r25	; 0x06
    12a8:	8d 83       	std	Y+5, r24	; 0x05
    12aa:	ae 01       	movw	r20, r28
    12ac:	47 5e       	subi	r20, 0xE7	; 231
    12ae:	5f 4f       	sbci	r21, 0xFF	; 255
    12b0:	6f 89       	ldd	r22, Y+23	; 0x17
    12b2:	78 8d       	ldd	r23, Y+24	; 0x18
    12b4:	ce 01       	movw	r24, r28
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	0e 94 67 09 	call	0x12ce	; 0x12ce <vfprintf>
    12bc:	ef 81       	ldd	r30, Y+7	; 0x07
    12be:	f8 85       	ldd	r31, Y+8	; 0x08
    12c0:	e0 0f       	add	r30, r16
    12c2:	f1 1f       	adc	r31, r17
    12c4:	10 82       	st	Z, r1
    12c6:	2e 96       	adiw	r28, 0x0e	; 14
    12c8:	e4 e0       	ldi	r30, 0x04	; 4
    12ca:	0c 94 22 0c 	jmp	0x1844	; 0x1844 <__epilogue_restores__+0x1c>

000012ce <vfprintf>:
    12ce:	ab e0       	ldi	r26, 0x0B	; 11
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	ed e6       	ldi	r30, 0x6D	; 109
    12d4:	f9 e0       	ldi	r31, 0x09	; 9
    12d6:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__prologue_saves__>
    12da:	6c 01       	movw	r12, r24
    12dc:	7b 01       	movw	r14, r22
    12de:	8a 01       	movw	r16, r20
    12e0:	fc 01       	movw	r30, r24
    12e2:	17 82       	std	Z+7, r1	; 0x07
    12e4:	16 82       	std	Z+6, r1	; 0x06
    12e6:	83 81       	ldd	r24, Z+3	; 0x03
    12e8:	81 ff       	sbrs	r24, 1
    12ea:	cc c1       	rjmp	.+920    	; 0x1684 <vfprintf+0x3b6>
    12ec:	ce 01       	movw	r24, r28
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	3c 01       	movw	r6, r24
    12f2:	f6 01       	movw	r30, r12
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	f7 01       	movw	r30, r14
    12f8:	93 fd       	sbrc	r25, 3
    12fa:	85 91       	lpm	r24, Z+
    12fc:	93 ff       	sbrs	r25, 3
    12fe:	81 91       	ld	r24, Z+
    1300:	7f 01       	movw	r14, r30
    1302:	88 23       	and	r24, r24
    1304:	09 f4       	brne	.+2      	; 0x1308 <vfprintf+0x3a>
    1306:	ba c1       	rjmp	.+884    	; 0x167c <vfprintf+0x3ae>
    1308:	85 32       	cpi	r24, 0x25	; 37
    130a:	39 f4       	brne	.+14     	; 0x131a <vfprintf+0x4c>
    130c:	93 fd       	sbrc	r25, 3
    130e:	85 91       	lpm	r24, Z+
    1310:	93 ff       	sbrs	r25, 3
    1312:	81 91       	ld	r24, Z+
    1314:	7f 01       	movw	r14, r30
    1316:	85 32       	cpi	r24, 0x25	; 37
    1318:	29 f4       	brne	.+10     	; 0x1324 <vfprintf+0x56>
    131a:	b6 01       	movw	r22, r12
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <fputc>
    1322:	e7 cf       	rjmp	.-50     	; 0x12f2 <vfprintf+0x24>
    1324:	91 2c       	mov	r9, r1
    1326:	21 2c       	mov	r2, r1
    1328:	31 2c       	mov	r3, r1
    132a:	ff e1       	ldi	r31, 0x1F	; 31
    132c:	f3 15       	cp	r31, r3
    132e:	d8 f0       	brcs	.+54     	; 0x1366 <vfprintf+0x98>
    1330:	8b 32       	cpi	r24, 0x2B	; 43
    1332:	79 f0       	breq	.+30     	; 0x1352 <vfprintf+0x84>
    1334:	38 f4       	brcc	.+14     	; 0x1344 <vfprintf+0x76>
    1336:	80 32       	cpi	r24, 0x20	; 32
    1338:	79 f0       	breq	.+30     	; 0x1358 <vfprintf+0x8a>
    133a:	83 32       	cpi	r24, 0x23	; 35
    133c:	a1 f4       	brne	.+40     	; 0x1366 <vfprintf+0x98>
    133e:	23 2d       	mov	r18, r3
    1340:	20 61       	ori	r18, 0x10	; 16
    1342:	1d c0       	rjmp	.+58     	; 0x137e <vfprintf+0xb0>
    1344:	8d 32       	cpi	r24, 0x2D	; 45
    1346:	61 f0       	breq	.+24     	; 0x1360 <vfprintf+0x92>
    1348:	80 33       	cpi	r24, 0x30	; 48
    134a:	69 f4       	brne	.+26     	; 0x1366 <vfprintf+0x98>
    134c:	23 2d       	mov	r18, r3
    134e:	21 60       	ori	r18, 0x01	; 1
    1350:	16 c0       	rjmp	.+44     	; 0x137e <vfprintf+0xb0>
    1352:	83 2d       	mov	r24, r3
    1354:	82 60       	ori	r24, 0x02	; 2
    1356:	38 2e       	mov	r3, r24
    1358:	e3 2d       	mov	r30, r3
    135a:	e4 60       	ori	r30, 0x04	; 4
    135c:	3e 2e       	mov	r3, r30
    135e:	2a c0       	rjmp	.+84     	; 0x13b4 <vfprintf+0xe6>
    1360:	f3 2d       	mov	r31, r3
    1362:	f8 60       	ori	r31, 0x08	; 8
    1364:	1d c0       	rjmp	.+58     	; 0x13a0 <vfprintf+0xd2>
    1366:	37 fc       	sbrc	r3, 7
    1368:	2d c0       	rjmp	.+90     	; 0x13c4 <vfprintf+0xf6>
    136a:	20 ed       	ldi	r18, 0xD0	; 208
    136c:	28 0f       	add	r18, r24
    136e:	2a 30       	cpi	r18, 0x0A	; 10
    1370:	40 f0       	brcs	.+16     	; 0x1382 <vfprintf+0xb4>
    1372:	8e 32       	cpi	r24, 0x2E	; 46
    1374:	b9 f4       	brne	.+46     	; 0x13a4 <vfprintf+0xd6>
    1376:	36 fc       	sbrc	r3, 6
    1378:	81 c1       	rjmp	.+770    	; 0x167c <vfprintf+0x3ae>
    137a:	23 2d       	mov	r18, r3
    137c:	20 64       	ori	r18, 0x40	; 64
    137e:	32 2e       	mov	r3, r18
    1380:	19 c0       	rjmp	.+50     	; 0x13b4 <vfprintf+0xe6>
    1382:	36 fe       	sbrs	r3, 6
    1384:	06 c0       	rjmp	.+12     	; 0x1392 <vfprintf+0xc4>
    1386:	8a e0       	ldi	r24, 0x0A	; 10
    1388:	98 9e       	mul	r9, r24
    138a:	20 0d       	add	r18, r0
    138c:	11 24       	eor	r1, r1
    138e:	92 2e       	mov	r9, r18
    1390:	11 c0       	rjmp	.+34     	; 0x13b4 <vfprintf+0xe6>
    1392:	ea e0       	ldi	r30, 0x0A	; 10
    1394:	2e 9e       	mul	r2, r30
    1396:	20 0d       	add	r18, r0
    1398:	11 24       	eor	r1, r1
    139a:	22 2e       	mov	r2, r18
    139c:	f3 2d       	mov	r31, r3
    139e:	f0 62       	ori	r31, 0x20	; 32
    13a0:	3f 2e       	mov	r3, r31
    13a2:	08 c0       	rjmp	.+16     	; 0x13b4 <vfprintf+0xe6>
    13a4:	8c 36       	cpi	r24, 0x6C	; 108
    13a6:	21 f4       	brne	.+8      	; 0x13b0 <vfprintf+0xe2>
    13a8:	83 2d       	mov	r24, r3
    13aa:	80 68       	ori	r24, 0x80	; 128
    13ac:	38 2e       	mov	r3, r24
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <vfprintf+0xe6>
    13b0:	88 36       	cpi	r24, 0x68	; 104
    13b2:	41 f4       	brne	.+16     	; 0x13c4 <vfprintf+0xf6>
    13b4:	f7 01       	movw	r30, r14
    13b6:	93 fd       	sbrc	r25, 3
    13b8:	85 91       	lpm	r24, Z+
    13ba:	93 ff       	sbrs	r25, 3
    13bc:	81 91       	ld	r24, Z+
    13be:	7f 01       	movw	r14, r30
    13c0:	81 11       	cpse	r24, r1
    13c2:	b3 cf       	rjmp	.-154    	; 0x132a <vfprintf+0x5c>
    13c4:	98 2f       	mov	r25, r24
    13c6:	9f 7d       	andi	r25, 0xDF	; 223
    13c8:	95 54       	subi	r25, 0x45	; 69
    13ca:	93 30       	cpi	r25, 0x03	; 3
    13cc:	28 f4       	brcc	.+10     	; 0x13d8 <vfprintf+0x10a>
    13ce:	0c 5f       	subi	r16, 0xFC	; 252
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
    13d2:	9f e3       	ldi	r25, 0x3F	; 63
    13d4:	99 83       	std	Y+1, r25	; 0x01
    13d6:	0d c0       	rjmp	.+26     	; 0x13f2 <vfprintf+0x124>
    13d8:	83 36       	cpi	r24, 0x63	; 99
    13da:	31 f0       	breq	.+12     	; 0x13e8 <vfprintf+0x11a>
    13dc:	83 37       	cpi	r24, 0x73	; 115
    13de:	71 f0       	breq	.+28     	; 0x13fc <vfprintf+0x12e>
    13e0:	83 35       	cpi	r24, 0x53	; 83
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <vfprintf+0x118>
    13e4:	59 c0       	rjmp	.+178    	; 0x1498 <vfprintf+0x1ca>
    13e6:	21 c0       	rjmp	.+66     	; 0x142a <vfprintf+0x15c>
    13e8:	f8 01       	movw	r30, r16
    13ea:	80 81       	ld	r24, Z
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	0e 5f       	subi	r16, 0xFE	; 254
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
    13f2:	88 24       	eor	r8, r8
    13f4:	83 94       	inc	r8
    13f6:	91 2c       	mov	r9, r1
    13f8:	53 01       	movw	r10, r6
    13fa:	13 c0       	rjmp	.+38     	; 0x1422 <vfprintf+0x154>
    13fc:	28 01       	movw	r4, r16
    13fe:	f2 e0       	ldi	r31, 0x02	; 2
    1400:	4f 0e       	add	r4, r31
    1402:	51 1c       	adc	r5, r1
    1404:	f8 01       	movw	r30, r16
    1406:	a0 80       	ld	r10, Z
    1408:	b1 80       	ldd	r11, Z+1	; 0x01
    140a:	36 fe       	sbrs	r3, 6
    140c:	03 c0       	rjmp	.+6      	; 0x1414 <vfprintf+0x146>
    140e:	69 2d       	mov	r22, r9
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <vfprintf+0x14a>
    1414:	6f ef       	ldi	r22, 0xFF	; 255
    1416:	7f ef       	ldi	r23, 0xFF	; 255
    1418:	c5 01       	movw	r24, r10
    141a:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <strnlen>
    141e:	4c 01       	movw	r8, r24
    1420:	82 01       	movw	r16, r4
    1422:	f3 2d       	mov	r31, r3
    1424:	ff 77       	andi	r31, 0x7F	; 127
    1426:	3f 2e       	mov	r3, r31
    1428:	16 c0       	rjmp	.+44     	; 0x1456 <vfprintf+0x188>
    142a:	28 01       	movw	r4, r16
    142c:	22 e0       	ldi	r18, 0x02	; 2
    142e:	42 0e       	add	r4, r18
    1430:	51 1c       	adc	r5, r1
    1432:	f8 01       	movw	r30, r16
    1434:	a0 80       	ld	r10, Z
    1436:	b1 80       	ldd	r11, Z+1	; 0x01
    1438:	36 fe       	sbrs	r3, 6
    143a:	03 c0       	rjmp	.+6      	; 0x1442 <vfprintf+0x174>
    143c:	69 2d       	mov	r22, r9
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <vfprintf+0x178>
    1442:	6f ef       	ldi	r22, 0xFF	; 255
    1444:	7f ef       	ldi	r23, 0xFF	; 255
    1446:	c5 01       	movw	r24, r10
    1448:	0e 94 48 0b 	call	0x1690	; 0x1690 <strnlen_P>
    144c:	4c 01       	movw	r8, r24
    144e:	f3 2d       	mov	r31, r3
    1450:	f0 68       	ori	r31, 0x80	; 128
    1452:	3f 2e       	mov	r3, r31
    1454:	82 01       	movw	r16, r4
    1456:	33 fc       	sbrc	r3, 3
    1458:	1b c0       	rjmp	.+54     	; 0x1490 <vfprintf+0x1c2>
    145a:	82 2d       	mov	r24, r2
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	88 16       	cp	r8, r24
    1460:	99 06       	cpc	r9, r25
    1462:	b0 f4       	brcc	.+44     	; 0x1490 <vfprintf+0x1c2>
    1464:	b6 01       	movw	r22, r12
    1466:	80 e2       	ldi	r24, 0x20	; 32
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <fputc>
    146e:	2a 94       	dec	r2
    1470:	f4 cf       	rjmp	.-24     	; 0x145a <vfprintf+0x18c>
    1472:	f5 01       	movw	r30, r10
    1474:	37 fc       	sbrc	r3, 7
    1476:	85 91       	lpm	r24, Z+
    1478:	37 fe       	sbrs	r3, 7
    147a:	81 91       	ld	r24, Z+
    147c:	5f 01       	movw	r10, r30
    147e:	b6 01       	movw	r22, r12
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <fputc>
    1486:	21 10       	cpse	r2, r1
    1488:	2a 94       	dec	r2
    148a:	21 e0       	ldi	r18, 0x01	; 1
    148c:	82 1a       	sub	r8, r18
    148e:	91 08       	sbc	r9, r1
    1490:	81 14       	cp	r8, r1
    1492:	91 04       	cpc	r9, r1
    1494:	71 f7       	brne	.-36     	; 0x1472 <vfprintf+0x1a4>
    1496:	e8 c0       	rjmp	.+464    	; 0x1668 <vfprintf+0x39a>
    1498:	84 36       	cpi	r24, 0x64	; 100
    149a:	11 f0       	breq	.+4      	; 0x14a0 <vfprintf+0x1d2>
    149c:	89 36       	cpi	r24, 0x69	; 105
    149e:	41 f5       	brne	.+80     	; 0x14f0 <vfprintf+0x222>
    14a0:	f8 01       	movw	r30, r16
    14a2:	37 fe       	sbrs	r3, 7
    14a4:	07 c0       	rjmp	.+14     	; 0x14b4 <vfprintf+0x1e6>
    14a6:	60 81       	ld	r22, Z
    14a8:	71 81       	ldd	r23, Z+1	; 0x01
    14aa:	82 81       	ldd	r24, Z+2	; 0x02
    14ac:	93 81       	ldd	r25, Z+3	; 0x03
    14ae:	0c 5f       	subi	r16, 0xFC	; 252
    14b0:	1f 4f       	sbci	r17, 0xFF	; 255
    14b2:	08 c0       	rjmp	.+16     	; 0x14c4 <vfprintf+0x1f6>
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	07 2e       	mov	r0, r23
    14ba:	00 0c       	add	r0, r0
    14bc:	88 0b       	sbc	r24, r24
    14be:	99 0b       	sbc	r25, r25
    14c0:	0e 5f       	subi	r16, 0xFE	; 254
    14c2:	1f 4f       	sbci	r17, 0xFF	; 255
    14c4:	f3 2d       	mov	r31, r3
    14c6:	ff 76       	andi	r31, 0x6F	; 111
    14c8:	3f 2e       	mov	r3, r31
    14ca:	97 ff       	sbrs	r25, 7
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <vfprintf+0x212>
    14ce:	90 95       	com	r25
    14d0:	80 95       	com	r24
    14d2:	70 95       	com	r23
    14d4:	61 95       	neg	r22
    14d6:	7f 4f       	sbci	r23, 0xFF	; 255
    14d8:	8f 4f       	sbci	r24, 0xFF	; 255
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	f0 68       	ori	r31, 0x80	; 128
    14de:	3f 2e       	mov	r3, r31
    14e0:	2a e0       	ldi	r18, 0x0A	; 10
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	a3 01       	movw	r20, r6
    14e6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__ultoa_invert>
    14ea:	88 2e       	mov	r8, r24
    14ec:	86 18       	sub	r8, r6
    14ee:	45 c0       	rjmp	.+138    	; 0x157a <vfprintf+0x2ac>
    14f0:	85 37       	cpi	r24, 0x75	; 117
    14f2:	31 f4       	brne	.+12     	; 0x1500 <vfprintf+0x232>
    14f4:	23 2d       	mov	r18, r3
    14f6:	2f 7e       	andi	r18, 0xEF	; 239
    14f8:	b2 2e       	mov	r11, r18
    14fa:	2a e0       	ldi	r18, 0x0A	; 10
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	25 c0       	rjmp	.+74     	; 0x154a <vfprintf+0x27c>
    1500:	93 2d       	mov	r25, r3
    1502:	99 7f       	andi	r25, 0xF9	; 249
    1504:	b9 2e       	mov	r11, r25
    1506:	8f 36       	cpi	r24, 0x6F	; 111
    1508:	c1 f0       	breq	.+48     	; 0x153a <vfprintf+0x26c>
    150a:	18 f4       	brcc	.+6      	; 0x1512 <vfprintf+0x244>
    150c:	88 35       	cpi	r24, 0x58	; 88
    150e:	79 f0       	breq	.+30     	; 0x152e <vfprintf+0x260>
    1510:	b5 c0       	rjmp	.+362    	; 0x167c <vfprintf+0x3ae>
    1512:	80 37       	cpi	r24, 0x70	; 112
    1514:	19 f0       	breq	.+6      	; 0x151c <vfprintf+0x24e>
    1516:	88 37       	cpi	r24, 0x78	; 120
    1518:	21 f0       	breq	.+8      	; 0x1522 <vfprintf+0x254>
    151a:	b0 c0       	rjmp	.+352    	; 0x167c <vfprintf+0x3ae>
    151c:	e9 2f       	mov	r30, r25
    151e:	e0 61       	ori	r30, 0x10	; 16
    1520:	be 2e       	mov	r11, r30
    1522:	b4 fe       	sbrs	r11, 4
    1524:	0d c0       	rjmp	.+26     	; 0x1540 <vfprintf+0x272>
    1526:	fb 2d       	mov	r31, r11
    1528:	f4 60       	ori	r31, 0x04	; 4
    152a:	bf 2e       	mov	r11, r31
    152c:	09 c0       	rjmp	.+18     	; 0x1540 <vfprintf+0x272>
    152e:	34 fe       	sbrs	r3, 4
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <vfprintf+0x278>
    1532:	29 2f       	mov	r18, r25
    1534:	26 60       	ori	r18, 0x06	; 6
    1536:	b2 2e       	mov	r11, r18
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <vfprintf+0x278>
    153a:	28 e0       	ldi	r18, 0x08	; 8
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	05 c0       	rjmp	.+10     	; 0x154a <vfprintf+0x27c>
    1540:	20 e1       	ldi	r18, 0x10	; 16
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <vfprintf+0x27c>
    1546:	20 e1       	ldi	r18, 0x10	; 16
    1548:	32 e0       	ldi	r19, 0x02	; 2
    154a:	f8 01       	movw	r30, r16
    154c:	b7 fe       	sbrs	r11, 7
    154e:	07 c0       	rjmp	.+14     	; 0x155e <vfprintf+0x290>
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	0c 5f       	subi	r16, 0xFC	; 252
    155a:	1f 4f       	sbci	r17, 0xFF	; 255
    155c:	06 c0       	rjmp	.+12     	; 0x156a <vfprintf+0x29c>
    155e:	60 81       	ld	r22, Z
    1560:	71 81       	ldd	r23, Z+1	; 0x01
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 5f       	subi	r16, 0xFE	; 254
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	a3 01       	movw	r20, r6
    156c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__ultoa_invert>
    1570:	88 2e       	mov	r8, r24
    1572:	86 18       	sub	r8, r6
    1574:	fb 2d       	mov	r31, r11
    1576:	ff 77       	andi	r31, 0x7F	; 127
    1578:	3f 2e       	mov	r3, r31
    157a:	36 fe       	sbrs	r3, 6
    157c:	0d c0       	rjmp	.+26     	; 0x1598 <vfprintf+0x2ca>
    157e:	23 2d       	mov	r18, r3
    1580:	2e 7f       	andi	r18, 0xFE	; 254
    1582:	a2 2e       	mov	r10, r18
    1584:	89 14       	cp	r8, r9
    1586:	58 f4       	brcc	.+22     	; 0x159e <vfprintf+0x2d0>
    1588:	34 fe       	sbrs	r3, 4
    158a:	0b c0       	rjmp	.+22     	; 0x15a2 <vfprintf+0x2d4>
    158c:	32 fc       	sbrc	r3, 2
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <vfprintf+0x2d4>
    1590:	83 2d       	mov	r24, r3
    1592:	8e 7e       	andi	r24, 0xEE	; 238
    1594:	a8 2e       	mov	r10, r24
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <vfprintf+0x2d4>
    1598:	b8 2c       	mov	r11, r8
    159a:	a3 2c       	mov	r10, r3
    159c:	03 c0       	rjmp	.+6      	; 0x15a4 <vfprintf+0x2d6>
    159e:	b8 2c       	mov	r11, r8
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <vfprintf+0x2d6>
    15a2:	b9 2c       	mov	r11, r9
    15a4:	a4 fe       	sbrs	r10, 4
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <vfprintf+0x2f8>
    15a8:	fe 01       	movw	r30, r28
    15aa:	e8 0d       	add	r30, r8
    15ac:	f1 1d       	adc	r31, r1
    15ae:	80 81       	ld	r24, Z
    15b0:	80 33       	cpi	r24, 0x30	; 48
    15b2:	21 f4       	brne	.+8      	; 0x15bc <vfprintf+0x2ee>
    15b4:	9a 2d       	mov	r25, r10
    15b6:	99 7e       	andi	r25, 0xE9	; 233
    15b8:	a9 2e       	mov	r10, r25
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <vfprintf+0x300>
    15bc:	a2 fe       	sbrs	r10, 2
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <vfprintf+0x2fe>
    15c0:	b3 94       	inc	r11
    15c2:	b3 94       	inc	r11
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <vfprintf+0x300>
    15c6:	8a 2d       	mov	r24, r10
    15c8:	86 78       	andi	r24, 0x86	; 134
    15ca:	09 f0       	breq	.+2      	; 0x15ce <vfprintf+0x300>
    15cc:	b3 94       	inc	r11
    15ce:	a3 fc       	sbrc	r10, 3
    15d0:	11 c0       	rjmp	.+34     	; 0x15f4 <vfprintf+0x326>
    15d2:	a0 fe       	sbrs	r10, 0
    15d4:	06 c0       	rjmp	.+12     	; 0x15e2 <vfprintf+0x314>
    15d6:	b2 14       	cp	r11, r2
    15d8:	88 f4       	brcc	.+34     	; 0x15fc <vfprintf+0x32e>
    15da:	28 0c       	add	r2, r8
    15dc:	92 2c       	mov	r9, r2
    15de:	9b 18       	sub	r9, r11
    15e0:	0e c0       	rjmp	.+28     	; 0x15fe <vfprintf+0x330>
    15e2:	b2 14       	cp	r11, r2
    15e4:	60 f4       	brcc	.+24     	; 0x15fe <vfprintf+0x330>
    15e6:	b6 01       	movw	r22, r12
    15e8:	80 e2       	ldi	r24, 0x20	; 32
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <fputc>
    15f0:	b3 94       	inc	r11
    15f2:	f7 cf       	rjmp	.-18     	; 0x15e2 <vfprintf+0x314>
    15f4:	b2 14       	cp	r11, r2
    15f6:	18 f4       	brcc	.+6      	; 0x15fe <vfprintf+0x330>
    15f8:	2b 18       	sub	r2, r11
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <vfprintf+0x332>
    15fc:	98 2c       	mov	r9, r8
    15fe:	21 2c       	mov	r2, r1
    1600:	a4 fe       	sbrs	r10, 4
    1602:	10 c0       	rjmp	.+32     	; 0x1624 <vfprintf+0x356>
    1604:	b6 01       	movw	r22, r12
    1606:	80 e3       	ldi	r24, 0x30	; 48
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <fputc>
    160e:	a2 fe       	sbrs	r10, 2
    1610:	17 c0       	rjmp	.+46     	; 0x1640 <vfprintf+0x372>
    1612:	a1 fc       	sbrc	r10, 1
    1614:	03 c0       	rjmp	.+6      	; 0x161c <vfprintf+0x34e>
    1616:	88 e7       	ldi	r24, 0x78	; 120
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <vfprintf+0x352>
    161c:	88 e5       	ldi	r24, 0x58	; 88
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	b6 01       	movw	r22, r12
    1622:	0c c0       	rjmp	.+24     	; 0x163c <vfprintf+0x36e>
    1624:	8a 2d       	mov	r24, r10
    1626:	86 78       	andi	r24, 0x86	; 134
    1628:	59 f0       	breq	.+22     	; 0x1640 <vfprintf+0x372>
    162a:	a1 fe       	sbrs	r10, 1
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <vfprintf+0x364>
    162e:	8b e2       	ldi	r24, 0x2B	; 43
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <vfprintf+0x366>
    1632:	80 e2       	ldi	r24, 0x20	; 32
    1634:	a7 fc       	sbrc	r10, 7
    1636:	8d e2       	ldi	r24, 0x2D	; 45
    1638:	b6 01       	movw	r22, r12
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <fputc>
    1640:	89 14       	cp	r8, r9
    1642:	38 f4       	brcc	.+14     	; 0x1652 <vfprintf+0x384>
    1644:	b6 01       	movw	r22, r12
    1646:	80 e3       	ldi	r24, 0x30	; 48
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <fputc>
    164e:	9a 94       	dec	r9
    1650:	f7 cf       	rjmp	.-18     	; 0x1640 <vfprintf+0x372>
    1652:	8a 94       	dec	r8
    1654:	f3 01       	movw	r30, r6
    1656:	e8 0d       	add	r30, r8
    1658:	f1 1d       	adc	r31, r1
    165a:	80 81       	ld	r24, Z
    165c:	b6 01       	movw	r22, r12
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <fputc>
    1664:	81 10       	cpse	r8, r1
    1666:	f5 cf       	rjmp	.-22     	; 0x1652 <vfprintf+0x384>
    1668:	22 20       	and	r2, r2
    166a:	09 f4       	brne	.+2      	; 0x166e <vfprintf+0x3a0>
    166c:	42 ce       	rjmp	.-892    	; 0x12f2 <vfprintf+0x24>
    166e:	b6 01       	movw	r22, r12
    1670:	80 e2       	ldi	r24, 0x20	; 32
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <fputc>
    1678:	2a 94       	dec	r2
    167a:	f6 cf       	rjmp	.-20     	; 0x1668 <vfprintf+0x39a>
    167c:	f6 01       	movw	r30, r12
    167e:	86 81       	ldd	r24, Z+6	; 0x06
    1680:	97 81       	ldd	r25, Z+7	; 0x07
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <vfprintf+0x3ba>
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	9f ef       	ldi	r25, 0xFF	; 255
    1688:	2b 96       	adiw	r28, 0x0b	; 11
    168a:	e2 e1       	ldi	r30, 0x12	; 18
    168c:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <__epilogue_restores__>

00001690 <strnlen_P>:
    1690:	fc 01       	movw	r30, r24
    1692:	05 90       	lpm	r0, Z+
    1694:	61 50       	subi	r22, 0x01	; 1
    1696:	70 40       	sbci	r23, 0x00	; 0
    1698:	01 10       	cpse	r0, r1
    169a:	d8 f7       	brcc	.-10     	; 0x1692 <strnlen_P+0x2>
    169c:	80 95       	com	r24
    169e:	90 95       	com	r25
    16a0:	8e 0f       	add	r24, r30
    16a2:	9f 1f       	adc	r25, r31
    16a4:	08 95       	ret

000016a6 <strnlen>:
    16a6:	fc 01       	movw	r30, r24
    16a8:	61 50       	subi	r22, 0x01	; 1
    16aa:	70 40       	sbci	r23, 0x00	; 0
    16ac:	01 90       	ld	r0, Z+
    16ae:	01 10       	cpse	r0, r1
    16b0:	d8 f7       	brcc	.-10     	; 0x16a8 <strnlen+0x2>
    16b2:	80 95       	com	r24
    16b4:	90 95       	com	r25
    16b6:	8e 0f       	add	r24, r30
    16b8:	9f 1f       	adc	r25, r31
    16ba:	08 95       	ret

000016bc <fputc>:
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	fb 01       	movw	r30, r22
    16c6:	23 81       	ldd	r18, Z+3	; 0x03
    16c8:	21 fd       	sbrc	r18, 1
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <fputc+0x16>
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	9f ef       	ldi	r25, 0xFF	; 255
    16d0:	2c c0       	rjmp	.+88     	; 0x172a <fputc+0x6e>
    16d2:	22 ff       	sbrs	r18, 2
    16d4:	16 c0       	rjmp	.+44     	; 0x1702 <fputc+0x46>
    16d6:	46 81       	ldd	r20, Z+6	; 0x06
    16d8:	57 81       	ldd	r21, Z+7	; 0x07
    16da:	24 81       	ldd	r18, Z+4	; 0x04
    16dc:	35 81       	ldd	r19, Z+5	; 0x05
    16de:	42 17       	cp	r20, r18
    16e0:	53 07       	cpc	r21, r19
    16e2:	44 f4       	brge	.+16     	; 0x16f4 <fputc+0x38>
    16e4:	a0 81       	ld	r26, Z
    16e6:	b1 81       	ldd	r27, Z+1	; 0x01
    16e8:	9d 01       	movw	r18, r26
    16ea:	2f 5f       	subi	r18, 0xFF	; 255
    16ec:	3f 4f       	sbci	r19, 0xFF	; 255
    16ee:	31 83       	std	Z+1, r19	; 0x01
    16f0:	20 83       	st	Z, r18
    16f2:	8c 93       	st	X, r24
    16f4:	26 81       	ldd	r18, Z+6	; 0x06
    16f6:	37 81       	ldd	r19, Z+7	; 0x07
    16f8:	2f 5f       	subi	r18, 0xFF	; 255
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	37 83       	std	Z+7, r19	; 0x07
    16fe:	26 83       	std	Z+6, r18	; 0x06
    1700:	14 c0       	rjmp	.+40     	; 0x172a <fputc+0x6e>
    1702:	8b 01       	movw	r16, r22
    1704:	ec 01       	movw	r28, r24
    1706:	fb 01       	movw	r30, r22
    1708:	00 84       	ldd	r0, Z+8	; 0x08
    170a:	f1 85       	ldd	r31, Z+9	; 0x09
    170c:	e0 2d       	mov	r30, r0
    170e:	09 95       	icall
    1710:	89 2b       	or	r24, r25
    1712:	e1 f6       	brne	.-72     	; 0x16cc <fputc+0x10>
    1714:	d8 01       	movw	r26, r16
    1716:	16 96       	adiw	r26, 0x06	; 6
    1718:	8d 91       	ld	r24, X+
    171a:	9c 91       	ld	r25, X
    171c:	17 97       	sbiw	r26, 0x07	; 7
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	17 96       	adiw	r26, 0x07	; 7
    1722:	9c 93       	st	X, r25
    1724:	8e 93       	st	-X, r24
    1726:	16 97       	sbiw	r26, 0x06	; 6
    1728:	ce 01       	movw	r24, r28
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	08 95       	ret

00001734 <__ultoa_invert>:
    1734:	fa 01       	movw	r30, r20
    1736:	aa 27       	eor	r26, r26
    1738:	28 30       	cpi	r18, 0x08	; 8
    173a:	51 f1       	breq	.+84     	; 0x1790 <__ultoa_invert+0x5c>
    173c:	20 31       	cpi	r18, 0x10	; 16
    173e:	81 f1       	breq	.+96     	; 0x17a0 <__ultoa_invert+0x6c>
    1740:	e8 94       	clt
    1742:	6f 93       	push	r22
    1744:	6e 7f       	andi	r22, 0xFE	; 254
    1746:	6e 5f       	subi	r22, 0xFE	; 254
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	8f 4f       	sbci	r24, 0xFF	; 255
    174c:	9f 4f       	sbci	r25, 0xFF	; 255
    174e:	af 4f       	sbci	r26, 0xFF	; 255
    1750:	b1 e0       	ldi	r27, 0x01	; 1
    1752:	3e d0       	rcall	.+124    	; 0x17d0 <__ultoa_invert+0x9c>
    1754:	b4 e0       	ldi	r27, 0x04	; 4
    1756:	3c d0       	rcall	.+120    	; 0x17d0 <__ultoa_invert+0x9c>
    1758:	67 0f       	add	r22, r23
    175a:	78 1f       	adc	r23, r24
    175c:	89 1f       	adc	r24, r25
    175e:	9a 1f       	adc	r25, r26
    1760:	a1 1d       	adc	r26, r1
    1762:	68 0f       	add	r22, r24
    1764:	79 1f       	adc	r23, r25
    1766:	8a 1f       	adc	r24, r26
    1768:	91 1d       	adc	r25, r1
    176a:	a1 1d       	adc	r26, r1
    176c:	6a 0f       	add	r22, r26
    176e:	71 1d       	adc	r23, r1
    1770:	81 1d       	adc	r24, r1
    1772:	91 1d       	adc	r25, r1
    1774:	a1 1d       	adc	r26, r1
    1776:	20 d0       	rcall	.+64     	; 0x17b8 <__ultoa_invert+0x84>
    1778:	09 f4       	brne	.+2      	; 0x177c <__ultoa_invert+0x48>
    177a:	68 94       	set
    177c:	3f 91       	pop	r19
    177e:	2a e0       	ldi	r18, 0x0A	; 10
    1780:	26 9f       	mul	r18, r22
    1782:	11 24       	eor	r1, r1
    1784:	30 19       	sub	r19, r0
    1786:	30 5d       	subi	r19, 0xD0	; 208
    1788:	31 93       	st	Z+, r19
    178a:	de f6       	brtc	.-74     	; 0x1742 <__ultoa_invert+0xe>
    178c:	cf 01       	movw	r24, r30
    178e:	08 95       	ret
    1790:	46 2f       	mov	r20, r22
    1792:	47 70       	andi	r20, 0x07	; 7
    1794:	40 5d       	subi	r20, 0xD0	; 208
    1796:	41 93       	st	Z+, r20
    1798:	b3 e0       	ldi	r27, 0x03	; 3
    179a:	0f d0       	rcall	.+30     	; 0x17ba <__ultoa_invert+0x86>
    179c:	c9 f7       	brne	.-14     	; 0x1790 <__ultoa_invert+0x5c>
    179e:	f6 cf       	rjmp	.-20     	; 0x178c <__ultoa_invert+0x58>
    17a0:	46 2f       	mov	r20, r22
    17a2:	4f 70       	andi	r20, 0x0F	; 15
    17a4:	40 5d       	subi	r20, 0xD0	; 208
    17a6:	4a 33       	cpi	r20, 0x3A	; 58
    17a8:	18 f0       	brcs	.+6      	; 0x17b0 <__ultoa_invert+0x7c>
    17aa:	49 5d       	subi	r20, 0xD9	; 217
    17ac:	31 fd       	sbrc	r19, 1
    17ae:	40 52       	subi	r20, 0x20	; 32
    17b0:	41 93       	st	Z+, r20
    17b2:	02 d0       	rcall	.+4      	; 0x17b8 <__ultoa_invert+0x84>
    17b4:	a9 f7       	brne	.-22     	; 0x17a0 <__ultoa_invert+0x6c>
    17b6:	ea cf       	rjmp	.-44     	; 0x178c <__ultoa_invert+0x58>
    17b8:	b4 e0       	ldi	r27, 0x04	; 4
    17ba:	a6 95       	lsr	r26
    17bc:	97 95       	ror	r25
    17be:	87 95       	ror	r24
    17c0:	77 95       	ror	r23
    17c2:	67 95       	ror	r22
    17c4:	ba 95       	dec	r27
    17c6:	c9 f7       	brne	.-14     	; 0x17ba <__ultoa_invert+0x86>
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	61 05       	cpc	r22, r1
    17cc:	71 05       	cpc	r23, r1
    17ce:	08 95       	ret
    17d0:	9b 01       	movw	r18, r22
    17d2:	ac 01       	movw	r20, r24
    17d4:	0a 2e       	mov	r0, r26
    17d6:	06 94       	lsr	r0
    17d8:	57 95       	ror	r21
    17da:	47 95       	ror	r20
    17dc:	37 95       	ror	r19
    17de:	27 95       	ror	r18
    17e0:	ba 95       	dec	r27
    17e2:	c9 f7       	brne	.-14     	; 0x17d6 <__ultoa_invert+0xa2>
    17e4:	62 0f       	add	r22, r18
    17e6:	73 1f       	adc	r23, r19
    17e8:	84 1f       	adc	r24, r20
    17ea:	95 1f       	adc	r25, r21
    17ec:	a0 1d       	adc	r26, r0
    17ee:	08 95       	ret

000017f0 <__prologue_saves__>:
    17f0:	2f 92       	push	r2
    17f2:	3f 92       	push	r3
    17f4:	4f 92       	push	r4
    17f6:	5f 92       	push	r5
    17f8:	6f 92       	push	r6
    17fa:	7f 92       	push	r7
    17fc:	8f 92       	push	r8
    17fe:	9f 92       	push	r9
    1800:	af 92       	push	r10
    1802:	bf 92       	push	r11
    1804:	cf 92       	push	r12
    1806:	df 92       	push	r13
    1808:	ef 92       	push	r14
    180a:	ff 92       	push	r15
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	ca 1b       	sub	r28, r26
    181a:	db 0b       	sbc	r29, r27
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	09 94       	ijmp

00001828 <__epilogue_restores__>:
    1828:	2a 88       	ldd	r2, Y+18	; 0x12
    182a:	39 88       	ldd	r3, Y+17	; 0x11
    182c:	48 88       	ldd	r4, Y+16	; 0x10
    182e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1830:	6e 84       	ldd	r6, Y+14	; 0x0e
    1832:	7d 84       	ldd	r7, Y+13	; 0x0d
    1834:	8c 84       	ldd	r8, Y+12	; 0x0c
    1836:	9b 84       	ldd	r9, Y+11	; 0x0b
    1838:	aa 84       	ldd	r10, Y+10	; 0x0a
    183a:	b9 84       	ldd	r11, Y+9	; 0x09
    183c:	c8 84       	ldd	r12, Y+8	; 0x08
    183e:	df 80       	ldd	r13, Y+7	; 0x07
    1840:	ee 80       	ldd	r14, Y+6	; 0x06
    1842:	fd 80       	ldd	r15, Y+5	; 0x05
    1844:	0c 81       	ldd	r16, Y+4	; 0x04
    1846:	1b 81       	ldd	r17, Y+3	; 0x03
    1848:	aa 81       	ldd	r26, Y+2	; 0x02
    184a:	b9 81       	ldd	r27, Y+1	; 0x01
    184c:	ce 0f       	add	r28, r30
    184e:	d1 1d       	adc	r29, r1
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	ed 01       	movw	r28, r26
    185c:	08 95       	ret

0000185e <_exit>:
    185e:	f8 94       	cli

00001860 <__stop_program>:
    1860:	ff cf       	rjmp	.-2      	; 0x1860 <__stop_program>
