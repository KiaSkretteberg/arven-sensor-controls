
ArvenSensorControls.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000c70  00000d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080013e  0080013e  00000d42  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000da0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e35  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a9  00000000  00000000  00001ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006cd  00000000  00000000  00002676  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fd  00000000  00000000  00002ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040d  00000000  00000000  000035c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000039ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_11>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	65 00       	.word	0x0065	; ????
  6a:	6b 00       	.word	0x006b	; ????
  6c:	71 00       	.word	0x0071	; ????
  6e:	77 00       	.word	0x0077	; ????
  70:	7d 00       	.word	0x007d	; ????
  72:	83 00       	.word	0x0083	; ????
  74:	89 00       	.word	0x0089	; ????
  76:	8f 00       	.word	0x008f	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e0 e7       	ldi	r30, 0x70	; 112
  8c:	fc e0       	ldi	r31, 0x0C	; 12
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	ae e3       	ldi	r26, 0x3E	; 62
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	a0 34       	cpi	r26, 0x40	; 64
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 40 01 	call	0x280	; 0x280 <main>
  ae:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <AtoD_SetChannel>:
  ADCSRA = 0b11100111;  // turn on AD, prescale 128, ADATE needs to be on? (28.9.2)
}

void AtoD_SetChannel (AtoD_Channel chan)
{
  switch (chan) 
  b6:	48 2f       	mov	r20, r24
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	48 30       	cpi	r20, 0x08	; 8
  bc:	51 05       	cpc	r21, r1
  be:	a8 f5       	brcc	.+106    	; 0x12a <AtoD_SetChannel+0x74>
  c0:	fa 01       	movw	r30, r20
  c2:	ec 5c       	subi	r30, 0xCC	; 204
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	0c 94 46 03 	jmp	0x68c	; 0x68c <__tablejump2__>
  {
    case AtoD_Channel_0:
      DIDR0 |= 0b00000001;  // kill digital input for channel 0
  ca:	ee e7       	ldi	r30, 0x7E	; 126
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	90 81       	ld	r25, Z
  d0:	91 60       	ori	r25, 0x01	; 1
  d2:	90 83       	st	Z, r25
      break;
  d4:	2c c0       	rjmp	.+88     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_1:
      DIDR0 |= 0b00000010;  // kill digital input for channel 0
  d6:	ee e7       	ldi	r30, 0x7E	; 126
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	90 81       	ld	r25, Z
  dc:	92 60       	ori	r25, 0x02	; 2
  de:	90 83       	st	Z, r25
      break;
  e0:	26 c0       	rjmp	.+76     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_2:
      DIDR0 |= 0b00000100;  // kill digital input for channel 0
  e2:	ee e7       	ldi	r30, 0x7E	; 126
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	94 60       	ori	r25, 0x04	; 4
  ea:	90 83       	st	Z, r25
      break;
  ec:	20 c0       	rjmp	.+64     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_3:
      DIDR0 |= 0b00001000;  // kill digital input for channel 0
  ee:	ee e7       	ldi	r30, 0x7E	; 126
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	98 60       	ori	r25, 0x08	; 8
  f6:	90 83       	st	Z, r25
      break;
  f8:	1a c0       	rjmp	.+52     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_4:
      DIDR0 |= 0b00010000;  // kill digital input for channel 0
  fa:	ee e7       	ldi	r30, 0x7E	; 126
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	90 61       	ori	r25, 0x10	; 16
 102:	90 83       	st	Z, r25
      break;
 104:	14 c0       	rjmp	.+40     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_5:
      DIDR0 |= 0b00100000;  // kill digital input for channel 0
 106:	ee e7       	ldi	r30, 0x7E	; 126
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	90 81       	ld	r25, Z
 10c:	90 62       	ori	r25, 0x20	; 32
 10e:	90 83       	st	Z, r25
      break;
 110:	0e c0       	rjmp	.+28     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_6:
      DIDR0 |= 0b01000000;  // kill digital input for channel 0
 112:	ee e7       	ldi	r30, 0x7E	; 126
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	90 81       	ld	r25, Z
 118:	90 64       	ori	r25, 0x40	; 64
 11a:	90 83       	st	Z, r25
      break;
 11c:	08 c0       	rjmp	.+16     	; 0x12e <AtoD_SetChannel+0x78>
    case AtoD_Channel_7:
      DIDR0 |= 0b10000000;  // kill digital input for channel 0
 11e:	ee e7       	ldi	r30, 0x7E	; 126
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	90 81       	ld	r25, Z
 124:	90 68       	ori	r25, 0x80	; 128
 126:	90 83       	st	Z, r25
      break;
 128:	02 c0       	rjmp	.+4      	; 0x12e <AtoD_SetChannel+0x78>
    default:               // other cases don't require digital inputs 
      DIDR0 = 0b00000000;  // all A/D channels as digital inputs
 12a:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  }      
  
  // channel selection
  ADMUX &= 0b11110000;  // clear channel selection
 12e:	ec e7       	ldi	r30, 0x7C	; 124
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	90 81       	ld	r25, Z
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	90 83       	st	Z, r25
  ADMUX |= chan;        // set back channel selection bits
 138:	90 81       	ld	r25, Z
 13a:	89 2b       	or	r24, r25
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <AtoD_Init>:
#include <stdio.h>
#include "atd.h"

void AtoD_Init (AtoD_Channel chan)
{
  PRR &= ~(1 << PRADC); // turn on A/D module in power reduction register
 140:	e4 e6       	ldi	r30, 0x64	; 100
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	90 81       	ld	r25, Z
 146:	9e 7f       	andi	r25, 0xFE	; 254
 148:	90 83       	st	Z, r25
  
  ADMUX = 0b00000000;   // Internal Vref off, right-aligned, ADC0 (28.9.1)  
 14a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  ADCSRB = 0b00000000;  // default, no comparator, free running mode    
 14e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  
  // use support function to set channel
  AtoD_SetChannel(chan);
 152:	0e 94 5b 00 	call	0xb6	; 0xb6 <AtoD_SetChannel>
  
  ADCSRA = 0b11100111;  // turn on AD, prescale 128, ADATE needs to be on? (28.9.2)
 156:	87 ee       	ldi	r24, 0xE7	; 231
 158:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 15c:	08 95       	ret

0000015e <SCI0_Init>:
#include <avr/io.h>
#include <stdio.h>
#include "sci.h"

int SCI0_Init (unsigned long ulBus, unsigned long ulBAUD, int bRXInt)
{
 15e:	cf 92       	push	r12
 160:	df 92       	push	r13
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
  // determine the BAUD rate divisor required
  unsigned int iReg = (unsigned int)((((ulBus * 10 / 16) / ulBAUD) + 5) / 10) - 1;
 16a:	6b 01       	movw	r12, r22
 16c:	7c 01       	movw	r14, r24
 16e:	cc 0c       	add	r12, r12
 170:	dd 1c       	adc	r13, r13
 172:	ee 1c       	adc	r14, r14
 174:	ff 1c       	adc	r15, r15
 176:	d7 01       	movw	r26, r14
 178:	c6 01       	movw	r24, r12
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	aa 1f       	adc	r26, r26
 180:	bb 1f       	adc	r27, r27
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	aa 1f       	adc	r26, r26
 188:	bb 1f       	adc	r27, r27
 18a:	8c 0d       	add	r24, r12
 18c:	9d 1d       	adc	r25, r13
 18e:	ae 1d       	adc	r26, r14
 190:	bf 1d       	adc	r27, r15
 192:	bc 01       	movw	r22, r24
 194:	cd 01       	movw	r24, r26
 196:	68 94       	set
 198:	13 f8       	bld	r1, 3
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	77 95       	ror	r23
 1a0:	67 95       	ror	r22
 1a2:	16 94       	lsr	r1
 1a4:	d1 f7       	brne	.-12     	; 0x19a <SCI0_Init+0x3c>
 1a6:	0e 94 24 03 	call	0x648	; 0x648 <__udivmodsi4>
 1aa:	ca 01       	movw	r24, r20
 1ac:	b9 01       	movw	r22, r18
 1ae:	6b 5f       	subi	r22, 0xFB	; 251
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255
 1b2:	8f 4f       	sbci	r24, 0xFF	; 255
 1b4:	9f 4f       	sbci	r25, 0xFF	; 255
 1b6:	2a e0       	ldi	r18, 0x0A	; 10
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	0e 94 24 03 	call	0x648	; 0x648 <__udivmodsi4>
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	31 09       	sbc	r19, r1

  // won't fit in register
  if (iReg > 0b111111111111u)
 1c6:	21 15       	cp	r18, r1
 1c8:	80 e1       	ldi	r24, 0x10	; 16
 1ca:	38 07       	cpc	r19, r24
 1cc:	c8 f4       	brcc	.+50     	; 0x200 <SCI0_Init+0xa2>
    return -1;

  // start code will power off all modules...
  // ensure power is on : USART
  PRR &= 0b11111101;
 1ce:	e4 e6       	ldi	r30, 0x64	; 100
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	8d 7f       	andi	r24, 0xFD	; 253
 1d6:	80 83       	st	Z, r24

  // set BAUD rate
  UBRR0H = iReg >> 8;
 1d8:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UBRR0L = (unsigned char)iReg;
 1dc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

  // enable TX and RX
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1e0:	88 e1       	ldi	r24, 0x18	; 24
 1e2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  
  // async, no parity, 1 stop bit, 8 bit
  UCSR0C =  0b00000110;
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  
  // optional interrupt on receiver
  if (bRXInt)
 1ec:	01 2b       	or	r16, r17
 1ee:	59 f0       	breq	.+22     	; 0x206 <SCI0_Init+0xa8>
    UCSR0B |= (1 << RXCIE0);
 1f0:	e1 ec       	ldi	r30, 0xC1	; 193
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	80 68       	ori	r24, 0x80	; 128
 1f8:	80 83       	st	Z, r24

  // no error
  return 0;
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <SCI0_Init+0xac>
  // determine the BAUD rate divisor required
  unsigned int iReg = (unsigned int)((((ulBus * 10 / 16) / ulBAUD) + 5) / 10) - 1;

  // won't fit in register
  if (iReg > 0b111111111111u)
    return -1;
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	9f ef       	ldi	r25, 0xFF	; 255
 204:	02 c0       	rjmp	.+4      	; 0x20a <SCI0_Init+0xac>
  // optional interrupt on receiver
  if (bRXInt)
    UCSR0B |= (1 << RXCIE0);

  // no error
  return 0;
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
}
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	08 95       	ret

00000218 <SCI0_BSend>:

void SCI0_BSend (unsigned char data)
{
  // transmit buffer empty?
  while (!(UCSR0A & (1<<UDRE0)))
 218:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 21c:	95 ff       	sbrs	r25, 5
 21e:	fc cf       	rjmp	.-8      	; 0x218 <SCI0_BSend>
  ;

  // transmit complete must be cleared before send in polling mode
  if (UCSR0A & (1<<TXC0))
 220:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 224:	96 ff       	sbrs	r25, 6
 226:	03 c0       	rjmp	.+6      	; 0x22e <SCI0_BSend+0x16>
    UCSR0A = (1<<TXC0);
 228:	90 e4       	ldi	r25, 0x40	; 64
 22a:	90 93 c0 00 	sts	0x00C0, r25	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

  // free to send data
  UDR0 = data;
 22e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 232:	08 95       	ret

00000234 <SCI0_TxString>:
  if (tl)
    SCI0_TxString ("\r\n");
}

void SCI0_TxString (char * buff)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ec 01       	movw	r28, r24
  while (*buff)
 23a:	03 c0       	rjmp	.+6      	; 0x242 <SCI0_TxString+0xe>
  {
    SCI0_BSend(*buff);
 23c:	0e 94 0c 01 	call	0x218	; 0x218 <SCI0_BSend>
    ++buff;
 240:	21 96       	adiw	r28, 0x01	; 1
    SCI0_TxString ("\r\n");
}

void SCI0_TxString (char * buff)
{
  while (*buff)
 242:	88 81       	ld	r24, Y
 244:	81 11       	cpse	r24, r1
 246:	fa cf       	rjmp	.-12     	; 0x23c <SCI0_TxString+0x8>
  {
    SCI0_BSend(*buff);
    ++buff;
  }
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <Timer_Init>:
void Timer_Init (Timer_Prescale pre, unsigned int uiInitialOffset)
{
	// start code will power off all modules...
	// ensure power is on : Timer 1
	// PRR on 328P, PRR0 on 328PB
	PRR &= ~(1 << PRTIM1);
 24e:	e4 e6       	ldi	r30, 0x64	; 100
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	90 81       	ld	r25, Z
 254:	97 7f       	andi	r25, 0xF7	; 247
 256:	90 83       	st	Z, r25

	// set prescale to requested rate
	TCCR1B = 0;		// noise canceler disabled, waveform generator normal
 258:	e1 e8       	ldi	r30, 0x81	; 129
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	10 82       	st	Z, r1
	TCCR1B |= pre;	// put back requested prescale bits
 25e:	90 81       	ld	r25, Z
 260:	89 2b       	or	r24, r25
 262:	80 83       	st	Z, r24
	
	// setup initial event for output compare 1 A
	OCR1A = TCNT1 + uiInitialOffset;
 264:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 268:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 26c:	68 0f       	add	r22, r24
 26e:	79 1f       	adc	r23, r25
 270:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 274:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	// setup interrupt for output compare
	// timer/counter 1, output compare A match interrupt enable
	TIMSK1 = 0b00000010;
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 27e:	08 95       	ret

00000280 <main>:
// constant for timer output compare offset, init and ISR rearm
const unsigned int _Timer_OC_Offset = 250; // 1 / (2000000 / 8 / 250) = 1ms (prescale 8)
// global counter for timer ISR, used as reference to coordinate activities
volatile unsigned int _Ticks = 0;
int main(void)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	64 97       	sbiw	r28, 0x14	; 20
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
	// variable for managing the A/D update
	const unsigned int cuiAtoDEventCount = 500; // every 1/2 second
	unsigned int uiAtoDEventNext = cuiAtoDEventCount;
	// one-time initialization section
	// bring up the timer, requires ISR!
	Timer_Init(Timer_Prescale_8, _Timer_OC_Offset); // 1ms intervals
 294:	6a ef       	ldi	r22, 0xFA	; 250
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	0e 94 27 01 	call	0x24e	; 0x24e <Timer_Init>
	// enable sleep mode, for idle, sort of similar to WAI on 9S12X (13.2)
	sleep_enable();
 29e:	83 b7       	in	r24, 0x33	; 51
 2a0:	81 60       	ori	r24, 0x01	; 1
 2a2:	83 bf       	out	0x33, r24	; 51
	SCI0_Init(F_CPU, 9600, 1); // 16Mhz clock, 9600 baud
 2a4:	01 e0       	ldi	r16, 0x01	; 1
 2a6:	10 e0       	ldi	r17, 0x00	; 0
 2a8:	20 e8       	ldi	r18, 0x80	; 128
 2aa:	35 e2       	ldi	r19, 0x25	; 37
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	60 e8       	ldi	r22, 0x80	; 128
 2b2:	74 e8       	ldi	r23, 0x84	; 132
 2b4:	8e e1       	ldi	r24, 0x1E	; 30
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 af 00 	call	0x15e	; 0x15e <SCI0_Init>

	// welcome message, so we know it booted OK
	SCI0_TxString("\r\n328 Up! Characters will echo.\r\n");
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	0e 94 1a 01 	call	0x234	; 0x234 <SCI0_TxString>
	AtoD_Init(AtoD_Channel_0);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 a0 00 	call	0x140	; 0x140 <AtoD_Init>

	// set the global interrupt flag (enable interrupts)
	// this is backwards from the 9S12
	sei();
 2ca:	78 94       	sei
	// make portd pin 7 an output (PD7)
	DDRD |= 0b10000000;
 2cc:	8a b1       	in	r24, 0x0a	; 10
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	8a b9       	out	0x0a, r24	; 10
volatile unsigned int _Ticks = 0;
int main(void)
{
	// variable for managing the A/D update
	const unsigned int cuiAtoDEventCount = 500; // every 1/2 second
	unsigned int uiAtoDEventNext = cuiAtoDEventCount;
 2d2:	04 ef       	ldi	r16, 0xF4	; 244
 2d4:	11 e0       	ldi	r17, 0x01	; 1

	// main program loop - don't exit
	while(1)
	{
		// go idle!
		sleep_cpu();
 2d6:	88 95       	sleep

		//// are we past the scheduled event?
		if (uiAtoDEventNext - _Ticks > cuiAtoDEventCount)
 2d8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 2dc:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
 2e0:	98 01       	movw	r18, r16
 2e2:	28 1b       	sub	r18, r24
 2e4:	39 0b       	sbc	r19, r25
 2e6:	c9 01       	movw	r24, r18
 2e8:	85 3f       	cpi	r24, 0xF5	; 245
 2ea:	91 40       	sbci	r25, 0x01	; 1
 2ec:	a0 f3       	brcs	.-24     	; 0x2d6 <main+0x56>
		{
			uiAtoDEventNext += cuiAtoDEventCount; // rearm
 2ee:	0c 50       	subi	r16, 0x0C	; 12
 2f0:	1e 4f       	sbci	r17, 0xFE	; 254
			unsigned char AD_low = ADCL; // must be read first
 2f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
			unsigned char AD_high = ADCH;
 2f6:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
			{		
				unsigned int atodval = (AD_low + AD_high * 256);
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	76 2f       	mov	r23, r22
 2fe:	66 27       	eor	r22, r22
 300:	7b 01       	movw	r14, r22
 302:	e8 0e       	add	r14, r24
 304:	f1 1c       	adc	r15, r1
				char buff[20];
				sprintf(buff,"\nATOD: %i", atodval);
 306:	ff 92       	push	r15
 308:	ef 92       	push	r14
 30a:	82 e2       	ldi	r24, 0x22	; 34
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	9f 93       	push	r25
 310:	8f 93       	push	r24
 312:	ce 01       	movw	r24, r28
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	6c 01       	movw	r12, r24
 318:	9f 93       	push	r25
 31a:	8f 93       	push	r24
 31c:	0e 94 4c 03 	call	0x698	; 0x698 <sprintf>
				SCI0_TxString(buff);
 320:	c6 01       	movw	r24, r12
 322:	0e 94 1a 01 	call	0x234	; 0x234 <SCI0_TxString>
				float q = 5.0 / 1024.0; // 5 V ref, 10 bit atod
				sprintf(buff," Q: %d", q*1000);
 326:	80 e4       	ldi	r24, 0x40	; 64
 328:	8f 93       	push	r24
 32a:	9c e9       	ldi	r25, 0x9C	; 156
 32c:	9f 93       	push	r25
 32e:	8f 93       	push	r24
 330:	1f 92       	push	r1
 332:	8c e2       	ldi	r24, 0x2C	; 44
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	9f 93       	push	r25
 338:	8f 93       	push	r24
 33a:	df 92       	push	r13
 33c:	cf 92       	push	r12
 33e:	0e 94 4c 03 	call	0x698	; 0x698 <sprintf>
				SCI0_TxString(buff);
 342:	c6 01       	movw	r24, r12
 344:	0e 94 1a 01 	call	0x234	; 0x234 <SCI0_TxString>
				float voltage = atodval * q; // min val (resting) 0.73V
 348:	b7 01       	movw	r22, r14
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 00 02 	call	0x400	; 0x400 <__floatunsisf>
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	40 ea       	ldi	r20, 0xA0	; 160
 358:	5b e3       	ldi	r21, 0x3B	; 59
 35a:	0e 94 b7 02 	call	0x56e	; 0x56e <__mulsf3>
 35e:	4b 01       	movw	r8, r22
 360:	5c 01       	movw	r10, r24
				sprintf(buff," VOLT: %f\n", voltage*1000);
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	4a e7       	ldi	r20, 0x7A	; 122
 368:	54 e4       	ldi	r21, 0x44	; 68
 36a:	0e 94 b7 02 	call	0x56e	; 0x56e <__mulsf3>
 36e:	9f 93       	push	r25
 370:	8f 93       	push	r24
 372:	7f 93       	push	r23
 374:	6f 93       	push	r22
 376:	83 e3       	ldi	r24, 0x33	; 51
 378:	91 e0       	ldi	r25, 0x01	; 1
 37a:	9f 93       	push	r25
 37c:	8f 93       	push	r24
 37e:	df 92       	push	r13
 380:	cf 92       	push	r12
 382:	0e 94 4c 03 	call	0x698	; 0x698 <sprintf>
				SCI0_TxString(buff);				
 386:	c6 01       	movw	r24, r12
 388:	0e 94 1a 01 	call	0x234	; 0x234 <SCI0_TxString>
				if(voltage > 3)
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	f8 94       	cli
 390:	de bf       	out	0x3e, r29	; 62
 392:	0f be       	out	0x3f, r0	; 63
 394:	cd bf       	out	0x3d, r28	; 61
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	40 e4       	ldi	r20, 0x40	; 64
 39c:	50 e4       	ldi	r21, 0x40	; 64
 39e:	c5 01       	movw	r24, r10
 3a0:	b4 01       	movw	r22, r8
 3a2:	0e 94 b2 02 	call	0x564	; 0x564 <__gesf2>
 3a6:	18 16       	cp	r1, r24
 3a8:	24 f4       	brge	.+8      	; 0x3b2 <main+0x132>
				{
					PORTD |= 0b10000000; // turn it on
 3aa:	8b b1       	in	r24, 0x0b	; 11
 3ac:	80 68       	ori	r24, 0x80	; 128
 3ae:	8b b9       	out	0x0b, r24	; 11
 3b0:	92 cf       	rjmp	.-220    	; 0x2d6 <main+0x56>
				}
				else
				{
					PORTD &= ~(0b10000000); // turn it off
 3b2:	8b b1       	in	r24, 0x0b	; 11
 3b4:	8f 77       	andi	r24, 0x7F	; 127
 3b6:	8b b9       	out	0x0b, r24	; 11
 3b8:	8e cf       	rjmp	.-228    	; 0x2d6 <main+0x56>

000003ba <__vector_11>:

	}
}
// output compare A interrupt
ISR(TIMER1_COMPA_vect)
{
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	ef 93       	push	r30
 3ca:	ff 93       	push	r31
	// rearm the output compare operation
	OCR1A += _Timer_OC_Offset; // 1ms intervals
 3cc:	e8 e8       	ldi	r30, 0x88	; 136
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	91 81       	ldd	r25, Z+1	; 0x01
 3d4:	86 50       	subi	r24, 0x06	; 6
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	91 83       	std	Z+1, r25	; 0x01
 3da:	80 83       	st	Z, r24

	// up the global tick count
	++_Ticks;
 3dc:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
 3e0:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <__data_end+0x1>
 3ea:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
}
 3ee:	ff 91       	pop	r31
 3f0:	ef 91       	pop	r30
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <__floatunsisf>:
 400:	e8 94       	clt
 402:	09 c0       	rjmp	.+18     	; 0x416 <__floatsisf+0x12>

00000404 <__floatsisf>:
 404:	97 fb       	bst	r25, 7
 406:	3e f4       	brtc	.+14     	; 0x416 <__floatsisf+0x12>
 408:	90 95       	com	r25
 40a:	80 95       	com	r24
 40c:	70 95       	com	r23
 40e:	61 95       	neg	r22
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	8f 4f       	sbci	r24, 0xFF	; 255
 414:	9f 4f       	sbci	r25, 0xFF	; 255
 416:	99 23       	and	r25, r25
 418:	a9 f0       	breq	.+42     	; 0x444 <__floatsisf+0x40>
 41a:	f9 2f       	mov	r31, r25
 41c:	96 e9       	ldi	r25, 0x96	; 150
 41e:	bb 27       	eor	r27, r27
 420:	93 95       	inc	r25
 422:	f6 95       	lsr	r31
 424:	87 95       	ror	r24
 426:	77 95       	ror	r23
 428:	67 95       	ror	r22
 42a:	b7 95       	ror	r27
 42c:	f1 11       	cpse	r31, r1
 42e:	f8 cf       	rjmp	.-16     	; 0x420 <__floatsisf+0x1c>
 430:	fa f4       	brpl	.+62     	; 0x470 <__floatsisf+0x6c>
 432:	bb 0f       	add	r27, r27
 434:	11 f4       	brne	.+4      	; 0x43a <__floatsisf+0x36>
 436:	60 ff       	sbrs	r22, 0
 438:	1b c0       	rjmp	.+54     	; 0x470 <__floatsisf+0x6c>
 43a:	6f 5f       	subi	r22, 0xFF	; 255
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	8f 4f       	sbci	r24, 0xFF	; 255
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	16 c0       	rjmp	.+44     	; 0x470 <__floatsisf+0x6c>
 444:	88 23       	and	r24, r24
 446:	11 f0       	breq	.+4      	; 0x44c <__floatsisf+0x48>
 448:	96 e9       	ldi	r25, 0x96	; 150
 44a:	11 c0       	rjmp	.+34     	; 0x46e <__floatsisf+0x6a>
 44c:	77 23       	and	r23, r23
 44e:	21 f0       	breq	.+8      	; 0x458 <__floatsisf+0x54>
 450:	9e e8       	ldi	r25, 0x8E	; 142
 452:	87 2f       	mov	r24, r23
 454:	76 2f       	mov	r23, r22
 456:	05 c0       	rjmp	.+10     	; 0x462 <__floatsisf+0x5e>
 458:	66 23       	and	r22, r22
 45a:	71 f0       	breq	.+28     	; 0x478 <__floatsisf+0x74>
 45c:	96 e8       	ldi	r25, 0x86	; 134
 45e:	86 2f       	mov	r24, r22
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	2a f0       	brmi	.+10     	; 0x470 <__floatsisf+0x6c>
 466:	9a 95       	dec	r25
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	88 1f       	adc	r24, r24
 46e:	da f7       	brpl	.-10     	; 0x466 <__floatsisf+0x62>
 470:	88 0f       	add	r24, r24
 472:	96 95       	lsr	r25
 474:	87 95       	ror	r24
 476:	97 f9       	bld	r25, 7
 478:	08 95       	ret

0000047a <__fp_cmp>:
 47a:	99 0f       	add	r25, r25
 47c:	00 08       	sbc	r0, r0
 47e:	55 0f       	add	r21, r21
 480:	aa 0b       	sbc	r26, r26
 482:	e0 e8       	ldi	r30, 0x80	; 128
 484:	fe ef       	ldi	r31, 0xFE	; 254
 486:	16 16       	cp	r1, r22
 488:	17 06       	cpc	r1, r23
 48a:	e8 07       	cpc	r30, r24
 48c:	f9 07       	cpc	r31, r25
 48e:	c0 f0       	brcs	.+48     	; 0x4c0 <__fp_cmp+0x46>
 490:	12 16       	cp	r1, r18
 492:	13 06       	cpc	r1, r19
 494:	e4 07       	cpc	r30, r20
 496:	f5 07       	cpc	r31, r21
 498:	98 f0       	brcs	.+38     	; 0x4c0 <__fp_cmp+0x46>
 49a:	62 1b       	sub	r22, r18
 49c:	73 0b       	sbc	r23, r19
 49e:	84 0b       	sbc	r24, r20
 4a0:	95 0b       	sbc	r25, r21
 4a2:	39 f4       	brne	.+14     	; 0x4b2 <__fp_cmp+0x38>
 4a4:	0a 26       	eor	r0, r26
 4a6:	61 f0       	breq	.+24     	; 0x4c0 <__fp_cmp+0x46>
 4a8:	23 2b       	or	r18, r19
 4aa:	24 2b       	or	r18, r20
 4ac:	25 2b       	or	r18, r21
 4ae:	21 f4       	brne	.+8      	; 0x4b8 <__fp_cmp+0x3e>
 4b0:	08 95       	ret
 4b2:	0a 26       	eor	r0, r26
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <__fp_cmp+0x3e>
 4b6:	a1 40       	sbci	r26, 0x01	; 1
 4b8:	a6 95       	lsr	r26
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	81 1d       	adc	r24, r1
 4be:	81 1d       	adc	r24, r1
 4c0:	08 95       	ret

000004c2 <__fp_inf>:
 4c2:	97 f9       	bld	r25, 7
 4c4:	9f 67       	ori	r25, 0x7F	; 127
 4c6:	80 e8       	ldi	r24, 0x80	; 128
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	08 95       	ret

000004ce <__fp_nan>:
 4ce:	9f ef       	ldi	r25, 0xFF	; 255
 4d0:	80 ec       	ldi	r24, 0xC0	; 192
 4d2:	08 95       	ret

000004d4 <__fp_pscA>:
 4d4:	00 24       	eor	r0, r0
 4d6:	0a 94       	dec	r0
 4d8:	16 16       	cp	r1, r22
 4da:	17 06       	cpc	r1, r23
 4dc:	18 06       	cpc	r1, r24
 4de:	09 06       	cpc	r0, r25
 4e0:	08 95       	ret

000004e2 <__fp_pscB>:
 4e2:	00 24       	eor	r0, r0
 4e4:	0a 94       	dec	r0
 4e6:	12 16       	cp	r1, r18
 4e8:	13 06       	cpc	r1, r19
 4ea:	14 06       	cpc	r1, r20
 4ec:	05 06       	cpc	r0, r21
 4ee:	08 95       	ret

000004f0 <__fp_round>:
 4f0:	09 2e       	mov	r0, r25
 4f2:	03 94       	inc	r0
 4f4:	00 0c       	add	r0, r0
 4f6:	11 f4       	brne	.+4      	; 0x4fc <__fp_round+0xc>
 4f8:	88 23       	and	r24, r24
 4fa:	52 f0       	brmi	.+20     	; 0x510 <__fp_round+0x20>
 4fc:	bb 0f       	add	r27, r27
 4fe:	40 f4       	brcc	.+16     	; 0x510 <__fp_round+0x20>
 500:	bf 2b       	or	r27, r31
 502:	11 f4       	brne	.+4      	; 0x508 <__fp_round+0x18>
 504:	60 ff       	sbrs	r22, 0
 506:	04 c0       	rjmp	.+8      	; 0x510 <__fp_round+0x20>
 508:	6f 5f       	subi	r22, 0xFF	; 255
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	8f 4f       	sbci	r24, 0xFF	; 255
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	08 95       	ret

00000512 <__fp_split3>:
 512:	57 fd       	sbrc	r21, 7
 514:	90 58       	subi	r25, 0x80	; 128
 516:	44 0f       	add	r20, r20
 518:	55 1f       	adc	r21, r21
 51a:	59 f0       	breq	.+22     	; 0x532 <__fp_splitA+0x10>
 51c:	5f 3f       	cpi	r21, 0xFF	; 255
 51e:	71 f0       	breq	.+28     	; 0x53c <__fp_splitA+0x1a>
 520:	47 95       	ror	r20

00000522 <__fp_splitA>:
 522:	88 0f       	add	r24, r24
 524:	97 fb       	bst	r25, 7
 526:	99 1f       	adc	r25, r25
 528:	61 f0       	breq	.+24     	; 0x542 <__fp_splitA+0x20>
 52a:	9f 3f       	cpi	r25, 0xFF	; 255
 52c:	79 f0       	breq	.+30     	; 0x54c <__fp_splitA+0x2a>
 52e:	87 95       	ror	r24
 530:	08 95       	ret
 532:	12 16       	cp	r1, r18
 534:	13 06       	cpc	r1, r19
 536:	14 06       	cpc	r1, r20
 538:	55 1f       	adc	r21, r21
 53a:	f2 cf       	rjmp	.-28     	; 0x520 <__fp_split3+0xe>
 53c:	46 95       	lsr	r20
 53e:	f1 df       	rcall	.-30     	; 0x522 <__fp_splitA>
 540:	08 c0       	rjmp	.+16     	; 0x552 <__fp_splitA+0x30>
 542:	16 16       	cp	r1, r22
 544:	17 06       	cpc	r1, r23
 546:	18 06       	cpc	r1, r24
 548:	99 1f       	adc	r25, r25
 54a:	f1 cf       	rjmp	.-30     	; 0x52e <__fp_splitA+0xc>
 54c:	86 95       	lsr	r24
 54e:	71 05       	cpc	r23, r1
 550:	61 05       	cpc	r22, r1
 552:	08 94       	sec
 554:	08 95       	ret

00000556 <__fp_zero>:
 556:	e8 94       	clt

00000558 <__fp_szero>:
 558:	bb 27       	eor	r27, r27
 55a:	66 27       	eor	r22, r22
 55c:	77 27       	eor	r23, r23
 55e:	cb 01       	movw	r24, r22
 560:	97 f9       	bld	r25, 7
 562:	08 95       	ret

00000564 <__gesf2>:
 564:	0e 94 3d 02 	call	0x47a	; 0x47a <__fp_cmp>
 568:	08 f4       	brcc	.+2      	; 0x56c <__gesf2+0x8>
 56a:	8f ef       	ldi	r24, 0xFF	; 255
 56c:	08 95       	ret

0000056e <__mulsf3>:
 56e:	0e 94 ca 02 	call	0x594	; 0x594 <__mulsf3x>
 572:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__fp_round>
 576:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__fp_pscA>
 57a:	38 f0       	brcs	.+14     	; 0x58a <__mulsf3+0x1c>
 57c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__fp_pscB>
 580:	20 f0       	brcs	.+8      	; 0x58a <__mulsf3+0x1c>
 582:	95 23       	and	r25, r21
 584:	11 f0       	breq	.+4      	; 0x58a <__mulsf3+0x1c>
 586:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_inf>
 58a:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <__fp_nan>
 58e:	11 24       	eor	r1, r1
 590:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_szero>

00000594 <__mulsf3x>:
 594:	0e 94 89 02 	call	0x512	; 0x512 <__fp_split3>
 598:	70 f3       	brcs	.-36     	; 0x576 <__mulsf3+0x8>

0000059a <__mulsf3_pse>:
 59a:	95 9f       	mul	r25, r21
 59c:	c1 f3       	breq	.-16     	; 0x58e <__mulsf3+0x20>
 59e:	95 0f       	add	r25, r21
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	55 1f       	adc	r21, r21
 5a4:	62 9f       	mul	r22, r18
 5a6:	f0 01       	movw	r30, r0
 5a8:	72 9f       	mul	r23, r18
 5aa:	bb 27       	eor	r27, r27
 5ac:	f0 0d       	add	r31, r0
 5ae:	b1 1d       	adc	r27, r1
 5b0:	63 9f       	mul	r22, r19
 5b2:	aa 27       	eor	r26, r26
 5b4:	f0 0d       	add	r31, r0
 5b6:	b1 1d       	adc	r27, r1
 5b8:	aa 1f       	adc	r26, r26
 5ba:	64 9f       	mul	r22, r20
 5bc:	66 27       	eor	r22, r22
 5be:	b0 0d       	add	r27, r0
 5c0:	a1 1d       	adc	r26, r1
 5c2:	66 1f       	adc	r22, r22
 5c4:	82 9f       	mul	r24, r18
 5c6:	22 27       	eor	r18, r18
 5c8:	b0 0d       	add	r27, r0
 5ca:	a1 1d       	adc	r26, r1
 5cc:	62 1f       	adc	r22, r18
 5ce:	73 9f       	mul	r23, r19
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	62 1f       	adc	r22, r18
 5d6:	83 9f       	mul	r24, r19
 5d8:	a0 0d       	add	r26, r0
 5da:	61 1d       	adc	r22, r1
 5dc:	22 1f       	adc	r18, r18
 5de:	74 9f       	mul	r23, r20
 5e0:	33 27       	eor	r19, r19
 5e2:	a0 0d       	add	r26, r0
 5e4:	61 1d       	adc	r22, r1
 5e6:	23 1f       	adc	r18, r19
 5e8:	84 9f       	mul	r24, r20
 5ea:	60 0d       	add	r22, r0
 5ec:	21 1d       	adc	r18, r1
 5ee:	82 2f       	mov	r24, r18
 5f0:	76 2f       	mov	r23, r22
 5f2:	6a 2f       	mov	r22, r26
 5f4:	11 24       	eor	r1, r1
 5f6:	9f 57       	subi	r25, 0x7F	; 127
 5f8:	50 40       	sbci	r21, 0x00	; 0
 5fa:	9a f0       	brmi	.+38     	; 0x622 <__mulsf3_pse+0x88>
 5fc:	f1 f0       	breq	.+60     	; 0x63a <__mulsf3_pse+0xa0>
 5fe:	88 23       	and	r24, r24
 600:	4a f0       	brmi	.+18     	; 0x614 <__mulsf3_pse+0x7a>
 602:	ee 0f       	add	r30, r30
 604:	ff 1f       	adc	r31, r31
 606:	bb 1f       	adc	r27, r27
 608:	66 1f       	adc	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	91 50       	subi	r25, 0x01	; 1
 610:	50 40       	sbci	r21, 0x00	; 0
 612:	a9 f7       	brne	.-22     	; 0x5fe <__mulsf3_pse+0x64>
 614:	9e 3f       	cpi	r25, 0xFE	; 254
 616:	51 05       	cpc	r21, r1
 618:	80 f0       	brcs	.+32     	; 0x63a <__mulsf3_pse+0xa0>
 61a:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_inf>
 61e:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_szero>
 622:	5f 3f       	cpi	r21, 0xFF	; 255
 624:	e4 f3       	brlt	.-8      	; 0x61e <__mulsf3_pse+0x84>
 626:	98 3e       	cpi	r25, 0xE8	; 232
 628:	d4 f3       	brlt	.-12     	; 0x61e <__mulsf3_pse+0x84>
 62a:	86 95       	lsr	r24
 62c:	77 95       	ror	r23
 62e:	67 95       	ror	r22
 630:	b7 95       	ror	r27
 632:	f7 95       	ror	r31
 634:	e7 95       	ror	r30
 636:	9f 5f       	subi	r25, 0xFF	; 255
 638:	c1 f7       	brne	.-16     	; 0x62a <__mulsf3_pse+0x90>
 63a:	fe 2b       	or	r31, r30
 63c:	88 0f       	add	r24, r24
 63e:	91 1d       	adc	r25, r1
 640:	96 95       	lsr	r25
 642:	87 95       	ror	r24
 644:	97 f9       	bld	r25, 7
 646:	08 95       	ret

00000648 <__udivmodsi4>:
 648:	a1 e2       	ldi	r26, 0x21	; 33
 64a:	1a 2e       	mov	r1, r26
 64c:	aa 1b       	sub	r26, r26
 64e:	bb 1b       	sub	r27, r27
 650:	fd 01       	movw	r30, r26
 652:	0d c0       	rjmp	.+26     	; 0x66e <__udivmodsi4_ep>

00000654 <__udivmodsi4_loop>:
 654:	aa 1f       	adc	r26, r26
 656:	bb 1f       	adc	r27, r27
 658:	ee 1f       	adc	r30, r30
 65a:	ff 1f       	adc	r31, r31
 65c:	a2 17       	cp	r26, r18
 65e:	b3 07       	cpc	r27, r19
 660:	e4 07       	cpc	r30, r20
 662:	f5 07       	cpc	r31, r21
 664:	20 f0       	brcs	.+8      	; 0x66e <__udivmodsi4_ep>
 666:	a2 1b       	sub	r26, r18
 668:	b3 0b       	sbc	r27, r19
 66a:	e4 0b       	sbc	r30, r20
 66c:	f5 0b       	sbc	r31, r21

0000066e <__udivmodsi4_ep>:
 66e:	66 1f       	adc	r22, r22
 670:	77 1f       	adc	r23, r23
 672:	88 1f       	adc	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	1a 94       	dec	r1
 678:	69 f7       	brne	.-38     	; 0x654 <__udivmodsi4_loop>
 67a:	60 95       	com	r22
 67c:	70 95       	com	r23
 67e:	80 95       	com	r24
 680:	90 95       	com	r25
 682:	9b 01       	movw	r18, r22
 684:	ac 01       	movw	r20, r24
 686:	bd 01       	movw	r22, r26
 688:	cf 01       	movw	r24, r30
 68a:	08 95       	ret

0000068c <__tablejump2__>:
 68c:	ee 0f       	add	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	05 90       	lpm	r0, Z+
 692:	f4 91       	lpm	r31, Z
 694:	e0 2d       	mov	r30, r0
 696:	09 94       	ijmp

00000698 <sprintf>:
 698:	ae e0       	ldi	r26, 0x0E	; 14
 69a:	b0 e0       	ldi	r27, 0x00	; 0
 69c:	e2 e5       	ldi	r30, 0x52	; 82
 69e:	f3 e0       	ldi	r31, 0x03	; 3
 6a0:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__prologue_saves__+0x1c>
 6a4:	0d 89       	ldd	r16, Y+21	; 0x15
 6a6:	1e 89       	ldd	r17, Y+22	; 0x16
 6a8:	86 e0       	ldi	r24, 0x06	; 6
 6aa:	8c 83       	std	Y+4, r24	; 0x04
 6ac:	1a 83       	std	Y+2, r17	; 0x02
 6ae:	09 83       	std	Y+1, r16	; 0x01
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	9f e7       	ldi	r25, 0x7F	; 127
 6b4:	9e 83       	std	Y+6, r25	; 0x06
 6b6:	8d 83       	std	Y+5, r24	; 0x05
 6b8:	ae 01       	movw	r20, r28
 6ba:	47 5e       	subi	r20, 0xE7	; 231
 6bc:	5f 4f       	sbci	r21, 0xFF	; 255
 6be:	6f 89       	ldd	r22, Y+23	; 0x17
 6c0:	78 8d       	ldd	r23, Y+24	; 0x18
 6c2:	ce 01       	movw	r24, r28
 6c4:	01 96       	adiw	r24, 0x01	; 1
 6c6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <vfprintf>
 6ca:	ef 81       	ldd	r30, Y+7	; 0x07
 6cc:	f8 85       	ldd	r31, Y+8	; 0x08
 6ce:	e0 0f       	add	r30, r16
 6d0:	f1 1f       	adc	r31, r17
 6d2:	10 82       	st	Z, r1
 6d4:	2e 96       	adiw	r28, 0x0e	; 14
 6d6:	e4 e0       	ldi	r30, 0x04	; 4
 6d8:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__epilogue_restores__+0x1c>

000006dc <vfprintf>:
 6dc:	ab e0       	ldi	r26, 0x0B	; 11
 6de:	b0 e0       	ldi	r27, 0x00	; 0
 6e0:	e4 e7       	ldi	r30, 0x74	; 116
 6e2:	f3 e0       	ldi	r31, 0x03	; 3
 6e4:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <__prologue_saves__>
 6e8:	6c 01       	movw	r12, r24
 6ea:	7b 01       	movw	r14, r22
 6ec:	8a 01       	movw	r16, r20
 6ee:	fc 01       	movw	r30, r24
 6f0:	17 82       	std	Z+7, r1	; 0x07
 6f2:	16 82       	std	Z+6, r1	; 0x06
 6f4:	83 81       	ldd	r24, Z+3	; 0x03
 6f6:	81 ff       	sbrs	r24, 1
 6f8:	cc c1       	rjmp	.+920    	; 0xa92 <__stack+0x193>
 6fa:	ce 01       	movw	r24, r28
 6fc:	01 96       	adiw	r24, 0x01	; 1
 6fe:	3c 01       	movw	r6, r24
 700:	f6 01       	movw	r30, r12
 702:	93 81       	ldd	r25, Z+3	; 0x03
 704:	f7 01       	movw	r30, r14
 706:	93 fd       	sbrc	r25, 3
 708:	85 91       	lpm	r24, Z+
 70a:	93 ff       	sbrs	r25, 3
 70c:	81 91       	ld	r24, Z+
 70e:	7f 01       	movw	r14, r30
 710:	88 23       	and	r24, r24
 712:	09 f4       	brne	.+2      	; 0x716 <vfprintf+0x3a>
 714:	ba c1       	rjmp	.+884    	; 0xa8a <__stack+0x18b>
 716:	85 32       	cpi	r24, 0x25	; 37
 718:	39 f4       	brne	.+14     	; 0x728 <vfprintf+0x4c>
 71a:	93 fd       	sbrc	r25, 3
 71c:	85 91       	lpm	r24, Z+
 71e:	93 ff       	sbrs	r25, 3
 720:	81 91       	ld	r24, Z+
 722:	7f 01       	movw	r14, r30
 724:	85 32       	cpi	r24, 0x25	; 37
 726:	29 f4       	brne	.+10     	; 0x732 <vfprintf+0x56>
 728:	b6 01       	movw	r22, r12
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 730:	e7 cf       	rjmp	.-50     	; 0x700 <vfprintf+0x24>
 732:	91 2c       	mov	r9, r1
 734:	21 2c       	mov	r2, r1
 736:	31 2c       	mov	r3, r1
 738:	ff e1       	ldi	r31, 0x1F	; 31
 73a:	f3 15       	cp	r31, r3
 73c:	d8 f0       	brcs	.+54     	; 0x774 <vfprintf+0x98>
 73e:	8b 32       	cpi	r24, 0x2B	; 43
 740:	79 f0       	breq	.+30     	; 0x760 <vfprintf+0x84>
 742:	38 f4       	brcc	.+14     	; 0x752 <vfprintf+0x76>
 744:	80 32       	cpi	r24, 0x20	; 32
 746:	79 f0       	breq	.+30     	; 0x766 <vfprintf+0x8a>
 748:	83 32       	cpi	r24, 0x23	; 35
 74a:	a1 f4       	brne	.+40     	; 0x774 <vfprintf+0x98>
 74c:	23 2d       	mov	r18, r3
 74e:	20 61       	ori	r18, 0x10	; 16
 750:	1d c0       	rjmp	.+58     	; 0x78c <vfprintf+0xb0>
 752:	8d 32       	cpi	r24, 0x2D	; 45
 754:	61 f0       	breq	.+24     	; 0x76e <vfprintf+0x92>
 756:	80 33       	cpi	r24, 0x30	; 48
 758:	69 f4       	brne	.+26     	; 0x774 <vfprintf+0x98>
 75a:	23 2d       	mov	r18, r3
 75c:	21 60       	ori	r18, 0x01	; 1
 75e:	16 c0       	rjmp	.+44     	; 0x78c <vfprintf+0xb0>
 760:	83 2d       	mov	r24, r3
 762:	82 60       	ori	r24, 0x02	; 2
 764:	38 2e       	mov	r3, r24
 766:	e3 2d       	mov	r30, r3
 768:	e4 60       	ori	r30, 0x04	; 4
 76a:	3e 2e       	mov	r3, r30
 76c:	2a c0       	rjmp	.+84     	; 0x7c2 <vfprintf+0xe6>
 76e:	f3 2d       	mov	r31, r3
 770:	f8 60       	ori	r31, 0x08	; 8
 772:	1d c0       	rjmp	.+58     	; 0x7ae <vfprintf+0xd2>
 774:	37 fc       	sbrc	r3, 7
 776:	2d c0       	rjmp	.+90     	; 0x7d2 <vfprintf+0xf6>
 778:	20 ed       	ldi	r18, 0xD0	; 208
 77a:	28 0f       	add	r18, r24
 77c:	2a 30       	cpi	r18, 0x0A	; 10
 77e:	40 f0       	brcs	.+16     	; 0x790 <vfprintf+0xb4>
 780:	8e 32       	cpi	r24, 0x2E	; 46
 782:	b9 f4       	brne	.+46     	; 0x7b2 <vfprintf+0xd6>
 784:	36 fc       	sbrc	r3, 6
 786:	81 c1       	rjmp	.+770    	; 0xa8a <__stack+0x18b>
 788:	23 2d       	mov	r18, r3
 78a:	20 64       	ori	r18, 0x40	; 64
 78c:	32 2e       	mov	r3, r18
 78e:	19 c0       	rjmp	.+50     	; 0x7c2 <vfprintf+0xe6>
 790:	36 fe       	sbrs	r3, 6
 792:	06 c0       	rjmp	.+12     	; 0x7a0 <vfprintf+0xc4>
 794:	8a e0       	ldi	r24, 0x0A	; 10
 796:	98 9e       	mul	r9, r24
 798:	20 0d       	add	r18, r0
 79a:	11 24       	eor	r1, r1
 79c:	92 2e       	mov	r9, r18
 79e:	11 c0       	rjmp	.+34     	; 0x7c2 <vfprintf+0xe6>
 7a0:	ea e0       	ldi	r30, 0x0A	; 10
 7a2:	2e 9e       	mul	r2, r30
 7a4:	20 0d       	add	r18, r0
 7a6:	11 24       	eor	r1, r1
 7a8:	22 2e       	mov	r2, r18
 7aa:	f3 2d       	mov	r31, r3
 7ac:	f0 62       	ori	r31, 0x20	; 32
 7ae:	3f 2e       	mov	r3, r31
 7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <vfprintf+0xe6>
 7b2:	8c 36       	cpi	r24, 0x6C	; 108
 7b4:	21 f4       	brne	.+8      	; 0x7be <vfprintf+0xe2>
 7b6:	83 2d       	mov	r24, r3
 7b8:	80 68       	ori	r24, 0x80	; 128
 7ba:	38 2e       	mov	r3, r24
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <vfprintf+0xe6>
 7be:	88 36       	cpi	r24, 0x68	; 104
 7c0:	41 f4       	brne	.+16     	; 0x7d2 <vfprintf+0xf6>
 7c2:	f7 01       	movw	r30, r14
 7c4:	93 fd       	sbrc	r25, 3
 7c6:	85 91       	lpm	r24, Z+
 7c8:	93 ff       	sbrs	r25, 3
 7ca:	81 91       	ld	r24, Z+
 7cc:	7f 01       	movw	r14, r30
 7ce:	81 11       	cpse	r24, r1
 7d0:	b3 cf       	rjmp	.-154    	; 0x738 <vfprintf+0x5c>
 7d2:	98 2f       	mov	r25, r24
 7d4:	9f 7d       	andi	r25, 0xDF	; 223
 7d6:	95 54       	subi	r25, 0x45	; 69
 7d8:	93 30       	cpi	r25, 0x03	; 3
 7da:	28 f4       	brcc	.+10     	; 0x7e6 <vfprintf+0x10a>
 7dc:	0c 5f       	subi	r16, 0xFC	; 252
 7de:	1f 4f       	sbci	r17, 0xFF	; 255
 7e0:	9f e3       	ldi	r25, 0x3F	; 63
 7e2:	99 83       	std	Y+1, r25	; 0x01
 7e4:	0d c0       	rjmp	.+26     	; 0x800 <__DATA_REGION_LENGTH__>
 7e6:	83 36       	cpi	r24, 0x63	; 99
 7e8:	31 f0       	breq	.+12     	; 0x7f6 <vfprintf+0x11a>
 7ea:	83 37       	cpi	r24, 0x73	; 115
 7ec:	71 f0       	breq	.+28     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7ee:	83 35       	cpi	r24, 0x53	; 83
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <vfprintf+0x118>
 7f2:	59 c0       	rjmp	.+178    	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
 7f4:	21 c0       	rjmp	.+66     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 7f6:	f8 01       	movw	r30, r16
 7f8:	80 81       	ld	r24, Z
 7fa:	89 83       	std	Y+1, r24	; 0x01
 7fc:	0e 5f       	subi	r16, 0xFE	; 254
 7fe:	1f 4f       	sbci	r17, 0xFF	; 255
 800:	88 24       	eor	r8, r8
 802:	83 94       	inc	r8
 804:	91 2c       	mov	r9, r1
 806:	53 01       	movw	r10, r6
 808:	13 c0       	rjmp	.+38     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 80a:	28 01       	movw	r4, r16
 80c:	f2 e0       	ldi	r31, 0x02	; 2
 80e:	4f 0e       	add	r4, r31
 810:	51 1c       	adc	r5, r1
 812:	f8 01       	movw	r30, r16
 814:	a0 80       	ld	r10, Z
 816:	b1 80       	ldd	r11, Z+1	; 0x01
 818:	36 fe       	sbrs	r3, 6
 81a:	03 c0       	rjmp	.+6      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81c:	69 2d       	mov	r22, r9
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	02 c0       	rjmp	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 822:	6f ef       	ldi	r22, 0xFF	; 255
 824:	7f ef       	ldi	r23, 0xFF	; 255
 826:	c5 01       	movw	r24, r10
 828:	0e 94 5a 05 	call	0xab4	; 0xab4 <strnlen>
 82c:	4c 01       	movw	r8, r24
 82e:	82 01       	movw	r16, r4
 830:	f3 2d       	mov	r31, r3
 832:	ff 77       	andi	r31, 0x7F	; 127
 834:	3f 2e       	mov	r3, r31
 836:	16 c0       	rjmp	.+44     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 838:	28 01       	movw	r4, r16
 83a:	22 e0       	ldi	r18, 0x02	; 2
 83c:	42 0e       	add	r4, r18
 83e:	51 1c       	adc	r5, r1
 840:	f8 01       	movw	r30, r16
 842:	a0 80       	ld	r10, Z
 844:	b1 80       	ldd	r11, Z+1	; 0x01
 846:	36 fe       	sbrs	r3, 6
 848:	03 c0       	rjmp	.+6      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84a:	69 2d       	mov	r22, r9
 84c:	70 e0       	ldi	r23, 0x00	; 0
 84e:	02 c0       	rjmp	.+4      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 850:	6f ef       	ldi	r22, 0xFF	; 255
 852:	7f ef       	ldi	r23, 0xFF	; 255
 854:	c5 01       	movw	r24, r10
 856:	0e 94 4f 05 	call	0xa9e	; 0xa9e <strnlen_P>
 85a:	4c 01       	movw	r8, r24
 85c:	f3 2d       	mov	r31, r3
 85e:	f0 68       	ori	r31, 0x80	; 128
 860:	3f 2e       	mov	r3, r31
 862:	82 01       	movw	r16, r4
 864:	33 fc       	sbrc	r3, 3
 866:	1b c0       	rjmp	.+54     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 868:	82 2d       	mov	r24, r2
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	88 16       	cp	r8, r24
 86e:	99 06       	cpc	r9, r25
 870:	b0 f4       	brcc	.+44     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 872:	b6 01       	movw	r22, r12
 874:	80 e2       	ldi	r24, 0x20	; 32
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 87c:	2a 94       	dec	r2
 87e:	f4 cf       	rjmp	.-24     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 880:	f5 01       	movw	r30, r10
 882:	37 fc       	sbrc	r3, 7
 884:	85 91       	lpm	r24, Z+
 886:	37 fe       	sbrs	r3, 7
 888:	81 91       	ld	r24, Z+
 88a:	5f 01       	movw	r10, r30
 88c:	b6 01       	movw	r22, r12
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 894:	21 10       	cpse	r2, r1
 896:	2a 94       	dec	r2
 898:	21 e0       	ldi	r18, 0x01	; 1
 89a:	82 1a       	sub	r8, r18
 89c:	91 08       	sbc	r9, r1
 89e:	81 14       	cp	r8, r1
 8a0:	91 04       	cpc	r9, r1
 8a2:	71 f7       	brne	.-36     	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 8a4:	e8 c0       	rjmp	.+464    	; 0xa76 <__stack+0x177>
 8a6:	84 36       	cpi	r24, 0x64	; 100
 8a8:	11 f0       	breq	.+4      	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 8aa:	89 36       	cpi	r24, 0x69	; 105
 8ac:	41 f5       	brne	.+80     	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
 8ae:	f8 01       	movw	r30, r16
 8b0:	37 fe       	sbrs	r3, 7
 8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8b4:	60 81       	ld	r22, Z
 8b6:	71 81       	ldd	r23, Z+1	; 0x01
 8b8:	82 81       	ldd	r24, Z+2	; 0x02
 8ba:	93 81       	ldd	r25, Z+3	; 0x03
 8bc:	0c 5f       	subi	r16, 0xFC	; 252
 8be:	1f 4f       	sbci	r17, 0xFF	; 255
 8c0:	08 c0       	rjmp	.+16     	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8c2:	60 81       	ld	r22, Z
 8c4:	71 81       	ldd	r23, Z+1	; 0x01
 8c6:	07 2e       	mov	r0, r23
 8c8:	00 0c       	add	r0, r0
 8ca:	88 0b       	sbc	r24, r24
 8cc:	99 0b       	sbc	r25, r25
 8ce:	0e 5f       	subi	r16, 0xFE	; 254
 8d0:	1f 4f       	sbci	r17, 0xFF	; 255
 8d2:	f3 2d       	mov	r31, r3
 8d4:	ff 76       	andi	r31, 0x6F	; 111
 8d6:	3f 2e       	mov	r3, r31
 8d8:	97 ff       	sbrs	r25, 7
 8da:	09 c0       	rjmp	.+18     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8dc:	90 95       	com	r25
 8de:	80 95       	com	r24
 8e0:	70 95       	com	r23
 8e2:	61 95       	neg	r22
 8e4:	7f 4f       	sbci	r23, 0xFF	; 255
 8e6:	8f 4f       	sbci	r24, 0xFF	; 255
 8e8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ea:	f0 68       	ori	r31, 0x80	; 128
 8ec:	3f 2e       	mov	r3, r31
 8ee:	2a e0       	ldi	r18, 0x0A	; 10
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	a3 01       	movw	r20, r6
 8f4:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ultoa_invert>
 8f8:	88 2e       	mov	r8, r24
 8fa:	86 18       	sub	r8, r6
 8fc:	45 c0       	rjmp	.+138    	; 0x988 <__stack+0x89>
 8fe:	85 37       	cpi	r24, 0x75	; 117
 900:	31 f4       	brne	.+12     	; 0x90e <__stack+0xf>
 902:	23 2d       	mov	r18, r3
 904:	2f 7e       	andi	r18, 0xEF	; 239
 906:	b2 2e       	mov	r11, r18
 908:	2a e0       	ldi	r18, 0x0A	; 10
 90a:	30 e0       	ldi	r19, 0x00	; 0
 90c:	25 c0       	rjmp	.+74     	; 0x958 <__stack+0x59>
 90e:	93 2d       	mov	r25, r3
 910:	99 7f       	andi	r25, 0xF9	; 249
 912:	b9 2e       	mov	r11, r25
 914:	8f 36       	cpi	r24, 0x6F	; 111
 916:	c1 f0       	breq	.+48     	; 0x948 <__stack+0x49>
 918:	18 f4       	brcc	.+6      	; 0x920 <__stack+0x21>
 91a:	88 35       	cpi	r24, 0x58	; 88
 91c:	79 f0       	breq	.+30     	; 0x93c <__stack+0x3d>
 91e:	b5 c0       	rjmp	.+362    	; 0xa8a <__stack+0x18b>
 920:	80 37       	cpi	r24, 0x70	; 112
 922:	19 f0       	breq	.+6      	; 0x92a <__stack+0x2b>
 924:	88 37       	cpi	r24, 0x78	; 120
 926:	21 f0       	breq	.+8      	; 0x930 <__stack+0x31>
 928:	b0 c0       	rjmp	.+352    	; 0xa8a <__stack+0x18b>
 92a:	e9 2f       	mov	r30, r25
 92c:	e0 61       	ori	r30, 0x10	; 16
 92e:	be 2e       	mov	r11, r30
 930:	b4 fe       	sbrs	r11, 4
 932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0x4f>
 934:	fb 2d       	mov	r31, r11
 936:	f4 60       	ori	r31, 0x04	; 4
 938:	bf 2e       	mov	r11, r31
 93a:	09 c0       	rjmp	.+18     	; 0x94e <__stack+0x4f>
 93c:	34 fe       	sbrs	r3, 4
 93e:	0a c0       	rjmp	.+20     	; 0x954 <__stack+0x55>
 940:	29 2f       	mov	r18, r25
 942:	26 60       	ori	r18, 0x06	; 6
 944:	b2 2e       	mov	r11, r18
 946:	06 c0       	rjmp	.+12     	; 0x954 <__stack+0x55>
 948:	28 e0       	ldi	r18, 0x08	; 8
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	05 c0       	rjmp	.+10     	; 0x958 <__stack+0x59>
 94e:	20 e1       	ldi	r18, 0x10	; 16
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	02 c0       	rjmp	.+4      	; 0x958 <__stack+0x59>
 954:	20 e1       	ldi	r18, 0x10	; 16
 956:	32 e0       	ldi	r19, 0x02	; 2
 958:	f8 01       	movw	r30, r16
 95a:	b7 fe       	sbrs	r11, 7
 95c:	07 c0       	rjmp	.+14     	; 0x96c <__stack+0x6d>
 95e:	60 81       	ld	r22, Z
 960:	71 81       	ldd	r23, Z+1	; 0x01
 962:	82 81       	ldd	r24, Z+2	; 0x02
 964:	93 81       	ldd	r25, Z+3	; 0x03
 966:	0c 5f       	subi	r16, 0xFC	; 252
 968:	1f 4f       	sbci	r17, 0xFF	; 255
 96a:	06 c0       	rjmp	.+12     	; 0x978 <__stack+0x79>
 96c:	60 81       	ld	r22, Z
 96e:	71 81       	ldd	r23, Z+1	; 0x01
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	0e 5f       	subi	r16, 0xFE	; 254
 976:	1f 4f       	sbci	r17, 0xFF	; 255
 978:	a3 01       	movw	r20, r6
 97a:	0e 94 a1 05 	call	0xb42	; 0xb42 <__ultoa_invert>
 97e:	88 2e       	mov	r8, r24
 980:	86 18       	sub	r8, r6
 982:	fb 2d       	mov	r31, r11
 984:	ff 77       	andi	r31, 0x7F	; 127
 986:	3f 2e       	mov	r3, r31
 988:	36 fe       	sbrs	r3, 6
 98a:	0d c0       	rjmp	.+26     	; 0x9a6 <__stack+0xa7>
 98c:	23 2d       	mov	r18, r3
 98e:	2e 7f       	andi	r18, 0xFE	; 254
 990:	a2 2e       	mov	r10, r18
 992:	89 14       	cp	r8, r9
 994:	58 f4       	brcc	.+22     	; 0x9ac <__stack+0xad>
 996:	34 fe       	sbrs	r3, 4
 998:	0b c0       	rjmp	.+22     	; 0x9b0 <__stack+0xb1>
 99a:	32 fc       	sbrc	r3, 2
 99c:	09 c0       	rjmp	.+18     	; 0x9b0 <__stack+0xb1>
 99e:	83 2d       	mov	r24, r3
 9a0:	8e 7e       	andi	r24, 0xEE	; 238
 9a2:	a8 2e       	mov	r10, r24
 9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <__stack+0xb1>
 9a6:	b8 2c       	mov	r11, r8
 9a8:	a3 2c       	mov	r10, r3
 9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <__stack+0xb3>
 9ac:	b8 2c       	mov	r11, r8
 9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <__stack+0xb3>
 9b0:	b9 2c       	mov	r11, r9
 9b2:	a4 fe       	sbrs	r10, 4
 9b4:	0f c0       	rjmp	.+30     	; 0x9d4 <__stack+0xd5>
 9b6:	fe 01       	movw	r30, r28
 9b8:	e8 0d       	add	r30, r8
 9ba:	f1 1d       	adc	r31, r1
 9bc:	80 81       	ld	r24, Z
 9be:	80 33       	cpi	r24, 0x30	; 48
 9c0:	21 f4       	brne	.+8      	; 0x9ca <__stack+0xcb>
 9c2:	9a 2d       	mov	r25, r10
 9c4:	99 7e       	andi	r25, 0xE9	; 233
 9c6:	a9 2e       	mov	r10, r25
 9c8:	09 c0       	rjmp	.+18     	; 0x9dc <__stack+0xdd>
 9ca:	a2 fe       	sbrs	r10, 2
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <__stack+0xdb>
 9ce:	b3 94       	inc	r11
 9d0:	b3 94       	inc	r11
 9d2:	04 c0       	rjmp	.+8      	; 0x9dc <__stack+0xdd>
 9d4:	8a 2d       	mov	r24, r10
 9d6:	86 78       	andi	r24, 0x86	; 134
 9d8:	09 f0       	breq	.+2      	; 0x9dc <__stack+0xdd>
 9da:	b3 94       	inc	r11
 9dc:	a3 fc       	sbrc	r10, 3
 9de:	11 c0       	rjmp	.+34     	; 0xa02 <__stack+0x103>
 9e0:	a0 fe       	sbrs	r10, 0
 9e2:	06 c0       	rjmp	.+12     	; 0x9f0 <__stack+0xf1>
 9e4:	b2 14       	cp	r11, r2
 9e6:	88 f4       	brcc	.+34     	; 0xa0a <__stack+0x10b>
 9e8:	28 0c       	add	r2, r8
 9ea:	92 2c       	mov	r9, r2
 9ec:	9b 18       	sub	r9, r11
 9ee:	0e c0       	rjmp	.+28     	; 0xa0c <__stack+0x10d>
 9f0:	b2 14       	cp	r11, r2
 9f2:	60 f4       	brcc	.+24     	; 0xa0c <__stack+0x10d>
 9f4:	b6 01       	movw	r22, r12
 9f6:	80 e2       	ldi	r24, 0x20	; 32
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 9fe:	b3 94       	inc	r11
 a00:	f7 cf       	rjmp	.-18     	; 0x9f0 <__stack+0xf1>
 a02:	b2 14       	cp	r11, r2
 a04:	18 f4       	brcc	.+6      	; 0xa0c <__stack+0x10d>
 a06:	2b 18       	sub	r2, r11
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <__stack+0x10f>
 a0a:	98 2c       	mov	r9, r8
 a0c:	21 2c       	mov	r2, r1
 a0e:	a4 fe       	sbrs	r10, 4
 a10:	10 c0       	rjmp	.+32     	; 0xa32 <__stack+0x133>
 a12:	b6 01       	movw	r22, r12
 a14:	80 e3       	ldi	r24, 0x30	; 48
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a1c:	a2 fe       	sbrs	r10, 2
 a1e:	17 c0       	rjmp	.+46     	; 0xa4e <__stack+0x14f>
 a20:	a1 fc       	sbrc	r10, 1
 a22:	03 c0       	rjmp	.+6      	; 0xa2a <__stack+0x12b>
 a24:	88 e7       	ldi	r24, 0x78	; 120
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <__stack+0x12f>
 a2a:	88 e5       	ldi	r24, 0x58	; 88
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	b6 01       	movw	r22, r12
 a30:	0c c0       	rjmp	.+24     	; 0xa4a <__stack+0x14b>
 a32:	8a 2d       	mov	r24, r10
 a34:	86 78       	andi	r24, 0x86	; 134
 a36:	59 f0       	breq	.+22     	; 0xa4e <__stack+0x14f>
 a38:	a1 fe       	sbrs	r10, 1
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <__stack+0x141>
 a3c:	8b e2       	ldi	r24, 0x2B	; 43
 a3e:	01 c0       	rjmp	.+2      	; 0xa42 <__stack+0x143>
 a40:	80 e2       	ldi	r24, 0x20	; 32
 a42:	a7 fc       	sbrc	r10, 7
 a44:	8d e2       	ldi	r24, 0x2D	; 45
 a46:	b6 01       	movw	r22, r12
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a4e:	89 14       	cp	r8, r9
 a50:	38 f4       	brcc	.+14     	; 0xa60 <__stack+0x161>
 a52:	b6 01       	movw	r22, r12
 a54:	80 e3       	ldi	r24, 0x30	; 48
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a5c:	9a 94       	dec	r9
 a5e:	f7 cf       	rjmp	.-18     	; 0xa4e <__stack+0x14f>
 a60:	8a 94       	dec	r8
 a62:	f3 01       	movw	r30, r6
 a64:	e8 0d       	add	r30, r8
 a66:	f1 1d       	adc	r31, r1
 a68:	80 81       	ld	r24, Z
 a6a:	b6 01       	movw	r22, r12
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a72:	81 10       	cpse	r8, r1
 a74:	f5 cf       	rjmp	.-22     	; 0xa60 <__stack+0x161>
 a76:	22 20       	and	r2, r2
 a78:	09 f4       	brne	.+2      	; 0xa7c <__stack+0x17d>
 a7a:	42 ce       	rjmp	.-892    	; 0x700 <vfprintf+0x24>
 a7c:	b6 01       	movw	r22, r12
 a7e:	80 e2       	ldi	r24, 0x20	; 32
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 65 05 	call	0xaca	; 0xaca <fputc>
 a86:	2a 94       	dec	r2
 a88:	f6 cf       	rjmp	.-20     	; 0xa76 <__stack+0x177>
 a8a:	f6 01       	movw	r30, r12
 a8c:	86 81       	ldd	r24, Z+6	; 0x06
 a8e:	97 81       	ldd	r25, Z+7	; 0x07
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <__stack+0x197>
 a92:	8f ef       	ldi	r24, 0xFF	; 255
 a94:	9f ef       	ldi	r25, 0xFF	; 255
 a96:	2b 96       	adiw	r28, 0x0b	; 11
 a98:	e2 e1       	ldi	r30, 0x12	; 18
 a9a:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__epilogue_restores__>

00000a9e <strnlen_P>:
 a9e:	fc 01       	movw	r30, r24
 aa0:	05 90       	lpm	r0, Z+
 aa2:	61 50       	subi	r22, 0x01	; 1
 aa4:	70 40       	sbci	r23, 0x00	; 0
 aa6:	01 10       	cpse	r0, r1
 aa8:	d8 f7       	brcc	.-10     	; 0xaa0 <strnlen_P+0x2>
 aaa:	80 95       	com	r24
 aac:	90 95       	com	r25
 aae:	8e 0f       	add	r24, r30
 ab0:	9f 1f       	adc	r25, r31
 ab2:	08 95       	ret

00000ab4 <strnlen>:
 ab4:	fc 01       	movw	r30, r24
 ab6:	61 50       	subi	r22, 0x01	; 1
 ab8:	70 40       	sbci	r23, 0x00	; 0
 aba:	01 90       	ld	r0, Z+
 abc:	01 10       	cpse	r0, r1
 abe:	d8 f7       	brcc	.-10     	; 0xab6 <strnlen+0x2>
 ac0:	80 95       	com	r24
 ac2:	90 95       	com	r25
 ac4:	8e 0f       	add	r24, r30
 ac6:	9f 1f       	adc	r25, r31
 ac8:	08 95       	ret

00000aca <fputc>:
 aca:	0f 93       	push	r16
 acc:	1f 93       	push	r17
 ace:	cf 93       	push	r28
 ad0:	df 93       	push	r29
 ad2:	fb 01       	movw	r30, r22
 ad4:	23 81       	ldd	r18, Z+3	; 0x03
 ad6:	21 fd       	sbrc	r18, 1
 ad8:	03 c0       	rjmp	.+6      	; 0xae0 <fputc+0x16>
 ada:	8f ef       	ldi	r24, 0xFF	; 255
 adc:	9f ef       	ldi	r25, 0xFF	; 255
 ade:	2c c0       	rjmp	.+88     	; 0xb38 <fputc+0x6e>
 ae0:	22 ff       	sbrs	r18, 2
 ae2:	16 c0       	rjmp	.+44     	; 0xb10 <fputc+0x46>
 ae4:	46 81       	ldd	r20, Z+6	; 0x06
 ae6:	57 81       	ldd	r21, Z+7	; 0x07
 ae8:	24 81       	ldd	r18, Z+4	; 0x04
 aea:	35 81       	ldd	r19, Z+5	; 0x05
 aec:	42 17       	cp	r20, r18
 aee:	53 07       	cpc	r21, r19
 af0:	44 f4       	brge	.+16     	; 0xb02 <fputc+0x38>
 af2:	a0 81       	ld	r26, Z
 af4:	b1 81       	ldd	r27, Z+1	; 0x01
 af6:	9d 01       	movw	r18, r26
 af8:	2f 5f       	subi	r18, 0xFF	; 255
 afa:	3f 4f       	sbci	r19, 0xFF	; 255
 afc:	31 83       	std	Z+1, r19	; 0x01
 afe:	20 83       	st	Z, r18
 b00:	8c 93       	st	X, r24
 b02:	26 81       	ldd	r18, Z+6	; 0x06
 b04:	37 81       	ldd	r19, Z+7	; 0x07
 b06:	2f 5f       	subi	r18, 0xFF	; 255
 b08:	3f 4f       	sbci	r19, 0xFF	; 255
 b0a:	37 83       	std	Z+7, r19	; 0x07
 b0c:	26 83       	std	Z+6, r18	; 0x06
 b0e:	14 c0       	rjmp	.+40     	; 0xb38 <fputc+0x6e>
 b10:	8b 01       	movw	r16, r22
 b12:	ec 01       	movw	r28, r24
 b14:	fb 01       	movw	r30, r22
 b16:	00 84       	ldd	r0, Z+8	; 0x08
 b18:	f1 85       	ldd	r31, Z+9	; 0x09
 b1a:	e0 2d       	mov	r30, r0
 b1c:	09 95       	icall
 b1e:	89 2b       	or	r24, r25
 b20:	e1 f6       	brne	.-72     	; 0xada <fputc+0x10>
 b22:	d8 01       	movw	r26, r16
 b24:	16 96       	adiw	r26, 0x06	; 6
 b26:	8d 91       	ld	r24, X+
 b28:	9c 91       	ld	r25, X
 b2a:	17 97       	sbiw	r26, 0x07	; 7
 b2c:	01 96       	adiw	r24, 0x01	; 1
 b2e:	17 96       	adiw	r26, 0x07	; 7
 b30:	9c 93       	st	X, r25
 b32:	8e 93       	st	-X, r24
 b34:	16 97       	sbiw	r26, 0x06	; 6
 b36:	ce 01       	movw	r24, r28
 b38:	df 91       	pop	r29
 b3a:	cf 91       	pop	r28
 b3c:	1f 91       	pop	r17
 b3e:	0f 91       	pop	r16
 b40:	08 95       	ret

00000b42 <__ultoa_invert>:
 b42:	fa 01       	movw	r30, r20
 b44:	aa 27       	eor	r26, r26
 b46:	28 30       	cpi	r18, 0x08	; 8
 b48:	51 f1       	breq	.+84     	; 0xb9e <__ultoa_invert+0x5c>
 b4a:	20 31       	cpi	r18, 0x10	; 16
 b4c:	81 f1       	breq	.+96     	; 0xbae <__ultoa_invert+0x6c>
 b4e:	e8 94       	clt
 b50:	6f 93       	push	r22
 b52:	6e 7f       	andi	r22, 0xFE	; 254
 b54:	6e 5f       	subi	r22, 0xFE	; 254
 b56:	7f 4f       	sbci	r23, 0xFF	; 255
 b58:	8f 4f       	sbci	r24, 0xFF	; 255
 b5a:	9f 4f       	sbci	r25, 0xFF	; 255
 b5c:	af 4f       	sbci	r26, 0xFF	; 255
 b5e:	b1 e0       	ldi	r27, 0x01	; 1
 b60:	3e d0       	rcall	.+124    	; 0xbde <__ultoa_invert+0x9c>
 b62:	b4 e0       	ldi	r27, 0x04	; 4
 b64:	3c d0       	rcall	.+120    	; 0xbde <__ultoa_invert+0x9c>
 b66:	67 0f       	add	r22, r23
 b68:	78 1f       	adc	r23, r24
 b6a:	89 1f       	adc	r24, r25
 b6c:	9a 1f       	adc	r25, r26
 b6e:	a1 1d       	adc	r26, r1
 b70:	68 0f       	add	r22, r24
 b72:	79 1f       	adc	r23, r25
 b74:	8a 1f       	adc	r24, r26
 b76:	91 1d       	adc	r25, r1
 b78:	a1 1d       	adc	r26, r1
 b7a:	6a 0f       	add	r22, r26
 b7c:	71 1d       	adc	r23, r1
 b7e:	81 1d       	adc	r24, r1
 b80:	91 1d       	adc	r25, r1
 b82:	a1 1d       	adc	r26, r1
 b84:	20 d0       	rcall	.+64     	; 0xbc6 <__ultoa_invert+0x84>
 b86:	09 f4       	brne	.+2      	; 0xb8a <__ultoa_invert+0x48>
 b88:	68 94       	set
 b8a:	3f 91       	pop	r19
 b8c:	2a e0       	ldi	r18, 0x0A	; 10
 b8e:	26 9f       	mul	r18, r22
 b90:	11 24       	eor	r1, r1
 b92:	30 19       	sub	r19, r0
 b94:	30 5d       	subi	r19, 0xD0	; 208
 b96:	31 93       	st	Z+, r19
 b98:	de f6       	brtc	.-74     	; 0xb50 <__ultoa_invert+0xe>
 b9a:	cf 01       	movw	r24, r30
 b9c:	08 95       	ret
 b9e:	46 2f       	mov	r20, r22
 ba0:	47 70       	andi	r20, 0x07	; 7
 ba2:	40 5d       	subi	r20, 0xD0	; 208
 ba4:	41 93       	st	Z+, r20
 ba6:	b3 e0       	ldi	r27, 0x03	; 3
 ba8:	0f d0       	rcall	.+30     	; 0xbc8 <__ultoa_invert+0x86>
 baa:	c9 f7       	brne	.-14     	; 0xb9e <__ultoa_invert+0x5c>
 bac:	f6 cf       	rjmp	.-20     	; 0xb9a <__ultoa_invert+0x58>
 bae:	46 2f       	mov	r20, r22
 bb0:	4f 70       	andi	r20, 0x0F	; 15
 bb2:	40 5d       	subi	r20, 0xD0	; 208
 bb4:	4a 33       	cpi	r20, 0x3A	; 58
 bb6:	18 f0       	brcs	.+6      	; 0xbbe <__ultoa_invert+0x7c>
 bb8:	49 5d       	subi	r20, 0xD9	; 217
 bba:	31 fd       	sbrc	r19, 1
 bbc:	40 52       	subi	r20, 0x20	; 32
 bbe:	41 93       	st	Z+, r20
 bc0:	02 d0       	rcall	.+4      	; 0xbc6 <__ultoa_invert+0x84>
 bc2:	a9 f7       	brne	.-22     	; 0xbae <__ultoa_invert+0x6c>
 bc4:	ea cf       	rjmp	.-44     	; 0xb9a <__ultoa_invert+0x58>
 bc6:	b4 e0       	ldi	r27, 0x04	; 4
 bc8:	a6 95       	lsr	r26
 bca:	97 95       	ror	r25
 bcc:	87 95       	ror	r24
 bce:	77 95       	ror	r23
 bd0:	67 95       	ror	r22
 bd2:	ba 95       	dec	r27
 bd4:	c9 f7       	brne	.-14     	; 0xbc8 <__ultoa_invert+0x86>
 bd6:	00 97       	sbiw	r24, 0x00	; 0
 bd8:	61 05       	cpc	r22, r1
 bda:	71 05       	cpc	r23, r1
 bdc:	08 95       	ret
 bde:	9b 01       	movw	r18, r22
 be0:	ac 01       	movw	r20, r24
 be2:	0a 2e       	mov	r0, r26
 be4:	06 94       	lsr	r0
 be6:	57 95       	ror	r21
 be8:	47 95       	ror	r20
 bea:	37 95       	ror	r19
 bec:	27 95       	ror	r18
 bee:	ba 95       	dec	r27
 bf0:	c9 f7       	brne	.-14     	; 0xbe4 <__ultoa_invert+0xa2>
 bf2:	62 0f       	add	r22, r18
 bf4:	73 1f       	adc	r23, r19
 bf6:	84 1f       	adc	r24, r20
 bf8:	95 1f       	adc	r25, r21
 bfa:	a0 1d       	adc	r26, r0
 bfc:	08 95       	ret

00000bfe <__prologue_saves__>:
 bfe:	2f 92       	push	r2
 c00:	3f 92       	push	r3
 c02:	4f 92       	push	r4
 c04:	5f 92       	push	r5
 c06:	6f 92       	push	r6
 c08:	7f 92       	push	r7
 c0a:	8f 92       	push	r8
 c0c:	9f 92       	push	r9
 c0e:	af 92       	push	r10
 c10:	bf 92       	push	r11
 c12:	cf 92       	push	r12
 c14:	df 92       	push	r13
 c16:	ef 92       	push	r14
 c18:	ff 92       	push	r15
 c1a:	0f 93       	push	r16
 c1c:	1f 93       	push	r17
 c1e:	cf 93       	push	r28
 c20:	df 93       	push	r29
 c22:	cd b7       	in	r28, 0x3d	; 61
 c24:	de b7       	in	r29, 0x3e	; 62
 c26:	ca 1b       	sub	r28, r26
 c28:	db 0b       	sbc	r29, r27
 c2a:	0f b6       	in	r0, 0x3f	; 63
 c2c:	f8 94       	cli
 c2e:	de bf       	out	0x3e, r29	; 62
 c30:	0f be       	out	0x3f, r0	; 63
 c32:	cd bf       	out	0x3d, r28	; 61
 c34:	09 94       	ijmp

00000c36 <__epilogue_restores__>:
 c36:	2a 88       	ldd	r2, Y+18	; 0x12
 c38:	39 88       	ldd	r3, Y+17	; 0x11
 c3a:	48 88       	ldd	r4, Y+16	; 0x10
 c3c:	5f 84       	ldd	r5, Y+15	; 0x0f
 c3e:	6e 84       	ldd	r6, Y+14	; 0x0e
 c40:	7d 84       	ldd	r7, Y+13	; 0x0d
 c42:	8c 84       	ldd	r8, Y+12	; 0x0c
 c44:	9b 84       	ldd	r9, Y+11	; 0x0b
 c46:	aa 84       	ldd	r10, Y+10	; 0x0a
 c48:	b9 84       	ldd	r11, Y+9	; 0x09
 c4a:	c8 84       	ldd	r12, Y+8	; 0x08
 c4c:	df 80       	ldd	r13, Y+7	; 0x07
 c4e:	ee 80       	ldd	r14, Y+6	; 0x06
 c50:	fd 80       	ldd	r15, Y+5	; 0x05
 c52:	0c 81       	ldd	r16, Y+4	; 0x04
 c54:	1b 81       	ldd	r17, Y+3	; 0x03
 c56:	aa 81       	ldd	r26, Y+2	; 0x02
 c58:	b9 81       	ldd	r27, Y+1	; 0x01
 c5a:	ce 0f       	add	r28, r30
 c5c:	d1 1d       	adc	r29, r1
 c5e:	0f b6       	in	r0, 0x3f	; 63
 c60:	f8 94       	cli
 c62:	de bf       	out	0x3e, r29	; 62
 c64:	0f be       	out	0x3f, r0	; 63
 c66:	cd bf       	out	0x3d, r28	; 61
 c68:	ed 01       	movw	r28, r26
 c6a:	08 95       	ret

00000c6c <_exit>:
 c6c:	f8 94       	cli

00000c6e <__stop_program>:
 c6e:	ff cf       	rjmp	.-2      	; 0xc6e <__stop_program>
